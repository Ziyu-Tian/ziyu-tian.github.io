{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>The personal notes, codes and temporal blogs will be posted here.</p>"},{"location":"BLOGS/","title":"Blogs","text":"<p>Click the left index to open the article.</p>"},{"location":"BLOGS/BlogsZero/","title":"Blogs_Zero","text":"<p>\u6b64\u4e43\u5e8f\u8a00\u3002</p> <p>\u4eba\u884c\u4e8e\u4e16\u95f4\uff0c\u9605\u6d6e\u751f\u767e\u6001\uff0c\u96be\u514d\u6709\u611f\u800c\u53d1\uff0c\u89e6\u666f\u751f\u60c5\u3002\u6216\u9047\u5e78\u4e8b\u800c\u51fb\u8282\u9ad8\u6b4c\uff0c\u6216\u9047\u96be\u5904\u800c\u9eef\u7136\u795e\u4f24\u3002\u6b32\u5c5e\u6587\u4ee5\u8bb0\u4e4b\uff0c\u53c8\u6050\u4f59\u624d\u758f\u5b66\u6d45\uff0c\u4e3a\u4eba\u6240\u7b11\u3002\u6545\u5199\u6742\u8c08\u4e8e\u6b64\uff0c\u4f9b\u5df1\u53c2\u8003\u3002</p>"},{"location":"BLOGS/Literature_260822/","title":"\u8bd7\u8bcd\u6742\u8c08_01: \u671b\u6d77\u6f6e_\u67f3\u6c38","text":""},{"location":"BLOGS/Literature_260822/#_1","title":"\u539f\u6587","text":"<p>\u4e1c\u5357\u5f62\u80dc\uff0c\u4e09\u5434\u90fd\u4f1a\uff0c\u94b1\u5858\u81ea\u53e4\u7e41\u534e\u3002\u70df\u67f3\u753b\u6865\uff0c\u98ce\u5e18\u7fe0\u5e55\uff0c\u53c2\u5dee\u5341\u4e07\u4eba\u5bb6\u3002\u4e91\u6811\u7ed5\u5824\u6c99\uff0c\u6012\u6d9b\u5377\u971c\u96ea\uff0c\u5929\u5811\u65e0\u6daf\u3002\u5e02\u5217\u73e0\u7391\uff0c\u6237\u76c8\u7f57\u7eee\uff0c\u7ade\u8c6a\u5962\u3002</p> <p>\u91cd\u6e56\u53e0\ud86a\ude58\u6e05\u5609\u3002\u6709\u4e09\u79cb\u6842\u5b50\uff0c\u5341\u91cc\u8377\u82b1\u3002\u7f8c\u7ba1\u5f04\u6674\uff0c\u83f1\u6b4c\u6cdb\u591c\uff0c\u5b09\u5b09\u9493\u53df\u83b2\u5a03\u3002\u5343\u9a91\u62e5\u9ad8\u7259\u3002\u4e58\u9189\u542c\u7bab\u9f13\uff0c\u541f\u8d4f\u70df\u971e\u3002\u5f02\u65e5\u56fe\u5c06\u597d\u666f\uff0c\u5f52\u53bb\u51e4\u6c60\u5938\u3002 </p>"},{"location":"BLOGS/Literature_260822/#_2","title":"\u4e00\u4e9b\u80e1\u8a00\u4e71\u8bed","text":"<p>\u4f5c\u4e3a\u767b\u4e0a\u4e86\u9ad8\u4e2d\u8bed\u6587\u5fc5\u4fee\u8bfe\u672c\u7684\u5b8b\u8bcd\u4e4b\u4e00\uff0c\u67f3\u6c38\u7684\u8fd9\u9996\u671b\u6d77\u6f6e\u5728\u6211\u5fc3\u91cc\u7559\u4e0b\u4e86\u5f88\u6df1\u7684\u5370\u8c61\uff0c\u4ee5\u81f3\u4e8e\u867d\u7136\u5df2\u7ecf\u8fc7\u53bb\u4e09\u5e74\u65f6\u95f4\uff0c\u4ecd\u7136\u8bb0\u5fc6\u72b9\u65b0\u3002\u5bf9\u4e8e\u4e00\u9996\u975e\u5f3a\u5236\u80cc\u8bf5\uff0c\u5b66\u4e60\u76ee\u6807\u4ec5\u4ec5\u4e3a\u201d\u4e86\u89e3\u201c\uff0c\u751a\u81f3\u8001\u5e08\u4e5f\u4e0d\u4f1a\u5c55\u5f00\u6765\u8bb2\u7684\u4e00\u9996\u201d\u8def\u4eba\u201c\u5b8b\u8bcd\uff0c\u6bd5\u4e1a\u4ee5\u540e\u4ecd\u7136\u80fd\u591f\u5b8c\u6574\u5730\u80cc\u8bf5\u51fa\u6765\uff0c\u4e0d\u5931\u4e3a\u4e00\u4e2a\u5947\u8ff9\u3002\uff08\u7136\u800c\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff09</p> <p>\u4e3a\u4ec0\u4e48\u4f1a\u8bb0\u5f97\u5982\u6b64\u6e05\u6670\u5462\uff1f\u9996\u8981\u7684\u539f\u56e0\u662f\u97f3\u5f8b\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u62bc\u97f5\u800c\u5e26\u6765\u7684\u8282\u594f\u611f\u3002\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u4e13\u95e8\u53bb\u201d\u6b7b\u8bb0\u786c\u80cc\u201c\uff0c\u53ea\u8981\u53cd\u590d\u8bf5\u8bfb\uff0c\u627e\u5230\u5c5e\u4e8e\u81ea\u5df1\u7684\u8282\u62cd\uff0c\u80cc\u4e0b\u6765\u5c31\u6613\u5982\u53cd\u638c\u3002\u6211\u60f3\uff0c\u8fd9\u5927\u6982\u548c\u67f3\u6c38\u7684\u4f5c\u8bcd\u98ce\u683c\u6709\u5173\u3002\u4f5c\u4e3a\u9002\u5408\u201c\u5341\u4e03\u516b\u5973\u90ce\uff0c\u6267\u7ea2\u7259\u677f\uff0c\u5531\u2018\u6768\u67f3\u5cb8\u6653\u98ce\u6b8b\u6708\u2019\u201d\u7684\u67f3\u4e03\u90ce\u8bcd\uff0c\u4e2a\u4eba\u611f\u89c9\u4ed6\u7684\u8bcd\u66f4\u63a5\u8fd1\u4e8e\u6211\u4eec\u73b0\u4ee3\u7684\u6d41\u884c\u6b4c\u66f2\uff0c\u56e0\u800c\u201c\u97f5\u5f8b\u201d\u8fd9\u4e00\u56e0\u7d20\u4fbf\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u5982\u679c\u5927\u5bb6\u90fd\u8bb0\u4e0d\u4f4f\u6b4c\u8bcd\uff0c\u4f55\u8c08\u201c\u6d41\u884c\u201d\uff1f</p> <p>\u8c08\u8c08\u8fd9\u9996\u8bcd\u672c\u8eab\u5427\u3002\u4f5c\u4e3a\u4e3a\u6570\u4e0d\u591a\u7684\u5199\u5165\u8bfe\u672c\u7684\u67f3\u6c38\u8bcd\uff08\u53e6\u5916\u4e00\u9996\u5927\u6982\u662f\u2018\u96e8\u9716\u94c3\u2019\uff09\uff0c\u5176\u5b9e\u8fd9\u9996\u8bcd\u7b97\u4e0d\u4e0a\u67f3\u6c38\u7684\u4ee3\u8868\u4f5c\uff0c\u4e5f\u4e0e\u4ed6\u5e73\u65f6\u7684\u4f5c\u8bcd\u98ce\u683c\u76f8\u8fe5\u5f02\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u4e00\u9996\u5e72\u8c12\u8bd7\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u67f3\u6c38\u5728\u676d\u5dde\u505a\u5b98\u7684\u5e7c\u5e74\u597d\u53cb\u63d0\u643a\u81ea\u5df1\uff0c\u5b89\u6392\u4e00\u5b98\u534a\u804c\u3002\u719f\u6089\u67f3\u6c38\u7684\u8bfb\u8005\u5e94\u8be5\u4f1a\u611f\u89c9\u5947\u602a\uff0c\u56e0\u4e3a\u67f3\u6c38\u7ed9\u4eba\u7684\u5370\u8c61\u90fd\u662f\u4e00\u79cd\u201c\u6d6a\u5b50\u201d\u7684\u5f62\u8c61\u3002\u201c\u6d6a\u5b50\u201d\u4e5f\u9700\u8981\u62c9\u5173\u7cfb\uff0c\u4e5f\u9700\u8981\u62c9\u4e0b\u9762\u5b50\u53bb\u62cd\u9a6c\u5c41\u6c42\u522b\u4eba\u5417\uff1f\u7136\u800c\u8fd9\u5c31\u662f\u4e8b\u5b9e\u3002\u6709\u65f6\u5019\u611f\u89c9\u81ea\u5df1\u603b\u4f1a\u5ffd\u7565\u4eba\u7684\u590d\u6742\u6027\u800c\u559c\u6b22\u201c\u9884\u8bbe\u201d\u4e00\u79cd\u523b\u677f\u5370\u8c61\u3002\u53ef\u80fd\u662f\u5e94\u8bd5\u6559\u80b2\u4e0b\u53e4\u8bd7\u8bcd\u9274\u8d4f\u4e2d\u7684\u201c\u77e5\u4eba\u8bba\u4e16\u201d\u8fc7\u4e8e\u8138\u8c31\u5316\u7684\u526f\u4f5c\u7528\uff0c\u674e\u592a\u767d\u603b\u662f\u6d6a\u6f2b\u7684\u3001\u82cf\u4e1c\u5761\u5fc5\u7136\u662f\u8c41\u8fbe\u7684\uff0c\u800c\u67f3\u4e03\u603b\u662f\u98ce\u6d41\u7684\u3002\u7136\u800c\u4e8b\u5b9e\u4e0a\u674e\u767d\u4e5f\u5199\u8fc7\u201c\u9752\u6885\u7af9\u9a6c\u201c\u7684\u9752\u6da9\u6865\u6bb5\uff0c\u82cf\u5b66\u58eb\u4e5f\u66fe\u5199\u8fc7\u201c\u5c0f\u8f69\u7a97\uff0c\u6b63\u68b3\u5986\u201d\u7684\u751f\u6b7b\u7231\u604b\uff0c\u800c\u67f3\u4e09\u53d8\u81ea\u7136\u4e5f\u6709\u8c0b\u6c42\u4ed5\u5ba6\u7684\u60f3\u6cd5\u3002\u8c01\u4e0d\u60f3\u6210\u4e3a\u201d\u5343\u9a91\u201c\u62e5\u62a4\u7684\u201d\u9ad8\u7259\u201c\uff0c\u8c01\u53c8\u60f3\u4e00\u8f88\u5b50\u505a\u81ea\u5728\u7684\u201d\u767d\u8863\u537f\u76f8\u201c\uff1f\u5c31\u50cf\u6211\u5176\u5b9e\u5f88\u559c\u6b22\u9e64\u51b2\u5929\u7684\u8c6a\u60c5\u58ee\u5fd7\uff08\u8fd8\u66fe\u7ecf\u53d1\u8fc7\u8bf4\u8bf4\uff09\uff0c\u4f46\u662f\u6211\u4e5f\u4e0d\u60f3\u6b21\u6b21\u201d\u5076\u5931\u9f99\u5934\u671b\u201c\u3002\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u9053\u7406\u5427\u3002</p> <p>\u518d\u6765\u8bf4\u8bf4\u8fd9\u9996\u8bcd\u6240\u5199\u7684\u5730\u65b9\u5427\u3002\u201d\u4e1c\u5357\u5f62\u80dc\uff0c\u4e09\u5434\u90fd\u4f1a\u201c\uff0c\u8bf4\u7684\u6b63\u662f\u676d\u5dde\u4e00\u5e26\u3002\u8bdd\u8bf4\u5176\u5b9e\u6211\u662f\u66fe\u7ecf\u9020\u8bbf\u8fc7\u676d\u5dde\u7684\uff0c\u6240\u8c13\u201d\u4eba\u95f4\u5929\u5802\u201c\uff0c\u6211\u662f\u5f88\u670d\u6c14\u7684\u3002\u867d\u7136\u6ca1\u6709\u89c1\u5230\u201d\u6012\u6d9b\u5377\u971c\u96ea\u201c\u7684\u94b1\u5858\u6f6e\u4fe1\uff0c\u4f46\u4e5f\u904d\u89c2\u7e41\u534e\uff0c\u5c3d\u770b\u70df\u971e\u3002\u540e\u6765\u89c1\u5230\u8fd9\u9996\u8bcd\u7684\u65f6\u5019\uff0c\u300c\u753b\u9762\u611f\u300d\u6cb9\u7136\u800c\u751f\u3002\u5c24\u5176\u662f\u4e0b\u9615\u201d\u83f1\u6b4c\u6cdb\u591c\u201c\u4e00\u53e5\uff0c\u76f4\u63a5\u5165\u9009\u6211\u201d\u6700\u60f3\u4f53\u9a8c\u7684\u610f\u8c61\u6392\u884c\u699c\u524d\u5341\u201c\uff0c\u4e0e\u4e4b\u7c7b\u4f3c\u7684\u8fd8\u6709\u201d\u753b\u8239\u542c\u96e8\u7720\u201c\u3002\u6ee1\u8db3\u4e86\u6211\u8fd9\u4e2a\u5317\u65b9\u4eba\u5bf9\u4e8e\u7406\u60f3\u5316\u6c5f\u5357\u7684\u4e00\u5207\u5e7b\u60f3\u3002\u4e0d\u77e5\uff08\u8fd8\u5f88\u8fdc\u7684\uff09\u5c06\u6765\u662f\u5426\u6709\u673a\u4f1a\u4f53\u9a8c\u3002</p> <p>\u6700\u8fd1n\u5237\u4e09\u8054\u7248\u5c04\u96d5\u4e09\u90e8\u66f2\uff0c\u53d1\u73b0\u91d1\u8001\u7237\u5b50\u63d0\u5230\u4e34\u5b89\u7684\u65f6\u5019\u7528\u4e86\u8fd9\u4e00\u9996\u8bcd\u4f5c\u4e3a\u573a\u666f\u7684\u4ecb\u7ecd\u8bd7\uff0c\u5524\u9192\u4e86\u6211\u5c18\u5c01\uff08\uff1f\uff09\u7684\u8bb0\u5fc6\uff0c\u6545\u800c\u8bb0\u4e4b\u3002</p> <p>\u5199\u4e8e\u516b\u6708\u4e8c\u5341\u516d\u65e5\u591c</p>"},{"location":"BLOGS/Thoughts_220822/","title":"\u4e00\u4e9b\u968f\u611f_22/08/2022","text":"<p>\u5176\u5b9e\u5e76\u6ca1\u6709\u60f3\u597d\u8981\u5199\u4ec0\u4e48\u3002\u53ea\u662f\u4e00\u4e9b\u6742\u4e71\u65e0\u7ae0\uff0c\u4e0d\u6210\u4f53\u7cfb\u7684\u60f3\u6cd5\u7f62\u4e86\u3002\u6709\u591a\u6742\u4e71\u5462\uff1f\u6211\u60f3\uff0c\u5927\u6982\u5c31\u50cf\u6ca1\u6709\u4e3b\u8bed\u7684\u4e0a\u4e00\u53e5\u8bdd\u4e00\u6837\u4e71\u3002\u5199\u51fa\u6765\u7684\u6587\u5b57\u5728\u591c\u98ce\u7684\u62c2\u52a8\u4e0b\u98a4\u52a8\uff0c\u4f3c\u4e4e\u4e5f\u8981\u6563\u67b6\u4e00\u822c\u3002</p> <p>\u6700\u8fd1\u83ab\u540d\u5176\u5999\u611f\u89c9\u597d\u7d2f\u3002\u5173\u4e8e\u8fd9\u4ef6\u4e8b\uff0c\u7a81\u7136\u60f3\u5230\u4e00\u4e2a\u5f88\u597d\u73a9\u7684\u5957\u5a03\uff1a\u8bf4\u662f\u201c\u83ab\u540d\u201d\uff0c \u4f46\u5e76\u4e0d\u662f\u5b8c\u5168\u627e\u4e0d\u5230\u539f\u56e0\uff1b\u6b63\u56e0\u4e3a\u597d\u50cf\u77e5\u9053\u4e00\u4e9b\u7f18\u7531\uff0c\u4f46\u4ecd\u7136\u60f3\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\uff0c\u8fd9\u4ef6\u4e8b\u60c5\u5c31\u663e\u5f97\u66f4\u4e3a\u201c\u83ab\u540d\u5176\u5999\u201d\u3002\u5c31\u50cf\u662f\u672c\u683c\u63a8\u7406\u4e2d\u7684\u6848\u4ef6\uff0c\u4f60\u5176\u5b9e\u5df2\u7ecf\u9501\u5b9a\u4e86\u51f6\u624b\uff0c\u4f46\u662f\u5c31\u662f\u627e\u4e0d\u5230\u624b\u6cd5\u548c\u52a8\u673a\uff0c\u4e8e\u662f\u4fa6\u63a2\u4eec\u9700\u8981\u5b8c\u6210\u7684\u5176\u5b9e\u662f\u6240\u8c13\u7684\u201c\u8bc1\u660e\u9898\u201d\u3002\u800c\u6211\u73b0\u5728\u4e5f\u9762\u4e34\u7740\u76f8\u4f3c\u7684\u5904\u5883\uff1a\u5982\u4f55\u8bc1\u660e\u8fd9\u4e9b\u751f\u6d3b\u4e2d\u7684\u95ee\u9898\u5c31\u662f\u8ba9\u6211\u4ea7\u751f\u2018\u7d2f\u2019\u8fd9\u79cd\u611f\u89c9\u7684\u539f\u56e0\uff1f\u4ea6\u6216\u662f\u8fd9\u79cd\u65e0\u8c13\u7684\u6c42\u8bc1\u8fc7\u7a0b\u53cd\u800c\u4f1a\u52a0\u5267\u6211\u7684\u75b2\u60eb\uff1f\u6211\u662f\u8be5\u6c42\u6839\u95ee\u5e95\uff0c\u8fd8\u662f\u88c5\u4f5c\u65e0\u4e8b\u53d1\u751f\u5730\u4e3a\u8fd9\u4e00\u8fde\u4e32\u9898\u76ee\u5199\u4e0a\u8fdd\u5fc3\u7684 \\(QED\\)?</p> <p>\u6362\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u629b\u5f00\u8bc1\u660e\u8fc7\u7a0b\u4e0d\u8c08\uff0c\u5c06\u6ce8\u610f\u91cd\u5fc3\u8f6c\u79fb\u5230\u201c\u8fd9\u4e9b\u539f\u56e0\u201d\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8ba9\u6211\u4eec\u6765\u8c03\u67e5\u4e00\u4e0b\u8fd9\u4e9b\u201c\u5acc\u7591\u4eba\u201d\u7684\u80cc\u666f\u3002\u9996\u5148\uff0c\u662f\u201c\u540c\u65f6\u601d\u8003\u7684\u95ee\u9898\u592a\u591a\u4f46\u89e3\u51b3\u7684\u95ee\u9898\u5f88\u5c11\u201d\u8fd9\u6837\u4e00\u4e2a\u5982\u540c\u8f7b\u5c0f\u8bf4\u6807\u9898\u4e00\u6837\u7684\u201d\u539f\u56e0\u201c\u4e4b\u4e00\u3002\u5ba2\u89c2\u4e0a\u6765\u8bb2\uff0c\u4eba\u5728\u60f3\u7684\u4e8b\u60c5\u592a\u591a\u7684\u65f6\u5019\u786e\u5b9e\u4f1a\u4ea7\u751f\u7cbe\u795e\u75b2\u60eb\u7684\u73b0\u8c61\uff1b\u800c\u5728\u4e00\u987f\u64cd\u4f5c\u4e4b\u540e\u9897\u7c92\u65e0\u6536\u7684\u60c5\u51b5\u4f1a\u8ba9\u4eba\u4ea7\u751f\u5931\u843d\u3002\u4e24\u79cddebuff \u53e0\u52a0\uff0c\u786e\u5b9e\u4f1a\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u72b6\u6001\u3002\u6ca1\u9519\uff0c\u4ee5\u4e0a\u5206\u6790\u6211\u81ea\u5df1\u4e5f\u5f88\u6e05\u695a\u3002\u5982\u679c\u662f\u522b\u4eba\u6765\u95ee\u6211\u540c\u6837\u7684\u95ee\u9898\uff0c\u6211\u5927\u6982\u4f1a\u6309\u7167\u4e0a\u9762\u6765\u5206\u6790\uff0c\u4f46\u5bf9\u6211\u81ea\u5df1\u5374\u5e76\u4e0d\u7ba1\u7528\u3002\u6211\u77e5\u9053\u539f\u56e0\uff0c\u4f46\u6211\u5e76\u4e0d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8bf4\u662f\u6211\u5b58\u5728\u7684\u57fa\u77f3\uff0c\u662f\u516c\u7406\u4e00\u6837\u7684\u5b58\u5728\uff1a\u8fd9\u662f\u6211\u4e0d\u5f97\u4e0d\u505a\u7684\u4e8b\u60c5\u3002</p> <p>\u6211\u65e0\u6cd5\u505c\u6b62\u591a\u7ebf\u7a0b\u601d\u8003\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u79cd\u9ad8\u7ea7\u6280\u80fd\uff0c\u800c\u662f\u4e00\u79cd\u8feb\u4e0d\u5f97\u5df2\u7684\u81ea\u6211\u4fdd\u62a4\u673a\u5236\uff0c\u8ba9\u6211\u65f6\u523b\u660e\u767d\u5b58\u5728\u7684\u610f\u4e49\u3002\u6b63\u5982\u7b1b\u5361\u5c14\u7684\u90a3\u53e5\u542c\u8d77\u6765\u5f88\u88c5\u903c\u7684\u8bdd\uff1a\u6211\u601d\u6545\u6211\u5728\u3002</p> <p>\u6211\u51b3\u5b9a\u7ec8\u6b62\u8fd9\u4e2a\u95ee\u9898\u3002\u56e0\u4e3a\u6211\u53d1\u73b0\u6211\u771f\u7684\u89e3\u51b3\u4e0d\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u6211\u505a\u7684\u6b63\u786e\u4e0e\u5426\uff0c\u6211\u60f3\uff0c\u65f6\u95f4\u4f1a\u7ed9\u51fa\u7b54\u6848\uff0c\u4ea6\u6216\u662f\uff0c\u62b9\u53bb\u95ee\u9898\u672c\u8eab\u3002</p> <p>\u8eab\u5904\u5ead\u9662\u4e4b\u4e2d\uff0c\u542c\u79cb\u98ce\u8fc7\u8033\uff0c\u201d\u5982\u8d74\u654c\u4e4b\u5175\uff0c\u8854\u679a\u75be\u8d70\u201c\u3002\u60f3\u5230\u81ea\u5df1\u4e5f\u66fe\u7ecf\u6458\u6284\u8fc7\u6b27\u9633\u6587\u5fe0\u516c\u7684\u79cb\u58f0\u8d4b\uff0c\u5f53\u65f6\u5c1a\u4e0d\u77e5\u4f55\u4e3a\u201d\u8854\u679a\u75be\u8d70\u201c\uff0c\u800c\u73b0\u5728\u5374\u5bf9\u201d\u88f9\u7532\u8854\u679a\u201c\u7684\u767e\u9a91\u52ab\u8425\u4e60\u4ee5\u4e3a\u5e38\uff0c\u4e0d\u514d\u6cbe\u6cbe\u81ea\u559c\u3002\u5374\u53c8\u60f3\u5230\u9ad8\u8003\u6587\u8a00\u5df2\u7ecf\u548c\u6211\u518d\u65e0\u74dc\u845b\uff0c\u6d77\u5916\u4ea6\u65e0\u6b64\u7b49\u5e38\u8bc6\u7528\u6b66\u4e4b\u5730\uff0c\u987f\u611f\u9eef\u7136\u3002</p> <p>\u4f46\u95fb\u56db\u58c1\u866b\u58f0\u5527\u5527\uff0c\u5982\u52a9\u4f59\u4e4b\u53f9\u606f\u3002</p> <p>\u5199\u4e8e\u516b\u6708\u4e8c\u5341\u4e8c\u65e5\u591c</p>"},{"location":"BLOGS/Thoughts_240822/","title":"\u7531\u5947\u602a\u7684\u6b4c\u5355\u800c\u4ea7\u751f\u7684\u968f\u611f_24/08/2022","text":"<p>\u7531\u4e00\u9996\u6b4c\u66f2\uff0c\u6216\u8005\u8bf4\u7279\u5b9a\u7684\u6b4c\u5355\u4f1a\u60f3\u8d77\u67d0\u4e2a\u7279\u5b9a\u7684\u573a\u666f\uff0c\u5524\u9192\u67d0\u4e00\u5ea6\u5c18\u5c01\u7684\u8bb0\u5fc6\uff0c\u8fd9\u4ef6\u4e8b\u4e0d\u8db3\u4e3a\u5947\u3002\u6211\u4e5f\u66fe\u7ecf\u770b\u8fc7\u4e0d\u5c11\u6b64\u7c7b\u7684\u6545\u4e8b\uff0c\u4f46\u662f\uff0c\u5524\u9192\u6211\u8bb0\u5fc6\u7684\u662f\u5e08\u8bf4\u548c\u963f\u623f\u5bab\u8d4b\u3002\u6709\u70b9\u79bb\u8c31\uff0c\u8bf4\u771f\u7684\u3002</p> <p>\u5176\u5b9e\u6b7b\u53bb\u7684\u53e4\u6587\u7a81\u7136\u653b\u51fb\u6211\u5e76\u4e0d\u662f\u56e0\u4e3a\u6211\u7231\u5b83\u4eec\u7231\u7684\u6df1\u6c89\uff0c\u4e3b\u8981\u662f\u5f53\u65f6\u60f3\u501f\u52a9\u4e00\u4e9b\u5947\u6280\u6deb\u5de7\u5feb\u901f\u8bb0\u5fc6\uff0c\u7136\u540e\u5c31\u628a\u52a0\u5165\u6b4c\u5355\u65e0\u9650\u5faa\u73af\uff0c\u6b63\u5982\u5199\u4e0b\u8fd9\u4e9b\u6587\u5b57\u65f6\u7684\u6211\u4e00\u6837\u3002\u719f\u6089\u800c\u53c8\u964c\u751f\u7684\u65cb\u5f8b\u548c\u6b4c\u8bcd\u5728\u8033\u8fb9\u8426\u7ed5\uff0c\u6211\u4f3c\u4e4e\u53c8\u56de\u5230\u4e86\u4e09\u5e74\u524d\u7684\u590f\u5929\u2014\u2014\u90a3\u65f6\u7684\u6211\uff0c\u8fd8\u4e0d\u4f1a\u50cf\u73b0\u5728\u4e00\u6837\u5410\u69fd\u8fd9\u503c\u5f97\u8305\u76fe\u6587\u5b66\u5956\u7684\u77eb\u60c5\u8868\u8fbe\u3002</p> <p>\u4e09\u5e74\u65f6\u95f4\u770b\u4f3c\u5f88\u957f\uff0c\u5b9e\u9645\u8f6c\u77ac\u5373\u901d\uff0c\u6211\u5b8c\u5168\u53ef\u4ee5\u81ea\u4fe1\u5730\u8bf4\u8fd9\u6bb5\u8bb0\u5fc6\u201c\u5b9b\u5982\u6628\u65e5\u201d\u3002\u5148\u6765\u8c08\u8c08\u5e08\u8bf4\u5427\uff0c\u5728\u6211\u4eec\u5b66\u6821\u4e2d\uff0c\u8fd9\u4e00\u7bc7\u6587\u7ae0\u653e\u5728\u4e86\u9ad8\u4e00\u7684\u5c3e\u58f0\u3002\u6211\u6e05\u6670\u5730\u8bb0\u5f97\uff0c\u90a3\u6b63\u597d\u662f\u6211\u4eec\u6821\u5916\u5b9e\u8df5\u6d3b\u52a8\u671f\u95f4\u3002\u5f53\u65f6\u5c1a\u57281802\uff0c\u5c1a\u5728\u540d\u4e3a\u5c16\u5200\u7684\u795e\u4ed9\u73ed\u7ea7\u3002\u8001\u5e08\u8bf4\uff0c\u5927\u5bb6\u8981\u5728\u5b9e\u8df5\u671f\u95f4\u80cc\u4f1a\u5e08\u8bf4\u3002\u4f17\u6240\u5468\u77e5\uff0c\u5b9e\u8df5\u6d3b\u52a8\u867d\u7136\u4e0d\u662f\u6b63\u7ecf\u4e0a\u8bfe\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u81ea\u5df1\u7684\u6d3b\u52a8\u5b89\u6392\uff0c\u6211\u4eec\u53ea\u597d\u5229\u7528\u6bcf\u5929\u7761\u524d\u996d\u540e\u7684\u4e00\u70b9\u65f6\u95f4\u6765\u8bb0\u5fc6\u3002\u5bbf\u820d\u7684\u5927\u5bb6\u6bd5\u7adf\u662f\u5c16\u5200\u73ed\u5b66\u751f\uff0c\u5b66\u4e60\u8d77\u6765\u8fd8\u662f\u5f88\u4e0a\u5fc3\u7684\u3002\u4e8e\u662f\u5927\u5bb6\u4e92\u5e2e\u4e92\u52a9\uff0c\u4e00\u8d77\u52aa\u529b\u5b8c\u6210\u8bb0\u5fc6\u3002\u6b63\u662f\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u5411\u5927\u5bb6\u63a8\u8350\u4e86\u8fd9\u9996\u6b4c\u3002\u5c3d\u7ba1\u5927\u5bb6\u4f3c\u4e4e\u5bf9\u8fd9\u79cd\u5c0f\u4f0e\u4fe9\u4e0d\u611f\u5174\u8da3\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u4f9d\u9760\u8fd9\u79cd\u65b9\u6cd5\u5b8c\u6210\u4e86\u8bb0\u5fc6\u3002\uff08\u5176\u5b9e\u7edd\u5927\u90e8\u5206\u957f\u7bc7\u53e4\u6587\u6211\u90fd\u662f\u8fd9\u6837\u8bb0\u5fc6\u7684\uff0c\u4e0d\u8fc7\u8fd9\u5c31\u662f\u53e6\u4e00\u4e2a\u6545\u4e8b\u4e86\uff09</p> <p>\u5c3d\u7ba1\u76f8\u5173\u6027\u5e76\u4e0d\u662f\u90a3\u4e48\u5927\uff08\u76f8\u5173\u7cfb\u6570\u5927\u6982\u4e0d\u4f1a\u8d85\u8fc70.75\u5427\uff09\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u4f1a\u6f5c\u610f\u8bc6\u91cc\u9762\u5c06\u8fd9\u9996\u5e08\u8bf4\u548c\u90a3\u6bb5\u65f6\u5149\u6302\u4e0a\u94a9\u3002\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u6765\u8bf4\uff0c\u90a3\u5e94\u8be5\u662f\u6211\u552f\u4e00\u4e00\u6b21\u4f53\u9a8c\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u201d\u96c6\u4f53\u5bbf\u820d\u201c\u751f\u6d3b\uff0c\u56e0\u4e3a\u6211\u4ece\u5c0f\u5b66\u5230\u9ad8\u4e2d\u76f4\u662f\u8d70\u8bfb\uff0c\u540e\u6765\u6765\u5230\u4e86\u7ebd\u5361\u4f4f\u7684\u4e5f\u662fstudio\uff0c\u4e5f\u5c31\uff08\u53ef\u80fd\uff09\u548c\u96c6\u4f53\u7684\u5927\u5b66\u751f\u6d3b\u6ca1\u6709\u5173\u7cfb\u4e86\u3002\u201c\u90a3\u771f\u7684\u662f\u5f88\u68d2\u7684\u4e00\u7fa4\u4eba\u554a\uff0c\u201d\u6211\u5e38\u5e38\u8fd9\u6837\u60f3\u3002\u6b64\u540e\u7684\u5206\u73ed\u8003\u8bd5\u4e2d\uff0c\u4ed6\u4eec\u90fd\u7559\u5728\u4e86\u5c16\u5200\uff0c\u53ea\u6709\u6211\u88ab\u5206\u5230\u4e86\u5b9e\u9a8c\u3002\u7136\u540e\u8054\u7cfb\u6e10\u5c11\uff0c\u6700\u7ec8\u53ea\u5269\u4e0b\u6708\u8003\u8003\u573a\u4e0a\u7684\u76f8\u9022\u4e00\u7b11\u3002\u518d\u540e\u6765\uff0c\u7530\u541b\u3001\u4efb\u541b\u548c\u6768\u541b\u9009\u62e9\u4e86\u8bed\u8a00\u7c7b\u4fdd\u9001\uff0c\u90dd\u541b\u9ad8\u8003\u53bb\u4e86\u67d0\u5357\u65b9985\u3002\u8881\u541b\u672a\u77e5\u53bb\u5411\uff0c\u5e0c\u671b\u4ed6\u4f9d\u7136\u4fdd\u6301\u7740\u63a2\u7d22\u81ea\u7136\u79d1\u5b66\u7684\u5174\u8da3\u5427\u3002\u201c\u4e09\u6c5f\u81ea\u6b64\u5206\u5357\u5317\u201d\uff0c\u613f\u8bf8\u541b\u7686\u80fd\u6210\u4e3a\u201c\u671d\u5411\u4e2d\u6c5f\u7684\u4e3b\u4eba\u201d\u3002</p> <p>\u5173\u4e8e\u963f\u623f\u5bab\u8d4b\uff0c\u90a3\u5c31\u662f\u53e6\u4e00\u4e2a\u6545\u4e8b\u4e86\u3002\u963f\u623f\u5bab\u8d4b \u4e5f\u662f\u56e0\u4e3a\u60f3\u8981\u8ffd\u6c42\u901f\u8bb0\u624d\u8fdb\u5165\u4e86\u6211\u7684\u6b4c\u5355\u3002\u4e0e\u5e08\u8bf4\u4e0d\u540c\uff0c\u8fd9\u7bc7\u6587\u7ae0\u662f\u9ad8\u4e8c\u4e0a\u5b66\u671f\u7684\u5fc5\u80cc\u53e4\u6587\u3002\u7136\u800c\u6211\u5f00\u59cb\u80cc\u8fd9\u7bc7\u6587\u7ae0\u5e76\u4e0d\u662f\u5728\u9ad8\u4e8c\uff0c\u800c\u662f\u5728\u9ad8\u4e00\u7684\u6691\u5047\uff08\u8bf4\u6765\u4f3c\u4e4e\u5c31\u662f\u73b0\u5728\u8fd9\u4e2a\u65e5\u671fhhh\uff09\u3002\u90a3\u65f6\u6b63\u503c\u5206\u73ed\u7ed3\u675f\uff0c\u6211\u94e9\u7fbd\u800c\u5f52\uff0c\u6b63\u9700\u8981\u4e00\u573a\u5927\u6218\u8bc1\u660e\u81ea\u5df1\uff0c\u800c\u90a3\u4e00\u573a\u5927\u6218\u5c31\u662f\u4e0d\u4e45\u4e4b\u540e\u7684\u4fdd\u9001\u8003\u8bd5\uff0c\u4ee5\u53ca\u5f00\u5b66\u540e\u7684\u7b2c\u4e00\u573a\u8003\u8bd5\u3002\u5982\u6b64\u91cd\u4efb\u5728\u80a9\uff0c\u6211\u5c82\u6709\u4e0d\u4ece\u4e4b\u7406\u3002\u5f53\u5373\u5389\u5175\u79e3\u9a6c\uff0c\u5907\u6218\u5f85\u654c\u3002\u6211\u4e0d\u5f97\u4e0d\u627f\u8ba4\u90a3\u786e\u5b9e\u662f\u6211\u7684\u6548\u7387\u5dc5\u5cf0\uff0c\u6700\u7ec8\u6210\u7ee9\u8fbe\u6807\u7684\u540c\u65f6\u8fd8\u8d85\u989d\u5b8c\u6210\u4e86\u8fd9\u4e9b\u4e0b\u5b66\u671f\u7684\u8bb0\u5fc6\u4efb\u52a1\u3002\u5d2d\u65b0\u800c\u5bcc\u6709\u6311\u6218\u7684\u9ad8\u4e8c\u751f\u6d3b\u5373\u5c06\u62c9\u5f00\u5e8f\u5e55\u2014\u2014\u2014\u2014</p> <p>\u9662\u4e2d\u4e00\u7247\u843d\u53f6\u843d\u5728\u624b\u8fb9\uff0c\u6211\u6458\u4e0b\u8033\u673a\uff0c\u56db\u9762\u98ce\u58f0\u4f9d\u65e7\u3002\u591c\u6df1\u4e86\uff0c\u6211\u6253\u4e86\u4e2a\u5bd2\u6218\uff0c\u90a3\u4e2a\u76db\u590f\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u800c\u6211\u6240\u9762\u4e34\u7684\u4e5f\u4e0d\u518d\u662f\u9ad8\u4e8c\uff0c\u800c\u662f\u5927\u4e8c\u3002\u53c8\u662f\u4e00\u5e74\u79cb\u98ce\u8d77\u3002</p> <p>\u201c\u800c\u540e\u4eba\u54c0\u4e4b\u800c\u4e0d\u9274\u4e4b\uff0c\u4ea6\u4f7f\u540e\u4eba\u800c\u590d\u54c0\u540e\u4eba\u4e5f\u201c\u3002\u6700\u540e\u4e00\u53e5\u7684\u6b4c\u8bcd\u4f3c\u4e4e\u5728\u8bc9\u8bf4\u7740\u4ec0\u4e48\u3002</p> <p>\u5199\u4e8e\u516b\u6708\u4e8c\u5341\u56db\u65e5\u591c</p>"},{"location":"DEV/","title":"Dev","text":"<p>Click the left index to open the article.</p>"},{"location":"DEV/BitOperation/","title":"Bit Operation in C","text":""},{"location":"DEV/BitOperation/#1-fundamental-basic","title":"1: Fundamental Basic","text":"<ul> <li> <p>Used to operate the intrigue variable (int,char,long,etc.) in binary bits. </p> </li> <li> <p>C/C++ provide six bit operators:</p> <ul> <li>'&amp;': bitwise AND (binary)</li> <li>'|': bitwise OR (binary)</li> <li>'^': bitwise EXCLUSIVE (binary)</li> <li>'~': bitwise NOT (unary)</li> <li>'&lt;&lt;': Left move (binary)</li> <li>'&gt;&gt;': Right move (binary)</li> </ul> </li> </ul>"},{"location":"DEV/BitOperation/#2-bitwise-and","title":"2: Bitwise AND '&amp;'","text":"<ul> <li> <p>For example, the result of \"21 &amp; 18\" is 16 (10000 in binary).</p> </li> <li> <p>'21' is '0000 0000 0000 0000 0000 0000 0001 0101'.</p> </li> <li> <p>'18' is '0000 0000 0000 0000 0000 0000 0001 0010'.</p> </li> <li> <p>So the result is '0000 0000 0000 0000 0000 0000 0001 0000'.</p> </li> <li> <p>Application :</p> <ul> <li>The '&amp;' can be used to set some bits to 0 and keep others origin.</li> <li>For example, it we need to set the lower 8 bits of 'int n' to 0 and keep others unchanged, then we can execute 'n=n &amp; 0xffffff00' or 'n &amp;= 0xffffff00'</li> <li>'0x' means hexadecimal number, 'f' means the '1111' in binary.</li> <li>So the six 'f' means the upper 24 digits of int and '00' (0000 0000 in binary) means the lower 8 digits. The '00' will set the lower 8 digits into '0', while others keep unchanged.</li> <li>For the 'short' type, order will be 'n &amp;= 0xff00'.</li> </ul> </li> </ul>"},{"location":"DEV/BitOperation/#3-bitwise-or","title":"3: Bitwise OR '|'","text":"<ul> <li> <p>Following the example above, \"21 | 18 =23\". </p> </li> <li> <p>Application :</p> <ul> <li>'|' can be used to set some bits '1' and keep others unchanged.</li> <li>If we want to set the lower 8 bits of 'int n' to '1' and keep other bits, the order 'n |= 0xff' can be used.</li> </ul> </li> </ul>"},{"location":"DEV/BitOperation/#4-bitwise-exclusive-or","title":"4: Bitwise EXCLUSIVE-OR '^'","text":"<ul> <li> <p>For example, '21^18=111'.</p> </li> <li> <p>Application:</p> <ul> <li>'^' used to set some bits inversely and keep others unchanged.</li> <li>If we want to invert the lower 8 digits of 'int n' and keep others unchanged, the order will be 'n^=0xff'.</li> <li>The '^' can be used as simple encode and decode.</li> <li>The '^' can also be used to exchange two numbers without the temp variable:</li> </ul> </li> </ul> <pre><code>int x=11; // binary '1011'\nint y=7; // '0111'\nx=x^y;\n        // x=1011^0111=1100.\n        // Note that in the EX-OR operation, the 'same part' will be set as '0', only if one is '0' and another is '1', the result will be '1'.\n        // If we 'EX-OR' the 'different-part', that digit will be exchange to other's digit.\n        //If we 'EX-OR' the 'same-part', the result will keep unchanged.\ny=x^y;\n        // y=1100^0111=1011, we can find the 'y' has already exchanged to 'x'\n\nx=x^y; \n        //x=1100^1011=0111, then the 'x' has been exchanged\n</code></pre>"},{"location":"DEV/BitOperation/#5-bitwise-not","title":"5: Bitwise NOT '~'","text":"<ul> <li>For example, '~21=0xffffffea'.</li> </ul>"},{"location":"DEV/BitOperation/#6-bitwise-left-shift","title":"6: Bitwise LEFT-SHIFT '&lt;&lt;'","text":"<ul> <li>The 'a &lt;&lt; b' is used to left-shift 'b' bits of binary a, the left-bit will be discorded and right-bit will be set as '0'.</li> <li>For example, '9 &lt;&lt; 4'.</li> <li>Binary '9' is '0000 0000 0000 0000 0000 0000 0000 1001', the result will be '0000 0000 0000 0000 0000 0000 1001 0000'</li> <li>In fact, left-shift 1 bit is same as multiply it by 2. Left-shift n bits is multiplying \\(2^n\\).</li> </ul>"},{"location":"DEV/BitOperation/#7-bitwise-right-shift","title":"7: Bitwise RIGHT-SHIFT '&gt;&gt;'","text":"<ul> <li>RIGHT-SHIFT is right-moving the binary bits.</li> <li>For the signed number, such as 'long,int,short,char', the sign digit (highest digit) will move at the same time.</li> <li>If the origin sign digit is '1', then the '1' will be added after moving; if it is '0', then the '0' will be added.</li> <li>The actual result of right-shifting n bits is equal to the eft number divide \\(2^n\\).</li> </ul>"},{"location":"DEV/Gdb/","title":"Quick Guide to Gdb debug","text":""},{"location":"DEV/Gdb/#1-preparation","title":"1: Preparation","text":"<ul> <li>Use '-g' option to compile:</li> </ul> <p><pre><code>g++ -g example.cpp -o example.dSYM\n</code></pre> It will generate a '.dSYM' file contain the debugging parameters.</p> <ul> <li>Starting the debugging:</li> </ul> <pre><code>gdb example.dSYM \n</code></pre>"},{"location":"DEV/Gdb/#2-setting-breakpoints","title":"2: Setting breakpoints","text":"<pre><code>(gdb) b main \n(gdb) b 30\n(gdb) info b \n(gdb) delete 2\n</code></pre>"},{"location":"DEV/Gdb/#3-running-the-program-being-debugged","title":"3: Running the program being debugged","text":"<pre><code>(gdb) r \n(gdb) c\n</code></pre>"},{"location":"DEV/Gdb/#4-examining-the-variables","title":"4: Examining the variables","text":"<pre><code>(gdb) p variable_a \n(gdb) p array[i+1]\n</code></pre>"},{"location":"DEV/StaticInC/","title":"The modifier 'static' in C","text":"<p>The modifier 'static' have three common usages in C:  * Modifier of local variables. * Modifier of global variables. * Modifier of functions.</p>"},{"location":"DEV/StaticInC/#1-modifier-of-local-variables","title":"1. Modifier of Local variables","text":"<p>If 'static' used in one block or function, this variable can only be called inside this function.</p> <p>These variables are called local static variable, which could keep the value of last call instead of being initialized each time.</p> <p>The local static variable without initialization will be set as '0'.</p> <p>For example:</p> <pre><code>void my_function()\n{\n    int x=0;\n    static int y=0;\n\n    printf(\"x: %d,y:%d\\n\",x,y);\n    x+=5;\n    y+=5;\n}\nint main()\n{\n    my_function();\n    my_function();\n    my_function();\n    return 0;\n}\n</code></pre> <p>We can find that the static local variable 'y' keep the last call value while the 'x' initialized each time when it was called.</p>"},{"location":"DEV/StaticInC/#2-modifier-of-global-variables","title":"2. Modifier of Global variables","text":"<p>The 'static' variables defined in global can be visited by all the functions in this file, but cannot be visited by other file in a project.(Even 'external' cannot)</p>"},{"location":"DEV/StaticInC/#3-modifier-of-functions","title":"3. Modifier of functions","text":"<p>The static function can only be called in this file but cannot be called externally.</p>"},{"location":"DEV/TimeComplexity/","title":"A Simple Understanding of Time &amp; Space Complexity","text":""},{"location":"DEV/TimeComplexity/#1-time-complexity","title":"1: Time Complexity","text":"<p>In computer science, the time complexity is the computational complexity that describes the amount of computer time it takes to run an algorithm.<sup>1</sup>. The most obvious method to judge an algorithm is the response speed, which is the base of algorithm: time &amp; space complexity.</p>"},{"location":"DEV/TimeComplexity/#the-big-o-notation","title":"The big O notation","text":"<p>We use the initial 'O' to express the time complexity of algorithm, such as \\(O(1)\\),\\(O(n)\\),\\(O(logn)\\), \\(O(nlogn)\\) and \\(O(n^2)\\).</p> <p>The time complexity is used to represent the relation between execution time and the increasing of data size. This method cannot express the precise execution time, but 'tendency' and 'relationship'instead.</p> <p>Here are some examples below.</p>"},{"location":"DEV/TimeComplexity/#o1-constant-time","title":"O(1) Constant Time","text":"<p>The '1' in \\(O(1)\\) means 'constant',refer to the constant efficiency no matter how the data size changing, which have the most efficient algorithm.</p> <p><pre><code>int a=1;\nint b=2;\nint sum=a+b;\nprintf(\"%d\",sum);\n</code></pre> Without loop, recursive and other complex structure, the complexity will be constant no matter how much the lines are.</p>"},{"location":"DEV/TimeComplexity/#on-linear-time","title":"O(n) Linear time","text":"<p>For example:</p> <p><pre><code>int a=0;\nfor(int i=0;i&lt;n;i++)\n{\n    a+=i;\n    printf(\"%d\\n\",a);\n}\n</code></pre> If we treat that the execution time for each line code are same 'T' and only consider the for() loop part, as the loop times are 'n', the total time will be nT, so the relationship will be \\(O(n)\\).</p>"},{"location":"DEV/TimeComplexity/#on2-quadratic-time","title":"\\(O(n^2)\\) Quadratic time","text":"<p>The double nested loop will produce \\(O(n^2)\\) and 'k' nested loop will be \\(O(n^k)\\).</p> <p>The code below is \\(O(n^2)\\):</p> <pre><code>int sum=0;\nfor(int i=0;i&lt;n;i++)\n{\n    for(int j=0;j&lt;0;j++)\n    {\n        sum+=j;\n    }\n}\n</code></pre>"},{"location":"DEV/TimeComplexity/#ologn-logarithmic-time","title":"\\(O(logn)\\) Logarithmic time","text":"<p>For example: <pre><code>int i=1;\nwhile (i&lt;=n)\n{\n    i=i*2;\n}\n</code></pre> To analyze the iteration times 'x', we can find that \\(2^x=n\\), so that \\(x=\\log_{2}{n}\\), which also is the time complexity \\(O(\\log{n})\\).</p>"},{"location":"DEV/TimeComplexity/#onlogn-linear-logarithmic-time","title":"\\(O(n\\log{n})\\) Linear Logarithmic time","text":"<p>If we add an outer phase of for() out of the \\(\\log{n}\\), we will get \\(O(n\\log{n})\\).</p> <p><pre><code>for(int j=1;j&lt;=n;j++)\n{\n    int i=1;\n    while(i&lt;=n)\n    {\n        i=i*2;\n    }\n}\n</code></pre> We can find that the time complexity of nested code will be the multiplication of inner and outer.</p>"},{"location":"DEV/TimeComplexity/#space-complexity","title":"Space Complexity","text":"<p>The space complexity of an algorithm or a computer program is the amount of memory space required to solve an instance of the computational problem as a function of characteristics of the input. It is the memory required by an algorithm until it executes completely.<sup>2</sup>. The big O notation can also be used to describe the space complexity.</p>"},{"location":"DEV/TimeComplexity/#on-linear-time_1","title":"\\(O(n)\\) Linear time","text":"<p><pre><code>int a=0;\nint array[] =new int [n];\nfor (int i=0;i&lt;n;i++)\n{\n    array[i]=n;\n}\n</code></pre> We can simply summarize: - For limit (constant) variables, \\(O(n)\\) - For linear array, \\(O(n)\\) - For second order array, \\(O(n^2)\\)</p>"},{"location":"DEV/TimeComplexity/#reference","title":"Reference","text":"<p>[1] Time complexity,https://en.wikipedia.org/wiki/Time_complexity</p>"},{"location":"DEV/ValueRefPass/","title":"The 'Pass-by-Value' and 'Pass-by-Reference' in C","text":""},{"location":"DEV/ValueRefPass/#pass-by-value","title":"Pass-by-Value","text":"<p>As a simple but classic example of pass-by-value, we cannot use the method below to swap two values:</p> <p><pre><code>void swap(int a,int b)\n{\n    int temp = a;\n    a = b;\n    b = temp;\n    printf(\"swap a = %d,b = %d\\n\",a,b);\n}\nswap(a,b);\n</code></pre> If we call the 'swap(a,b)', then print the a and b, the answer will show that the 'a' and 'b' still keep the original value. That is cause the function call in C are pass-by-value. </p> <p>The pass-by-value means when passing by the parameters, the function only pass a 'copy' of the origin parameters, so the 'swap()' can only change the value of the 'copy' instead of the origin values. After the call of the function 'swap()', the 'copy' value will be 'undefined' again.</p> <p>In order to operate the original value, we have to use pass-by-reference, which can simply treated as 'use pointers' at beginning.</p>"},{"location":"DEV/ValueRefPass/#pass-by-reference","title":"Pass-by-Reference","text":"<p>Still focus on the swap function, if we use the pointers (pass-by-value) as the parameter of function, the code will be:</p> <pre><code>void swap(int *a,int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n    printf(\"swap a = %d,b = %d\\n\",*a,*b);\n}\nswap(&amp;a,&amp;b);\n</code></pre> <p>In fact, the pointers are also kind of pass-by-value, but the type of the value is pointer.</p>"},{"location":"DEV/ValueRefPass/#summary","title":"Summary","text":"<ul> <li>The parameters in function are only 'copy', which cannot be changed inside the function.</li> <li>The only way to change the parameters in function is to input the address (pointer) of the parameter, use indirection to change what it points to.</li> </ul>"},{"location":"NOTES/","title":"Notes","text":"<p>Click the left index to open the article.</p>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/","title":"Computer Organization and Design (RISC-V Edition)","text":"<p>Based on Computer Organization And Design (RISC-V Edition) written by David A. Patterson and John L.Hennessy.</p>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#i-abstractions","title":"I: Abstractions","text":""},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#1-main-contents-of-the-book","title":"1: Main contents of the book","text":"<ul> <li> <p>The translation, executing of the high-level language.</p> </li> <li> <p>Interface between software and hardware.</p> </li> <li> <p>Improve the effectiveness using hardware design.</p> </li> <li> <p>Basics concepts of modern computer design.</p> </li> <li> <p>Sequential processing and parallel processing.</p> </li> </ul>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#2-systems-software","title":"2: Systems software","text":"<ul> <li> <p>Software including operating systems, compliers, loaders and assemblers.</p> </li> <li> <p>An operating system interfaces between a user's program and the hardware and provides a variety of services and supervisory functions.</p> </li> <li> <p>The complier perform the translation of a program written in a high-level language.</p> </li> </ul>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#3-form-high-level-to-hardware","title":"3: Form High-level to hardware","text":"<ul> <li> <p>We refer to each letter as a binary digit or bit.</p> </li> <li> <p>Instructions are collections of bits.</p> </li> <li> <p>The assembler is invented to translate a symbolic version of instructions into the binary version. (symbolic notation: add A, B; Ninary codes: 100010010)</p> </li> <li> <p>The symbolic language is called assembly language.</p> </li> <li> <p>High-level language is a portable language such as C, C++, Java or Visual Basic that is composed of words and algebraic notation that can be translate into assembly language by a complier.</p> </li> <li> <p>Example of C program complied into machine language:</p> </li> </ul> <p></p>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#4-the-organization-of-a-computer","title":"4: The organization of a computer","text":""},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#5-processor-integrated-circuit-example","title":"5: Processor integrated circuit example","text":"<ul> <li>The data path performs the arithmetic operations, and the control path tells the data path, memory, I/O devices what to do according to the instructions of the program.</li> </ul>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#6-instruction-set-architecture","title":"6: Instruction set architecture","text":"<ul> <li> <p>As mentioned above, one of the most important abstractions is the interface between the hardware and the low-level software, which is named of the instruction set architecture.</p> </li> <li> <p>The instruction set architecture includes anything programmers need to know to make a binary machine language program work properly, including the instructions, I/O, and so on.</p> </li> <li> <p>Typically, the operating system will encapsulate the details of doing I/O, allocating memory. </p> </li> <li> <p>The combination of the basic instruction set and the operating system interface provided for application programmers is called application binary interface(ABI).</p> </li> <li> <p>An instruction set allow designers to talk about function independently from the hardware such as clock hardware (quartz crystal, LED, buttons). The hardware that obeys the architecture abstraction is called implementation.</p> </li> </ul>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#7-memory","title":"7: Memory","text":"<ul> <li> <p>Volatile refer to the memory which lose data when the power is off. Non-volatile memory can keep the data even when power is off.</p> </li> <li> <p>Main memory also called primary memory is the memory used to hold programs while they are running, typically consists of DRAM in today's computers.</p> </li> <li> <p>Secondary Memory is non-volatile used to store programs and data between runs; typically consists of flash memory and magnetic disks in servers.</p> </li> </ul>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#8-tech-for-building-processors-and-memory","title":"8: Tech for building processors and memory","text":"<ul> <li> <p>Transistors: an on/off switch controlled by signal </p> </li> <li> <p>VLSI (very large-scale integrated circuit): a device containing hundreds of thousands to millions of transistors.</p> </li> <li> <p>The transistor manufacturing process starts with a silicon crystal ingot, then finely sliced into wafers.</p> </li> </ul> <p></p>"},{"location":"NOTES/Computer_Organization/computer_organ_riscv/#9-performance","title":"9: Performance","text":""},{"location":"NOTES/Electronics/FundamentalElectricCircuits/","title":"Fundamentals of Electric Circuits","text":"<p>The source textbook is the Fundamentals of Electric Circuits,The Seventh Edition, written by Charles Alexander and Matthew Sadiku. The index of this note are not following the same number of the textbook. </p>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#1-basic-concepts","title":"1: Basic Concepts","text":""},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#passive-sign-convention","title":"Passive sign convention","text":"<ul> <li>Passive sign convention is the convention we commonly used, which is satisfied when the current enters through the positive terminal (+)of an element. For the voltage analysis (eg. mesh analysis), if we follow a vested direction (mostly clockwise) of a loop, if the direction arrow enter the positive terminal (+) of a element, that voltage will be marked as '+' and vice versa.</li> <li>For example, the 5 V source in the Loop 1 should be marked as '-' as the following image. </li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#type-of-the-sources","title":"Type of the Sources","text":"<ul> <li>Ideal Independent sources is an active elements(could generate power) that provides a specified voltage or current is completely independent of other elements. We use the 'circled sources' refer to independent sources.</li> </ul> <ul> <li>Ideal dependent (controlled) source is an active element in which the source quantity is controlled by another voltage or current. There are four types of dependent sources, namely:  VCVS (voltage-controlled voltage source), CCVS, VCCS, CCCS. We use the 'diamond-shaped symbols' refer to dependent source.</li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#2-basic-laws","title":"2: Basic Laws","text":""},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#ohms-law-conductance","title":"Ohm's Law &amp; Conductance","text":"<ul> <li>Ohm's Law which is \\(v\\propto i\\), or more commonly \\(v=iR\\). The unit of resistance is Ohm.</li> <li>A useful quantity in circuit analysis is the reciprocal of resistance \\(R\\), Conductance,\\(G=\\frac{1}{R}\\). The unit of the conductance is mho (\\(\\mho\\)) or Siemens (\\(S\\)).</li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#nodes-branches-and-loops","title":"Nodes, Branches, and Loops","text":"<ul> <li>A branch represents a single element such as a voltage source or a resistor. Such as the 10-V voltage source, the 2-A current source and three resistors.</li> <li>A node is the point of the connection between two or more branches.(the point with same electric potential).</li> <li>A Loop is a closed path formed by starting at a node. A loop is said to be independent if it is a single circle which doesn't contain another loop. (a brief understanding) The circuit in the graph have 3 independent loops for example.</li> <li>According to the topology, we have \\(*b=l+n-1*\\).</li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#series-and-parallel","title":"Series and parallel","text":"<ul> <li>Two or more elements are in series if they exclusively share a single node and consequently carry the same current.</li> <li>Two or more elements are in parallel if they are connected to the same two nodes and consequently have the same voltage across them.</li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#kirchhoffs-laws","title":"Kirchhoff's Laws","text":"<ul> <li>Kirchhoff's current Law states that the algebraic sum of currents entering a node is zero.</li> <li>Kirchhoff's voltage Law states that the algebraic sum of all voltages around a closed loop is zero.</li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#wye-delta-transformations","title":"Wye-Delta Transformations","text":"<ul> <li>Wye-Delta Transformation is used to convert 'Y' or 'T' networks and '\\(\\Delta\\)' or '\\(\\Pi\\)' each other. </li> </ul> <ul> <li>Normally we use the graph below to do the conversion between 'Wye' and 'delta'.</li> </ul> <ul> <li>Note the rule that \\(R_1\\) faces to the \\(R_a\\) and same for other two resisters.(use alphas for 'delta' and digits for 'Wye')</li> <li>For the Delta to Wye conversion:<ul> <li>\\(R_1=\\frac{R_bR_c}{R_1+R_b+R_c}\\)</li> <li>\\(R_2=\\frac{R_cR_a}{R_a+R_b+R_c}\\)</li> <li>\\(R_3=\\frac{R_aR_b}{R_a+R_b+R_c}\\)</li> </ul> </li> <li>For the Wye to Delta conversion:<ul> <li>\\(R_a=\\frac{R_1R_2+R_2R_3+R_3R_1}{R_1}\\)</li> <li>\\(R_b=\\frac{R_1R_2+R_2R_3+R_3R_1}{R_2}\\)</li> <li>\\(R_c=\\frac{R_1R_2+R_2R_3+R_3R_1}{R_3}\\)</li> </ul> </li> <li>When \\(R_1=R_2=R_3\\), we say the network is balanced.</li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#3-methods-of-analysis","title":"3: Methods of Analysis","text":""},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#nodal-analysis","title":"Nodal Analysis","text":"<ul> <li>Nodal Analysis is a general method to analyze the circuits which using the nodal voltages as variables, so it is also known as node-voltage method.</li> <li>The Step of nodal analysis:<ul> <li>Determine a reference node which could be treated as ground.</li> <li>Apply KCL to each of the non-reference nodes, then use Ohm's Law to express the current in nodal voltages.</li> <li>Solve the Simultaneous Equations.</li> </ul> </li> <li>Nodal analysis with voltage sources:<ul> <li>When voltage source is connected between the reference node and a non-reference node, simply set the voltage at the no-reference node equal to the voltage of the voltage source as the '10 V' source in the picture below.</li> <li>When voltage source is between two non-reference nodes, which form a supernode(as the '5 V' source below) we use both KCL and KVL on the supernode: \\(i_1-i_2+i_4-i_3=0\\), then use the KVL between the supernode and the ground (a loop): \\(-v_2+5+v_3=0\\).</li> </ul> </li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#mesh-analysis","title":"Mesh Analysis","text":"<ul> <li>Mesh analysis is also known as loop analysis, which focus on the mesh, (i.e.a independent loop). The mesh analysis is only available to a circuit that is a planar (a topology term, means can be redraw with non branches crossing one another).</li> <li>For example, there are two meshes on the picture below.</li> </ul> <ul> <li>Steps to determine the mesh current:<ul> <li>Assign mesh current of the each mesh as the picture above. (Note that the direction of the current is arbitrary)</li> <li>Apply KVL to the meshes, use Ohm's Law to express the voltage in terms of the mesh current.</li> <li>Solve the equations. </li> </ul> </li> <li>Mesh Analysis with Current Sources:<ul> <li>The presence of the current sources will reduce the equations. </li> <li>When a current source exists only in one mesh, such as the left picture below, set \\(i_2=5\\) A and write the other mesh in usual way.</li> <li>When a current source exists between the two meshes, such as the right picture below, we will create a supermesh, which means two meshes have a (dependent or independent) current source in common.</li> </ul> </li> </ul> <ul> <li>When dealing with the supermesh, we can omit the branch with the current source, as the picture below, then apply the KVL of the new loop as \\(-20+6i_1+10i_2+4i_2=0\\) and KCL to node in the branch when two meshes intersect as \\(i_2=i_1+6\\), the answer will be apparent.</li> <li>Three meshes can also create a large supermesh.(the right schematic)</li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#nodal-and-mesh-analysis-by-inspection","title":"Nodal and Mesh Analysis by inspection","text":"<ul> <li>When all the sources in a circuit are independent current sources, we have a easier way to get the matrix form of the equations.</li> <li>We can use the formula \\(Gv=i\\) to generate the conductance matrix, such as:</li> </ul> \\[ \\left(\\begin{array}{cccc} G_{11} &amp; G_{12} &amp; \\cdots &amp; G_{1N} \\\\ G_{21} &amp; G_{22} &amp; \\cdots &amp; G_{2N} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\\\ G_{N1} &amp; G_{n2} &amp; \\vdots &amp; G_{NN} \\end{array}\\right)\\left(\\begin{array}{cccc} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_N \\end{array}\\right)=\\left(\\begin{array}{cccc} i_1 \\\\ i_2 \\\\ \\vdots \\\\ i_N \\end{array}\\right) \\] <ul> <li> <p>In the formula above:</p> <ul> <li>\\(G_{kk}\\)= Sum of the conductances connected to node k.</li> <li>\\(G_{kj}=G_{jk}=\\) Negative of the sum of the conductances of directly connecting nodes \\(k\\) and \\(j\\).</li> <li>\\(v_k\\)= Unknown voltage at node \\(k\\)</li> <li>\\(i_k=\\) Sum of all independent current sources directly connected to node \\(k\\), with current entering the node treated as positive.</li> </ul> </li> <li> <p>When a linear resistive circuit has only independent voltage sources, we can obtain the mesh equations by inspections.</p> </li> <li>We can generate the resistance matrix using the formula \\(Ri=v\\), such as:</li> </ul> \\[ \\left[\\begin{array}{cccc} R_{11} &amp; R_{12} &amp; \\cdots &amp; R_{1N} \\\\ R_{21} &amp; R_{21} &amp; \\cdots &amp; R_{2N} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\\\ R_{N1} &amp; R_{N2} &amp; \\cdots &amp; R_{NN} \\end{array}\\right] \\left[\\begin{array}{cccc} i_1 \\\\ i_2 \\\\ \\vdots \\\\ v_N \\end{array}\\right]=\\left[\\begin{array}{cccc} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_N \\end{array}\\right] \\] <ul> <li>In the formula above:<ul> <li>\\(R_kk\\)= Sum of the resistances in mesh \\(k\\).</li> <li>\\(R_{kj}=R_{jk}=\\) Negative of the resistances in common with meshes \\(k\\) and \\(j\\).</li> <li>\\(i_k\\) = Unknown mesh current for mesh \\(k\\) in the clockwise direction.</li> <li>\\(v_k\\) = Sum taken clockwise of all independent voltages sources in mesh \\(k\\), with voltage rise treated as positive.</li> </ul> </li> </ul>"},{"location":"NOTES/Electronics/FundamentalElectricCircuits/#analysis-methods-of-bjt","title":"Analysis Methods of BJT","text":"<ul> <li>The structure of a NPN BJT (left) and the current direction (right):</li> </ul> <ul> <li>The basic rules of BJT: \\(I_C=\\beta I_B\\)</li> <li>To use the nodal analysis method on BJT, we can change it to the equivalent model below:</li> </ul>"},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/","title":"FPGA Accelerating","text":""},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#i-dissertation-reading-researching","title":"I: Dissertation reading &amp; researching","text":""},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#1-abstract","title":"1: Abstract","text":"<ul> <li> <p>The approach using \"clause chunks\", which dividing the boolean expression into \"chunks\" to do group processing.</p> </li> <li> <p>Experiments were conducted on three datasets, XOR, Iris, MNIST (three famous datasets in ML domain).</p> </li> <li> <p>Pipeline stall could lead to increasing latency. (Pipeline stall or bubbles is the method to deal with hazard in circuit)</p> </li> <li> <p>Show the promise of improving hardware efficiency in ML.</p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#2-introduction","title":"2: Introduction","text":"<ul> <li> <p>The increasing demand of ML acceleration using FPGA or GPU.</p> </li> <li> <p>TM (Tsetlin machine), a novel binary classifier may have higher efficiency.</p> </li> <li> <p>This paper declare the mechanism of \"clause chunking\" which could reduce the TM hardware and power consumption.</p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#3-literature-review-and-background","title":"3: Literature review and background","text":""},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#31-tsetlin-machine","title":"3.1: Tsetlin Machine","text":"<ul> <li>Basic concepts of Tsetlin machine:</li> </ul> <p>Applying the \"if-then\" principle to make decision based on the booleanisation of the input.</p> <p></p> <ul> <li>It is performed through the negation input literals alongside the standard input to encode it to a boolean feature:</li> </ul> <p></p>"},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#32-tsetlin-automata","title":"3.2: Tsetlin Automata","text":"<ul> <li>The logical rules are adjusted during the training process, which reinforcing the correct decision and diminishing those incorrect decisions:</li> </ul> <ul> <li>The advantage of Tsetlin machine: no extra training time for TM.</li> </ul>"},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#33-machine-learning-using-automata","title":"3.3: Machine learning using automata","text":"<ul> <li> <p>Input data are defined as a set of binarized features and their complements, which is called literals.</p> </li> <li> <p>The literals are fed into the learning automation structure through two major parts: one for *classification* another for reinforcement and feedback for learning**.</p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/FPGA_Acc/#4-hardware-for-acceleration","title":"4: Hardware for acceleration","text":"<ul> <li> <p>CPU not suitable for training ML algorithm, the need for GPU and FPGA based hardware acceleration increased.</p> </li> <li> <p>The choice of this project: FPGA pynq-z1 </p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/","title":"Ng Wu Machine Learning","text":""},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#1-supervised-learning","title":"1: Supervised Learning","text":"<ul> <li> <p>Regression: </p> <ul> <li>predict a number which is infinitely many possible inputs</li> <li>Eg. predict the houses-price </li> </ul> </li> <li> <p>Classification:</p> <ul> <li>Eg. Breast Cancer Detection</li> <li>For one input such as the tumor length, we can get a range such as 0.5-0.7 to identify classes.</li> <li>For two or more output, such as tumor size and age, we can still get a malignant between two classes: </li> </ul> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#2-unsupervised-learning","title":"2: Unsupervised learning","text":"<ul> <li>Clustering: <ul> <li>Places the unlabeled data into different clusters.</li> <li>Eg. Clustering news with same topic </li> <li>Eg. Grouping customers </li> </ul> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#3-regression-model","title":"3: Regression Model","text":"<ul> <li> <p>Regression model predicts numbers in supervised learning </p> </li> <li> <p>The result may be infinite </p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#31-cost-function","title":"3.1: Cost function","text":""},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#computing-cost","title":"Computing Cost","text":"<p>The term 'cost' in this assignment might be a little confusing since the data is housing cost. Here, cost is a measure how well our model is predicting the target price of the house. The term 'price' is used for housing data.</p> <p>The equation for cost with one variable is:   \\(\\(J(w,b) = \\frac{1}{2m} \\sum\\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})^2 \\tag{1}\\)\\) </p> <p>where    \\(\\(f_{w,b}(x^{(i)}) = wx^{(i)} + b \\tag{2}\\)\\)</p> <ul> <li>\\(f_{w,b}(x^{(i)})\\) is our prediction for example \\(i\\) using parameters \\(w,b\\).  </li> <li>\\((f_{w,b}(x^{(i)}) -y^{(i)})^2\\) is the squared difference between the target value and the prediction.   </li> <li>These differences are summed over all the \\(m\\) examples and divided by <code>2m</code> to produce the cost, \\(J(w,b)\\).   <p>Note, in lecture summation ranges are typically from 1 to m, while code will be from 0 to m-1.</p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#cost-calculation-function-in-python","title":"Cost-calculation function in Python","text":"<pre><code>def compute_cost(x, y, w, b): \n    \"\"\"\n    Computes the cost function for linear regression.\n\n    Args:\n      x (ndarray (m,)): Data, m examples \n      y (ndarray (m,)): target values\n      w,b (scalar)    : model parameters  \n\n    Returns\n        total_cost (float): The cost of using w,b as the parameters for linear regression\n               to fit the data points in x and y\n    \"\"\"\n    # number of training examples\n    m = x.shape[0] \n\n    cost_sum = 0 \n    for i in range(m): \n        f_wb = w * x[i] + b   \n        cost = (f_wb - y[i]) ** 2  \n        cost_sum = cost_sum + cost  \n    total_cost = (1 / (2 * m)) * cost_sum  \n\n    return total_cost\n</code></pre>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#32-gradient-descent-algorithm","title":"3.2: Gradient Descent Algorithm","text":"<ul> <li>Target: have some cost function \\(J(w,b)\\), want to find a \\(\\min_{w,b}J(w,b)\\)</li> </ul> <p>In lecture, gradient descent was described as:</p> \\[\\begin{align*} \\text{repeat}&amp;\\text{ until convergence:} \\; \\lbrace \\newline \\;  w &amp;= w -  \\alpha \\frac{\\partial J(w,b)}{\\partial w} \\tag{3}  \\; \\newline   b &amp;= b -  \\alpha \\frac{\\partial J(w,b)}{\\partial b}  \\newline \\rbrace \\end{align*}$$ where, parameters $w$, $b$ are updated simultaneously.   The gradient is defined as: $$ \\begin{align} \\frac{\\partial J(w,b)}{\\partial w}  &amp;= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})x^{(i)} \\tag{4}\\\\   \\frac{\\partial J(w,b)}{\\partial b}  &amp;= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)}) \\tag{5}\\\\ \\end{align} \\] <p>Here simultaniously means that you calculate the partial derivatives for all the parameters before updating any of the parameters.</p>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#33-multi-linear-regression-model","title":"3.3: Multi-linear regression model","text":"<ul> <li>For the multi-features \\(x_1, x_2, x_3...x_n\\), a linear model can built as:</li> </ul> \\[ f_{w,b}(x) = w_1x_1 + w_2x_2 + ... +w_nx_n +b  \\] <ul> <li>For a series of \\(w\\) and \\(b\\) can be set as two vectors:</li> </ul> \\[ \\vec{w} = [w_1, w_2, w_3... w_n]\\\\ \\vec{x} = [x_1, x_2, x_3... x_n] \\] <ul> <li>The function can be rewrite as:</li> </ul> \\[ f_{\\vec{w},b} = \\vec{w}. \\vec{x} +b  \\] <ul> <li>'Dot product' means each element being multiplied respectively.</li> </ul>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#vectorized-method","title":"Vectorized Method","text":""},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#feature-scaling","title":"Feature Scaling","text":"<ul> <li> <p>The range of the features may not same, which may lead to different weight-coefficient '\\(w_n\\)'.</p> </li> <li> <p>For the variable \\(x_1\\) with standard deviation \\(\\sigma_1\\) and average \\(\\mu_1\\), \\(x\\) can be rescaled as:</p> </li> </ul> \\[ x_1' = \\frac{x_1 - \\mu_1}{\\sigma_1} \\]"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#checking-the-convergence-of-gradient-descent","title":"Checking the convergence of gradient descent","text":"<ul> <li>Use the learning curve of \\(\\J(\\vec{w},\\vec{b})\\), it should be converged to 0:</li> </ul> <ul> <li> <p>Use automatic convergence test: </p> </li> <li> <p>Let \\(\\epsilon\\) is the descent per step, which could be set as 0.001 or other precise tiny number.</p> </li> <li>If \\(J(\\vec{w},\\vec{b})\\) decreases by \\(\\le \\epsilon\\), this iteration is declared as convergence.</li> </ul>"},{"location":"NOTES/FPGA_Acceleration/Ng_MachineLeaning/#choosing-of-learning-rate-alpha","title":"Choosing of learning-rate \\(\\alpha\\)","text":""},{"location":"NOTES/FPGA_Acceleration/machineLearning/","title":"Machine Learning in Action","text":""},{"location":"NOTES/FPGA_Acceleration/machineLearning/#i-basics","title":"I: Basics","text":"<ul> <li> <p>Classification: The target variable only have discrete values such as \"true or false\", \" reptile or fish or mammal...\".</p> </li> <li> <p>Regression: The target variables are continuous.</p> </li> <li> <p>Features or Attributes: the characteristics we measured to classify </p> </li> <li> <p>Training set is the set of training examples we will use to train the classification algorithm.</p> </li> <li> <p>Target variable is the data what we are going to predict, which is called the classes in classification problem.</p> </li> <li> <p>Test set is the set of data to test the accuracy of the algorithm.</p> </li> <li> <p>Knowledge representation is what the machine learned, which maybe the form of a set of rules, a probability distribution or an expert system.</p> </li> <li> <p>Classification and regression are known as supervised learning because we are telling the algorithm what to predict.</p> </li> <li> <p>In unsupervised learning, a task we group similar items together is known as a clustering. </p> </li> <li> <p>We try to find statistical values that describe the data, which is called density estimation.</p> </li> <li> <p>If you\u2019re trying to predict or forecast a target value, then you need to look into supervised learning. If not, then unsupervised learning is the place you want to be.</p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/machineLearning/#ii-basics-of-python","title":"II: Basics of Python","text":"<ul> <li>Use command entering the python shell in unix-like system:</li> </ul> <pre><code>python3 \n</code></pre> <ul> <li>Import the numPy() library:</li> </ul> <pre><code>from numpy import *\n</code></pre> <ul> <li> <p>numPy have two different types for dealing with rows and columns of data: matrix and array</p> </li> <li> <p>Array can be converted to matrix using:</p> </li> </ul> <pre><code>randMat = mat(random.rand(4,4))\n</code></pre> <ul> <li>The '.I' operation can be used to reverse the matrix:</li> </ul> <pre><code>randMat.I\n</code></pre> <ul> <li>The function 'eye(n)' can create an indentity matrix of size n:</li> </ul> <pre><code>eye(4)\n</code></pre>"},{"location":"NOTES/FPGA_Acceleration/machineLearning/#iii-k-nearest-neighbors-classification-algorithm","title":"III: K-nearest Neighbors classification algorithm","text":""},{"location":"NOTES/FPGA_Acceleration/machineLearning/#1-classifying-with-distance-measurement","title":"1: Classifying with distance measurement","text":"<ul> <li> <p>Pros: High accuracy, insensitive to outliers, no assumptions </p> </li> <li> <p>Cons: Requires a lot of memory </p> </li> <li> <p>Works with: Numeric values, nominal values </p> </li> <li> <p>We look at the top k most similar pieces of data from our known dataset. (k &lt; 20)</p> </li> <li> <p>Lastly, we take a majority vote from the k most similar pieces of data , and the majority is the new class we assign to the data we were asked to classify.</p> </li> <li> <p>For the example of movie classification, if we calculate the number of kicks and kisses:</p> </li> </ul> <p></p> <ul> <li>If we choose the top three of action and romance movie, there should be one unknown movie. So that we calculate the distance to movie \"?\" of other movies:</li> </ul> <p></p> <ul> <li>Let's assume k=3, as the top closest movies are all romances, so we forecast that the mystery movie us a romance.</li> </ul>"},{"location":"NOTES/FPGA_Acceleration/machineLearning/#2-general-approach-to-knn","title":"2: General approach to kNN","text":"<ul> <li> <p>Collect: Any method </p> </li> <li> <p>Prepare: Numerical values are needed for a distance calculation</p> </li> <li> <p>Analyze: Any </p> </li> <li> <p>Train: No training </p> </li> <li> <p>Test: Calculating the error rate.</p> </li> <li> <p>Use: The application runs the kNN algorithm on this input data and determines which class the input data should belong to. The application then takes some action on the calculated class.</p> </li> </ul>"},{"location":"NOTES/FPGA_Acceleration/machineLearning/#3-prepare-importing-data-with-python","title":"3: Prepare: Importing data with Python","text":"<ul> <li> <p>Assume all codes in the file kNN.py.</p> </li> <li> <p>Import the NumPy and operator module, which is used later in the kNN for sorting.</p> </li> <li> <p>The function 'createDataSet()' can create the dataset and labels.</p> </li> <li> <p>Import kNN in the target directory:</p> </li> </ul> <p><pre><code>import kNN\ngroup,labels = kNN.createDataSet()\n</code></pre> - This creates two variables called group and labels:</p> <p></p> <ul> <li> <p>Here we have four pieces of data, each piece of data has two attributes or features. For example, we assigned the data point (1,1.1) to the class A, '1' and '1.1' are the numerical features.</p> </li> <li> <p>The plotted data should be:</p> </li> </ul> <p></p>"},{"location":"NOTES/FPGA_Acceleration/machineLearning/#4-putting-the-knn-classification-algorithm-into-action","title":"4: Putting the kNN classification algorithm into action","text":"<ul> <li> <p>The pseudo-code should be like this:</p> <ul> <li>Calculating the distance between inX and the current point</li> <li>Sort the distance in increasing order </li> <li>Take k items with lowest distances to inX </li> <li>Find the majority class among this items</li> <li>return the majority class as our prediction for the class of inX </li> </ul> </li> <li> <p>kNN algorithm Python codes:</p> </li> </ul> <pre><code>def classify0(inX, dataSet, labels, k):\n    # The input vector to classify called inX;\n    # Our full-matrix of training examples called dataSet.\n    # Labels is a vector of labels\n    # k is the value of nearest neighbor\n    # The labels vector should have as many as many elements in it as rows in dataSet matrix\n    dataSetSize = dataSet.shape[0]\n    # 'shape' function can get the order of matrix\n    # 'shape[0]' can get the value of row in the matrix\n    diffMat = tile(inX, (dataSetSize,1)) - dataSet \n    # \n</code></pre>"},{"location":"NOTES/Stage_1/1000/Job_Application/","title":"I: Introduction","text":""},{"location":"NOTES/Stage_1/1000/Job_Application/#1-employers","title":"1: Employers","text":"<ul> <li>Competitive no matter where you are from.</li> <li>Qualifications + skills + experience + application techniques.</li> <li>Want to know: (need to be demonstrate)<ul> <li>Your skills</li> <li>Motivation</li> <li>Fit the organization. </li> </ul> </li> <li>How long: 5-30 seconds. (make sure it is short and cohesive)</li> </ul>"},{"location":"NOTES/Stage_1/1000/Job_Application/#2-cvs","title":"2: CVs","text":"<ul> <li>A CV should contain two pages of A4 scale.</li> <li>No need to add any photos.</li> <li>Making changes to each jobs.</li> <li>A written summary.</li> <li>Highlight the reasons.</li> <li>Continue to change as ou acquire new skills.</li> <li>Should be writing for a specific purpose.</li> <li>Read the job description and take some notes:<ul> <li>List the Qualifications and Personal attributes.</li> </ul> </li> <li>Format:<ul> <li>2 pages (one page for part-time jobs)</li> <li>Use the consistent layout.</li> <li>Text size 11 or 12.</li> <li>Clearing headings and use of bold.</li> <li>Use bullet points instead of paragraph</li> </ul> </li> <li>Order:<ul> <li>Personal details.(name,tel,email)</li> <li>Education.</li> <li>Working Experience.</li> <li>Relevant: interests or additional skills. (optional)</li> <li>References (depend on the request)</li> </ul> </li> <li>Education:<ul> <li>Don't forget your degree.</li> <li>Relevant modules </li> <li>Skills from the projects (group works or dissertation)</li> <li>Previous Education.</li> </ul> </li> <li>Work Experience<ul> <li>Bullet the contents instead of description.</li> <li>Make it relevant.</li> <li>Start with most recent experience.</li> <li>Include the date and title and employer name, location and a brief description of the skills developed.</li> <li>Separate the relevant and additional experience.</li> </ul> </li> <li>Additional skills and interests<ul> <li>Languages</li> <li>IT skills.</li> <li>Be specify of the interests</li> </ul> </li> <li>Attention to details<ul> <li>Check your spelling and grammar.</li> <li>name use '_'</li> <li>Check your email address.</li> </ul> </li> <li>Format, Order, Relevant, Details</li> </ul>"},{"location":"NOTES/Stage_1/1000/Job_Application/#3-covering-letters","title":"3: Covering letters","text":"<ul> <li>The basic:<ul> <li>Your CV must be accompanied with a covering letter.</li> <li>Highlight of the CV.</li> </ul> </li> <li>Research the employer:<ul> <li>Read the job description to find what they are looking for.</li> <li>Company websites, News reports, View updates on social media.</li> </ul> </li> <li>layout<ul> <li>Letter style</li> <li>One page</li> <li>Dear Sir/Madam: \\(\\Rightarrow\\) Yours faithfully.</li> <li>Dear Mr. : \\(\\Rrightarrow\\) Your sincerely.</li> </ul> </li> <li>Structure:<ul> <li>Introduction</li> <li>Why they should pick you.</li> <li>Motivation to this company.</li> <li>Additional: Somethings else.</li> <li>Conclude.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_1/1000/Job_Application/#ii-writing-cvs-and-making-applications","title":"II: Writing CVs and Making applications","text":""},{"location":"NOTES/Stage_1/1000/Job_Application/#1-opening-and-closing","title":"1: Opening and closing","text":"<ul> <li>Find out the name of the person instead of sir or madam. (if possible)</li> <li>Put 'yours sincerely' at the end of the letter with Dear Mr Brown </li> <li>Put 'your faithfully' at the end of the letter with Sir or Madam.</li> </ul>"},{"location":"NOTES/Stage_1/1000/Placement/","title":"1: Benefits","text":"<ul> <li>Key transferable skills</li> <li>Potentially earn a salary</li> <li>Decide what you are going to do</li> <li>Gain academic skills</li> <li>Communication skills</li> </ul>"},{"location":"NOTES/Stage_1/1000/Placement/#2-key-information","title":"2: Key Information","text":"<ul> <li>The placement is undertaken after your last but two year</li> <li>You source your own placement</li> <li>Generally not degree depended</li> <li>Must be at least 9 months</li> </ul>"},{"location":"NOTES/Stage_1/1000/Placement/#3-q-a","title":"3: Q &amp; A","text":"<ul> <li>Graduate or Postgraduate</li> <li>Complement not take-over</li> </ul>"},{"location":"NOTES/Stage_1/1000/Placement/#4-timing","title":"4: Timing","text":"<ul> <li>Sep or Oct in the second year</li> <li>Spring/summer period before the application</li> </ul>"},{"location":"NOTES/Stage_1/1000/Placement/#5-career-service","title":"5: Career Service","text":"<ul> <li>CV Checking</li> <li>Help making decisions</li> <li>Interviewing coaching</li> <li>www.nal.ac.uk/careers</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/","title":"Engineering Mathematics","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#i-matrix-and-vector","title":"I: Matrix and Vector","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-matrix","title":"1: Matrix","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#11-definition-and-notation","title":"1.1: Definition and Notation","text":"<ul> <li>A method of recording hundreds of equations in engineering. (eg. infinite elements with 3D nodes) </li> <li>A matrix is called \"lines by column\", eg. 2x3 means 2 lines and 3 columns.</li> <li>Capital letter 'A' for a matrix and lower case '\\(a_{ij}\\)' for the element of 'A', 'i' is the line and 'j' is the column.</li> <li>\\(A=\\begin{pmatrix}1&amp;1\\\\1&amp;1\\end{pmatrix}\\) which is a 2x2 matrix.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-special-matrix","title":"1.2: Special Matrix","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-diagonal-matrix","title":"(1): Diagonal Matrix","text":"<p>All elements are '0' except the '\\' diagonal, but the diagonal can be '0'. e.g, \\(\\begin{pmatrix}2&amp;0&amp;0\\\\0&amp;3&amp;0\\\\0&amp;0&amp;4\\end{pmatrix}\\)</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-symmetric-matrix","title":"(2): Symmetric matrix","text":"<p>\\(\\begin{pmatrix}1&amp;3&amp;-7\\\\3&amp;0&amp;2\\\\-7&amp;2&amp;-5\\end{pmatrix}\\), \\(a_{ij}=a_{ji}\\)</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-antisymmetric-matrix","title":"(3): Antisymmetric matrix","text":"<p>\\(\\begin{pmatrix}1&amp;-3&amp;7\\\\3&amp;0&amp;2\\\\-7&amp;2&amp;-5\\end{pmatrix}\\) , \\(a_{ij}=-a_{ji}\\), \\(i\\not ={j}\\)</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#4-upperlower-triangular-matrix","title":"(4): Upper/Lower triangular matrix","text":"<p>\\(\\begin{pmatrix}1&amp;1&amp;1\\\\0&amp;1&amp;1\\\\0&amp;0&amp;1\\end{pmatrix}\\), \\(i&gt;j\\), \\(a_{ij}=0\\),which is Upper . </p> <p>\\(\\begin{pmatrix}1&amp;0&amp;0\\\\1&amp;1&amp;0\\\\1&amp;1&amp;1\\end{pmatrix}\\), \\(i&gt;j\\), \\(a_{ij}=0\\), which is Lower.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#13-matrix-transpose","title":"1.3: Matrix Transpose","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-transpose-means-swap","title":"(1): Transpose means  swap","text":"<p>\\(\\begin{pmatrix}a&amp;b&amp;c \\\\ d&amp;e&amp;f\\\\ g&amp;h&amp;i \\end{pmatrix}^T=\\begin{pmatrix}a&amp;d&amp;g\\\\ b&amp;e&amp;h\\\\ c&amp;f&amp;i \\end{pmatrix}\\)</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-the-transpose-of-transposed-matrix","title":"(2): The Transpose of transposed matrix","text":"<p>\\([A^T]^T=T\\)</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-matrices-algebra","title":"1.2: Matrices Algebra","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#scalar-multiply","title":"Scalar multiply","text":"<ul> <li>(1): Do the calculation directly. </li> <li>(2): Only same-size matrix can do</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#matrix-multiplication","title":"Matrix Multiplication","text":"<ul> <li>Example: \\(A=\\begin{pmatrix}m&amp;p\\\\n&amp;q\\end{pmatrix},\\quad B=\\begin{pmatrix}a&amp;c\\\\b&amp;d\\end{pmatrix}\\)</li> <li>\\(AB=\\begin{pmatrix}m&amp;p\\\\n&amp;q\\end{pmatrix}.\\begin{pmatrix}a&amp;c\\\\b&amp;d\\end{pmatrix}=\\begin{pmatrix}am+bp&amp;cm+dp\\\\an+bq&amp;cn+dq\\end{pmatrix}\\)</li> <li>Notes that \\(A.B\\not ={B.A}\\) (mostly)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#13-identity-matrix","title":"1.3: Identity Matrix","text":"<ul> <li>Example: \\(\\begin{pmatrix}1&amp;2\\\\0&amp;1\\end{pmatrix}\\)</li> <li>The 'I' could be 'N x N' matrix</li> <li>\\(I.A=A=A.I\\), whilst I is different </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#14-the-properties-rules-of-matrices","title":"1.4: The properties &amp; rules of matrices","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-equality","title":"(1): Equality","text":"<p>All the elements are same, \\(a_{ij}=b_{ij}\\) means '='.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-properties-of-transpose","title":"(2): Properties of Transpose","text":"<p>\\((A+B)^T=A^T+B^T\\), \\((A^T)^T=A\\)</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#15-simultaneous-equations-matrices","title":"1.5: Simultaneous equations &amp; Matrices","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#transfer-the-matrix-and-simultaneous-equations","title":"Transfer the Matrix and Simultaneous equations","text":"<ul> <li>Original equations: \\(\\begin{aligned} 2x-3y=4 \\\\-x+2y=1\\end{aligned}\\)</li> </ul> <ul> <li>Matrix form: \\(\\begin{pmatrix}2&amp;-3\\\\-1&amp;2\\end{pmatrix} . \\begin{pmatrix} x \\\\ y\\end{pmatrix}=\\begin{pmatrix} 4 \\\\ 1\\end{pmatrix}\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-determinant","title":"(1): Determinant","text":"<ul> <li>If the matrix \\(A=\\begin{pmatrix}a&amp;b\\\\c&amp;d\\end{pmatrix}\\), written \\(\\det A \\left| \\begin{array}{cccc}a&amp;b\\\\ c&amp;d  \\end{array} \\right |=ad-bc\\)</li> <li>If \\(\\det A=0\\), the matrix is singular.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-inverse-of-a-matrix","title":"(2): Inverse of a matrix","text":"<ul> <li>To solve the equation \\(\\vec{A}X=\\vec{b}\\), according to \\(A.I=I.A\\), \\(X=A^{-1}\\vec{b}\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#16-solve-the-simulations-equation-by-gausss-elimination","title":"1.6: Solve the simulations equation by Gauss's Elimination","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-elementary-row-operations-ero","title":"(1): Elementary Row Operations (ERO)","text":"<ul> <li>Firstly, change it to extended matrix form: \\(\\left[\\begin{array}{lcr|r} 1 &amp; -3 &amp; 1 &amp; 1 \\\\ 2 &amp; 5 &amp; 3 &amp;24 \\\\ -1 &amp; 2 &amp; 1 &amp;1 \\end{array}\\right]\\).</li> <li>Use 'add','minus','multiply' and 'divide' to change the left matrix into a upper-triangular matrix.</li> <li>Follow the rule of 'from up to down' and 'from left to right', i.e '2'\\(\\rightarrow\\)'-1'\\(\\rightarrow\\)'2'.</li> <li>Finally got \\(\\left[\\begin{array}{lcr|r}1&amp;-3&amp;1&amp;-9\\\\ 0&amp;1&amp;2&amp;-8 \\\\ 0&amp;0&amp;23&amp;-46\\end{array}\\right]\\), the solution can be solved easily.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-finding-inverse-matrix-by-eros","title":"(2): Finding inverse matrix by EROs","text":"<ul> <li>For Example, \\(A=\\begin{pmatrix}2&amp;3\\\\-1&amp;4\\end{pmatrix}\\).</li> <li>Change \\(A\\) and \\(I\\) to extended matrix form, \\((A|I)=\\left[\\begin{array}{lcr|r}2&amp;3&amp;1&amp;0 \\\\ -1&amp;4&amp;0&amp;1 \\end{array}\\right]\\).</li> <li>Using EROs changing left-side to \\(I\\), the right will be \\(A^{-1}\\), \\(\\left[\\begin{array}{lcr|r} 1&amp;0&amp;4/11&amp;-3/11 \\\\ 0&amp;1&amp;1/11&amp;2/11\\end{array}\\right]\\).</li> <li>To find the inverse matrix of 2x2 matrix,if \\(A=\\begin{pmatrix}a&amp;b \\\\ c&amp;d\\end{pmatrix}\\), \\(A^{-1}=\\frac{1}{|A|}\\times A^{*}=\\frac{1}{\\det A}\\times \\begin{pmatrix}d&amp;-b\\\\-c&amp;a\\end{pmatrix}\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-determinant-of-3x3-matrix","title":"(3): Determinant of 3x3 matrix","text":"<ul> <li>For Example, \\(\\left | \\begin{array}{cccc}2&amp;3&amp;-1 \\\\ 4&amp;1&amp;2 \\\\ -1&amp;0&amp;3\\end{array} \\right |=2\\left | \\begin{array}{cccc}1&amp;2 \\\\ 0&amp;3 \\end{array} \\right |-(3)\\left |\\begin{array}{cccc}4&amp;2 \\\\ -1&amp;3 \\end{array} \\right |+(-1)\\left | \\begin{array}{cccc} 4&amp;1 \\\\ -1&amp;0 \\end{array} \\right |=-37\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#17-simultaneous-equations-matrix-inversion-extension","title":"* 1.7: Simultaneous Equations &amp; Matrix Inversion Extension","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#revisions","title":"Revisions","text":"<ul> <li>For the matrix generate from the simultaneous equations:</li> </ul> \\[ \\left[\\begin{array}{cccc} a_{11} &amp; a_{12} &amp; \\cdots &amp; a_{1N} \\\\ a_{21} &amp; a_{21} &amp; \\cdots &amp; a_{2N} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\\\ a_{N1} &amp; a_{N2} &amp; \\cdots &amp; a_{NN} \\end{array}\\right] \\left[\\begin{array}{cccc} x_1 \\\\ x_2 \\\\ \\vdots \\\\ x_N \\end{array}\\right]=\\left[\\begin{array}{cccc} b_1 \\\\ b_2 \\\\ \\vdots \\\\ b_N \\end{array}\\right] \\] <ul> <li>The matrix can be put in the form \\(AX=B\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#cramers-rule","title":"Cramer's Rule","text":"<ul> <li>We can use the rule below to solve simultaneous equations:</li> </ul> \\[ \\begin{aligned} x_1 &amp;= \\frac{\\Delta _1}{\\Delta} \\\\ x_2 &amp;= \\frac{\\Delta _2}{\\Delta} \\\\ &amp;\\vdots \\\\ x_n &amp;= \\frac{\\Delta_n}{\\Delta} \\end{aligned} \\] <ul> <li>Where the \\(\\Delta\\) can be expressed as :</li> </ul> <p>\\(\\Delta = \\left|\\begin{array}{cccc} a_{11} &amp; a_{12} &amp; \\cdots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\cdots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ a_{n1} &amp; a_{n2} &amp; \\cdots &amp; a_{nn}  \\end{array}\\right|\\), \\(\\Delta _1=\\left|\\begin{array} {cccc} b_1 &amp; a_{12} &amp; \\cdots &amp; a_{1n} \\\\ b_2 &amp; a_{22} &amp; \\cdots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ b_n &amp; a_{n2} &amp; \\cdots &amp; a_{nn} \\\\ \\end{array}\\right|\\)</p> <p>\\(\\Delta _2=\\left|\\begin{array} {cccc} a_{11} &amp; b_1 &amp; \\cdots &amp; a_{1n} \\\\ a_{21} &amp; b_2 &amp; \\cdots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ a_{n1} &amp; a_{n2} &amp; \\cdots &amp; a_{nn} \\\\ \\end{array}\\right|\\).</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#the-general-methods-to-find-determinants","title":"The General Methods to find Determinants","text":"<ul> <li>For example, the Determinant such as:</li> </ul> \\[ \\begin{aligned} \\Delta &amp; = \\left |\\begin{array} {cccc} a_{11} &amp; a_{12} &amp; a_{12} &amp; \\cdots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; a_{23} &amp; \\cdots &amp; a_{2n} \\\\ a_{31} &amp; a_{32} &amp; a_{33} &amp; \\cdots &amp; a_{3n} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ a_{n1} &amp; a_{n2} &amp; a_{n3} &amp; \\cdots &amp; a_{nn} \\end{array}\\right|  \\\\ &amp; = a_{11}M_{11}-a_{21}M_{21}+a_{13}M_{13}+\\cdots + (-1)^{1+n}a_{1n}M_{1n} \\end{aligned} \\] <ul> <li>Where the minor \\(M_{ij}\\) is an (n-1) \\(\\times\\) (n-1) determinant , which is pointed diagonally by the elements in the first row.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#an-alternative-method-to-obtain-the-3-x-3-matrix","title":"An Alternative method to obtain the 3 x 3 matrix","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#matrix-inversion","title":"Matrix Inversion","text":"<ul> <li>If we mark \\(I\\) is an identity matrix, \\(A^{-1}\\) is given by: \\(A^{-1}=\\frac{adj A}{\\det A}\\)</li> <li>The 'adj' means the adjoint matrix of \\(A\\), which can be expressed as the transpose of the cofactors of \\(A\\). </li> <li>For the matrix \\(A\\):</li> </ul> \\[ A=\\left [\\begin{array} {cccc} a_{11} &amp; a_{12} &amp; a_{12} &amp; \\cdots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; a_{23} &amp; \\cdots &amp; a_{2n} \\\\ a_{31} &amp; a_{32} &amp; a_{33} &amp; \\cdots &amp; a_{3n} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ a_{n1} &amp; a_{n2} &amp; a_{n3} &amp; \\cdots &amp; a_{nn} \\end{array}\\right] \\] <ul> <li>The cofactors of \\(A\\) are defined as:</li> </ul> <p>\\(C=cof(A)=\\left [\\begin{array} {cccc} c_{11} &amp; c_{12} &amp; c_{12} &amp; \\cdots &amp; c_{1n} \\\\ c_{21} &amp; c_{22} &amp; c_{23} &amp; \\cdots &amp; c_{2n} \\\\ c_{31} &amp; c_{32} &amp; c_{33} &amp; \\cdots &amp; c_{3n} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ c_{n1} &amp; c_{n2} &amp; c_{n3} &amp; \\cdots &amp; c_{nn} \\end{array}\\right]\\)</p> <ul> <li>The cofactor \\(c_{ij}\\) is the product of \\((-1)^{i+j}\\) and the determinant of the (n-1) x (n-1) matrix which obtained by deleting the \\(i\\)th row and \\(j\\)th column from \\(A\\), such as \\(c_{11}\\):</li> </ul> \\[ c_{11}=(-1)^2\\left |\\begin{array} {cccc} a_{11} &amp; a_{12} &amp; a_{12} &amp; \\cdots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; a_{23} &amp; \\cdots &amp; a_{2n} \\\\ a_{31} &amp; a_{32} &amp; a_{33} &amp; \\cdots &amp; a_{3n} \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\cdots &amp; \\vdots \\\\ a_{n1} &amp; a_{n2} &amp; a_{n3} &amp; \\cdots &amp; a_{nn} \\end{array}\\right| \\] <ul> <li>Then we can find adj(A)= \\(C^T\\). So:</li> </ul> \\[ A^{-1}=\\frac{C^T}{|A|} \\]"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-vectors","title":"2: Vectors","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#21-definition","title":"2.1: Definition","text":"<ul> <li>Cartesian form in right-hand set are (2,3,1) or \\(2\\vec{i}+3\\vec{j}+\\vec{k}\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#22-scalar-product-dot-product","title":"2.2: Scalar Product (Dot product)","text":"<ul> <li>Example: \\(W=\\vec{F}.\\cos\\theta\\vec{d}=|\\vec{F}||\\vec{d}|\\cos\\theta\\), the result is a scalar.</li> <li>\\(\\vec{i}.\\vec{j}=0\\), two vectors are perpendicular.</li> <li>\\(\\cos\\theta=\\frac{\\vec{a}.\\vec{b}}{|\\vec{a}||\\vec{b}|}\\)</li> <li>Unit vectors: \\(\\hat{a}=\\frac{\\vec{a}}{|a|}\\).</li> <li>Component in one direction: \\(|\\vec{F_1}|=\\vec{F}.\\hat{a}\\), \\(\\vec{F_1}=(\\vec{F}.\\hat{a})\\hat{a}\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#23-vector-product-cross-product","title":"2.3: Vector Product (Cross Product)","text":"<ul> <li>In 2D, \\(\\vec{M}=|\\vec{d}||\\vec{F}|\\sin\\theta\\)</li> <li>In 3D, \\(\\vec{M}=\\vec{d}\\times\\vec{F}=|\\vec{d}||\\vec{F}|\\sin\\theta\\hat{n}\\)</li> <li>Corkscrew rule can justify the direction.</li> <li>\\(\\vec{m}\\times \\vec{n}=\\left|\\begin{array}{cccc}\\vec{i}&amp;\\vec{j}&amp;\\vec{k}\\\\ a&amp;b&amp;c \\\\ d&amp;e&amp;f\\end{array} \\right |=(ae-bd)-(af-dc)+(ae-bd)\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#ii-complex-numbers","title":"II: Complex numbers","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-basic-concepts","title":"1: Basic Concepts","text":"<ul> <li>\\(i^2=-1\\), use 'j' in electrical engineering</li> <li>The coefficient of real number is the real part, the one of imaginary number is the imaginary part.</li> <li>If \\(z=a+bi\\), \\(\\bar{z}=a-bi\\), which is called complex conjugate.</li> <li>\\(|z|=|a+bi|=\\sqrt{a^2+b^2}\\), which is the modulus of \\(z\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-argument","title":"2: Argument","text":"<ul> <li>\\(\\arg(z_1)+\\arg(z_2)=\\arg(z_1z_2)\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-exponential-form-and-applications","title":"3: Exponential form and applications","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-exponential-form-polar-form","title":"(1): Exponential Form / Polar Form","text":"<ul> <li>\\(z=x+yi=re^{i\\theta}\\),  \\(\\theta=\\arg(z)\\), \\(r=|z|\\) </li> <li> Euler's Identity: \\(e^{i\\pi}=-1\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-sinecosine-form","title":"(2): Sine/cosine form","text":"<ul> <li>\\(\\cos\\theta +i\\sin\\theta =e^{i\\theta}\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-complex-roots-of-equations","title":"(3): Complex roots of equations","text":"<ul> <li>Try '0','\\(\\pm 1\\)' and '\\(\\pm 2\\)' to find a real root.</li> <li>Use long division find the roots of the quadratic equation.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#iii-ordinary-differential-equations-1","title":"III: Ordinary Differential Equations 1","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-first-order-differential-equations","title":"1: First order differential equations","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-definition","title":"(1): Definition","text":"<ul> <li>The equation relates an unknown function \\(T(t)\\) and its derivatives.</li> <li>The equation only have a first derivative called first-order diff-equation.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-the-solutions","title":"(2): The solutions","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#using-trial-solution","title":"Using trial solution","text":"<ul> <li>The equation like \\(\\frac{dy}{dx}=Ay\\), \\(A\\) is a constant can be solved using \\(y=e^{mx}\\),(\\(m\\) is unknown).</li> <li>For example, \\(\\frac{dp}{dt}=2.5p\\), let \\(P=e^{mt}\\), \\(m=2.5\\), so solution is \\(P=Ae^{2.5t}\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#separating-variables","title":"Separating variables","text":"<ul> <li>If the ODE can be written as \\(\\frac{dy}{dx} =y(x)g(y)\\), it can be solved with separating variables.</li> <li>For example:</li> </ul> \\[   \\begin{aligned}   \\frac{dy}{dx}&amp;=3y \\\\   \\frac{1}{y}.\\frac{dy}{dx}&amp;=3 \\\\   \\int \\frac{1}{y}\\frac{dy}{dx}{\\rm d}x&amp;=\\int 3{\\rm d}x \\\\   \\ln{y}&amp;=3x+C \\\\   y&amp;=Ae^{3x}+B   \\end{aligned} \\]"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2second-order-differential-equations","title":"2.Second- order differential equations","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#21-mechanical-system-with-spring-and-damping","title":"2.1 Mechanical System with spring and damping","text":"<p>$$ \\frac{md^2y}{dt^2}=-ky-C\\frac{dy}{dt} $$ $$ i.e.ma=-F_{restoring}-F_{damp} $$ It show the relationship between the y and t in the damping system.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#211-another-physical-example-an-electrical-circuit","title":"2.1.1 Another physical example-an electrical circuit","text":"<p>In a circuit with R,L and C,we can find the voltage relationship: $$ IR+L\\frac{dI}{dt}+\\frac{Q}{C}=V(t) $$ $$ R\\frac{dQ}{dT}+L\\frac{d^2Q}{dt^2}+\\frac{Q}{C}=0 $$ This a second order differential equation.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#22","title":"2.2","text":"<p>Solve the equation</p> <p>$$ \\frac{d^2y}{dx^2}+3\\frac{dy}{dt}+2y=0 $$ First, use the \\(y=e^{mt}\\) as a trial solution.</p> <p>$$ m^2e^{mt}+3me^{mt}+2e^{mt}=0 $$ $$ (m+1)(m+2)=0 $$ $$ m=-1 $$ $$ m=-2 $$ So we have two solutions.</p> <p>In fact, the GS is  $$ y=Ae^{-t}+Be^{-2t} $$ While A, B are the constants.(when A or B=0,ensure containing all the answer)</p> <p>Then we can use the  $$ y(0)=1 $$ $$ \\frac{dy}{dt}(0)=0 $$ Then we can find the A=2,B=-1. So the P.S is $$ y=2e^{-t}e^{-2t} $$</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#23-quadraticrepeated-roots-the-same","title":"2.3 Quadratic(repeated) roots the same","text":"<p>$$ \\frac{d^2y}{dt^2}-2\\frac{dy}{dt}+y=0 $$ This gives only one solution: \\(y_1=Ae^{-t}\\)</p> <p>This case is called the critical damping. However, all second-order d.e.s have two independent solutions.</p> <p>The other one is  $$ y_2=Bte^{-t} $$ So the GS is $$ y=(A+Bt)e^{-t} $$</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#24-example-of-simple-harmonic-motion","title":"2.4 Example of simple harmonic motion","text":"<p>If we choose the simplest case of no damping (R=0), we can find this equations: $$ \\frac{d^2Q}{dt^2}=-\\frac{Q}{LC} $$ This is the simple harmonic motion.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#241","title":"2.4.1","text":"<p>Oscillations- complex roots of the auxiliary equations $$ \\frac{d^2y}{dt^2}+2\\frac{dy}{dt}+2y=0 $$</p> <p>Try \\(y=e^{mt}\\)</p> <p>We can find that m=\\(-1\\pm i\\)</p> <p>So the GS is  $$ y=Ce^{(-1+i)t}+De^{(-1-i)t} $$ Next, we use the result: $$ e^{i\\theta}=cos\\theta+isin\\theta $$ $$ y=e^{-t}[Acos\\theta+Bsin\\theta] $$ We use the final real number to do solve the physical problems.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#26-general-solution-for-the-oscillation-equations","title":"2.6 General Solution for the oscillation equations","text":"<p>If we find \\(m=\\pm Ci+D\\); the GS for real number is: $$ y=e^{Dx}[Acos(Cx)+Bsin(Cx)] $$</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#iv-functions-and-curves","title":"IV: Functions and Curves","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-functions-general-ideas","title":"1: Functions- general ideas","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#11-what-is-a-function","title":"1.1 What is a function","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-combining-of-functions","title":"1.2 Combining of functions","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#13-domain-and-range","title":"1.3 Domain and Range","text":"<ul> <li>Domain is all the possible input values.</li> <li>Range is all the possible output values.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#14-inverse-functions","title":"1.4 Inverse Functions","text":"<ul> <li>We use \\(f^{-1}\\) to mean inverse.</li> <li>Examples:</li> <li>If \\(f(x)=1-2x\\), we write \\(f=1-2x\\)</li> <li>And we can write it as a function of x :\\(f=1-2x\\) \\(x=\\displaystyle\\frac{1-f}{2}\\)</li> <li>\\(f^{-1}(x)=\\displaystyle\\frac{1-x}{2}\\)</li> <li>The graph of the functions and its inverse are reflections of each other in the line \\(y=x\\).</li> <li>Domain of \\(f(x)\\) is equal to the Range of \\(f^{-1}\\) and vice versa.</li> <li>Other important functions and their inverses:</li> <li>\\(e^x\\) and \\(\\ln{x}\\)</li> <li>\\(\\sin x\\) and \\(sin^{-1} x\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-exponential-and-logarithmic-functions","title":"2: Exponential and Logarithmic functions","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#21-exponential-function","title":"2.1 Exponential function","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#211-the-application-of-expx","title":"2.1.1 The application of exp(x)","text":"<ul> <li>\\(e^{-x}\\)-the exponential decay</li> <li>\\(e^{-x^2}\\)-the normal distribution</li> <li>\\(xe^{-x}\\)-the Poisson distribution</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#212-the-hyperbolic-cosine-and-hyperbolic-sine","title":"2.1.2 The hyperbolic cosine and hyperbolic sine","text":"<ul> <li>\\(\\cosh x=\\displaystyle\\frac{(e^x+e^{-x})}{2}=\\displaystyle\\frac{e^{ix}+e^{-ix}}{2}\\)</li> <li>\\(\\sinh x=\\displaystyle\\frac{(e^x-e^{-x})}{2}=\\displaystyle\\frac{e^{ix}-e^{-ix}}{2i}\\)</li> <li>\\((\\cosh x)^2-(\\sinh x)^2=1\\) $$   \\displaystyle\\frac{d}{dx}\\cosh x=\\sinh x $$</li> </ul> \\[   \\displaystyle\\frac{d}{dx}\\sinh x=\\cosh x \\] <ul> <li>\\(\\cosh (ix)= \\cos(x)\\)</li> <li>\\(\\sinh (ix)= i\\sin(x)\\)</li> <li>\\(\\sin (x)=-i\\sin(ix)\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#22-logarithm-and-powers","title":"2.2 Logarithm and powers","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-sine-and-cosine-functions","title":"3: Sine and Cosine functions","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#31-combination-of-sine-and-cosine-functions","title":"3.1 Combination of sine and cosine functions","text":"<p>The combination of the sine and cosine produce more complicated shapes, such as Fourier Series.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#4-transformation","title":"4: Transformation","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#41-translation-and-magnifications","title":"4.1 Translation and Magnifications","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#42-plotting-a-quadratic-graph","title":"4.2 Plotting a quadratic graph","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#44-oddeven-and-periodic-functions","title":"4.4 Odd,even and periodic functions","text":"<ul> <li>Even function:\\(f(-x)=f(-x)\\) </li> <li>Odd function:\\(f(-x)=-f(-x)\\)</li> <li>Periodic function: like \\(\\sin x\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#5-curve-sketching","title":"5: Curve sketching","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#51-aims-and-strategy","title":"5.1 Aims and strategy","text":"<ul> <li>Cross or touch the axes.</li> <li>Max, min and inflection points</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#52-stationary-points-first-derivation","title":"5.2 Stationary points- First derivation","text":"<p>Using the first derivation to find the gradient each side.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#53-stationary-points-secondary-derivation","title":"5.3 Stationary points- Secondary derivation","text":"<ul> <li>The inflection points means if \\(y''=0\\) at this point and \\(y''\\) have different signs in double sides.</li> <li>The gradient of the function reach a max or min at the infection points.</li> <li>It is useful only if the \\(\\displaystyle\\frac{dy}{dx}\\not ={0}\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#6-asymptotes-and-rational-functions","title":"6: Asymptotes and Rational Functions","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#61-definitions","title":"6.1 Definitions","text":"<ul> <li>The function that is a quotient of two polynomial functions</li> <li>As the denominator of the fraction takes the value zero, the function becomes infinite, we get a vertical line called vertical asymptote. The function may have horizontal , sloping and vertical asymptote.</li> <li>Theses lines may cross.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#62-rewriting-the-functions-by-long-division","title":"6.2 Rewriting the functions by long division","text":"<ul> <li>This is a way to separate the function to make to curves graphing easier.</li> <li>Examples:</li> <li>\\(\\displaystyle\\frac{x^2}{x+1}=\\displaystyle\\frac{(x-1)(x+1)+1}{x+1}=x-1+\\displaystyle\\frac{1}{x+1}\\) \\(\\quad\\)</li> <li>\\(\\displaystyle\\frac{x+1}{x-3}=\\displaystyle\\frac{(x-3)+5}{x-3}=1+\\displaystyle\\frac{5}{x-3}\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#7-curve-sketching-examples","title":"7: Curve Sketching Examples","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#71-example-1","title":"7.1: Example 1","text":"\\[   y=\\displaystyle\\frac{2x+1}{(x-1)(x+2)} \\] <ul> <li>Finding the roots of the denominator, which is the vertical asymptotes.</li> <li>Finding the monotony of each parts of the function.</li> <li>Finding the infinite of the function.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#72-example-2","title":"7.2: Example 2","text":"\\[   y=\\displaystyle\\frac{x^3-2x^2+x-2}{1-x^2} \\] <ul> <li> <p>Separating the factors as \\((x-2)(x^2+1)\\).</p> </li> <li> <p>Following the example 1 to get the vertical asymptotes and the monopoly.</p> </li> <li> <p>Using the long division to separate the constant to find the slope asymptotes:</p> </li> </ul> <p>$$  y=\\displaystyle\\frac{(1-x^2)(2-x)+2x-4}{1-x^2} $$ i.e.: $$ y=-x+2+\\displaystyle\\frac{2x-4}{1-x^2} $$ As the last part of the term is really small, the slope asymptote is the \\(y=-x+2\\).</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#73-example-3-modulus-function","title":"7.3: Example 3 (modulus function)","text":"<ul> <li>\\(y=|x+3|+|x-1|\\)</li> <li>The graph can be drawn by apart the functions.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#vi-fourier-series","title":"VI: Fourier Series","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-periodic-functions-and-fourier-series-representation","title":"1: Periodic functions and Fourier Series representation","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#11-periodic-functions","title":"1.1 Periodic Functions","text":"<ul> <li>The pattern that repeat themselves in the period of \\(t\\) or \\(x\\).</li> <li>These functions can be interpreted as a sum of sine and/or cosine, i.e the sum of the frequencies.</li> <li>The mix of the frequencies makes the voice and the sound.</li> <li>The combining of sine and cosine components is called Fourier synthesis.</li> <li>Breaking down the function into components is called Fourier Analysis.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-representing-a-function-using-harmonic-functions","title":"1.2 Representing a function using harmonic functions","text":"<ul> <li>The most of the function we considered have the period of \\(2\\pi\\).</li> <li>Let: $$ f(t)=C+a_1\\cos(t)+a_2\\cos(2t)+.....+b_1sin(t)+b_2\\sin(2t)... $$ $$ i.e: f(t)=\\displaystyle\\frac{a_0}{2}+\\sum_{n=1}^{\\infty}[a_n\\cos(nt)+b_n\\sin(nt)] $$</li> <li>The term C represent the mean value of the function (DC component in oscillation)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#13-finding-the-coefficient","title":"1.3 Finding the coefficient","text":"<ul> <li>To find the coefficient term, we calculated the mean value of \\(f(t)\\), i.e.\\(C=\\displaystyle\\frac{a_0}{2}=\\displaystyle\\frac{1}{2\\pi}\\int_{-\\pi}^{\\pi}f(t)dt\\)</li> <li>The way to solve the components is to multiply \\(\\cos(t)\\) in both sides of the \\(f(t)\\).</li> <li>Then integrate both sides in \\([-\\pi ,\\pi]\\).</li> <li>Cause the integration of \\(\\cos(t)\\) in the range \\([-\\pi , \\pi]\\) =0.</li> <li>So we can find that: \\(a_1=\\displaystyle\\frac{1}{2\\pi}\\int_{-\\pi}^{\\pi}f(t)\\cos(t)dt\\)</li> <li>It is clear that we can find the related component by multiply the related cos or sin.</li> <li>The final solutions: $$  \\displaystyle\\frac{a_0}{2}=\\displaystyle\\frac{1}{2\\pi}\\int_{-\\pi}^{\\pi}f(t)dt $$</li> </ul> \\[ a_n=\\displaystyle\\frac{1}{\\pi}\\int_{-\\pi}^{\\pi}f(t)\\cos(nt)dt \\] \\[ b_n=\\displaystyle\\frac{1}{\\pi} \\]"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#14-examples","title":"1.4 Examples","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#141-the-square-wave","title":"1.4.1 The square wave","text":"<ul> <li>\\(f(t)=-2\\) if \\(-\\pi \\leq t&lt;0\\)</li> <li>\\(f(t)=2\\) if \\(0\\leq t\\leq \\pi\\)</li> <li>This a odd function, so we need sine only.(\\(a_n=0\\))</li> <li>\\(b_n=\\displaystyle\\frac{1}{\\pi}\\int^{\\pi}_{-\\pi}f(t)\\sin(nt)dt\\)</li> <li>\\(b_n=\\displaystyle\\frac{8}{n\\pi}\\) if n is odd or =0 if n is even.</li> <li>\\(f(x)=\\displaystyle\\frac{8}{\\pi}\\sum_{m=1}^{\\infty}\\displaystyle\\frac{1}{(2m-1)}\\sin(2m-1)t\\)</li> <li>We look at the partial sum and the discontinuity of this function.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#142-quadratic-function","title":"1.4.2 Quadratic Function","text":"<ul> <li>\\(f(t)=t^2\\) on the interval \\([-\\pi,\\pi]\\) </li> <li>\\(f(t)\\) is a even, so only cosines are needed, and \\(b_n=0\\)</li> <li> \\[ \\displaystyle\\frac{a_0}{2}=\\displaystyle\\frac{1}{2\\pi}\\int_{-\\pi}^{\\pi}t^2 dt=\\displaystyle\\frac{\\pi ^2}{3} \\] </li> <li>\\(a_n=\\displaystyle\\frac{1}{\\pi}\\int_{-\\pi}^{\\pi}t^2\\cos(nt)dt=\\displaystyle\\frac{4}{n^2}(-1)^n\\)</li> <li>So the final form of the Fourier Series is: $$ f(x)=\\displaystyle\\frac{\\pi ^2}{3}+4\\sum_{n=1}^{\\infty}\\displaystyle\\frac{(-1)^n}{n^2} $$</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2complex-form-of-the-fourier-series","title":"2:Complex form of the Fourier Series","text":"<ul> <li>We can combine the cosine and sine to a complex form:\\(c_n=a_n+ib_n\\)</li> <li>\\(f(x)=\\sum_{-\\infty}^{\\infty}c_ne^{-inx}\\)</li> <li>\\(c_n=\\displaystyle\\frac{1}{2\\pi}\\int^{\\pi}_{-\\pi}f(x)e^{inx}dx\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-other-forms-of-fourier-series","title":"3: Other forms of Fourier Series","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#31-general-interval","title":"3.1 General interval","text":"<ul> <li>If we use a general interval in \\([a,b]\\), the series takes this form:<ul> <li>\\(f(t)=\\displaystyle\\frac{a_0}{2}+\\sum_{n=1}^{\\infty}a_n\\cos(\\displaystyle\\frac{2\\pi nt}{b-a}+b_n\\sin(\\displaystyle\\frac{2\\pi nt }{b-a})\\)</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#32-half-range-series","title":"3.2: Half-range series","text":"<ul> <li>\\(f(t)=\\sum a_n\\cos(nt/2)\\)</li> <li>\\(f(t)=\\sum b_n\\sin(nt/2)\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#33-discrete-data","title":"3.3 Discrete data","text":"<p>If the function we wish to analyse is discrete points instead of the algebraic function,the numerical integration is needed,while the limited data will come out spurious result.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#vii-partial-differentiation","title":"VII: Partial Differentiation","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-concept-and-first-derivative","title":"1: Concept and first Derivative","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#11-the-concept","title":"1.1 The concept","text":"<ul> <li>Many quantities are functions of more than one varieties.</li> <li>Partial differentiation means finding the gradient as we change one variable whilst others fixed.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-examples","title":"1.2 Examples","text":"<ul> <li>\\(h=yx^2\\) (\\(y,x\\) both variables): as we move in the \\(x\\) direction, we can find \\(\\frac{\\partial h}{\\partial x}=2yx\\) or \\(\\frac{\\partial h}{\\partial x})_y=2yx\\), we can say this:\"partial dh by dx\".</li> <li>We also need use the chains rules and product or quotient rules to find the answers.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-second-derivative","title":"2: Second derivative","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#21-definition_1","title":"2.1 Definition","text":"<ul> <li>The ways to produce a second derivative.</li> <li>\\(\\frac{\\partial^2 z }{\\partial x^2 }=\\frac{\\partial }{\\partial x}(\\frac{\\partial z}{\\partial x})\\)</li> <li>\\(\\frac{\\partial^2 z }{\\partial x \\partial y }=\\frac{\\partial }{\\partial x}(\\frac{\\partial z}{\\partial y})=\\frac{\\partial }{\\partial y}(\\frac{\\partial z}{\\partial x})\\)(The order doesn't matter)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#22-stationary-points","title":"2.2 Stationary points","text":"<ul> <li> <p>There is a variety of behavior of such functions called saddle points and local max or min points. </p> </li> <li> <p>At a stationary point, all first derivation are 0: \\(\\frac{\\partial f}{\\partial x}=0\\) and \\(\\frac{\\partial f}{\\partial y}=0\\).</p> </li> <li>What's more, we need all second derivatives.(The mixed derivation needed to ensure a correct conclusion).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-small-increments","title":"3: Small increments:","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#31-one-variable","title":"3.1 One variable","text":"<ul> <li>We can use the current slope to estimate the increment of y if the x is fairly small.</li> <li>This could also be used as a basis of Newton-Raphson Method and the derivation of engineering theories.</li> <li>For example, the change in height \\(\\approx\\) distance \\(\\times\\) slope, hence : $$ \\delta \\approx \\displaystyle\\frac{dy}{dx}\\delta x  $$</li> <li>Example:</li> <li>If the radius of the sphere increases from 0.2m to 0.21m, estimate the change in volume.(Just as an example): \\(V=\\displaystyle\\frac{4}{3}\\pi r^3\\), \\(\\delta\\approx\\displaystyle\\frac{dV}{dr}\\delta r=4\\pi r^2\\delta r=0.0016\\pi\\), note that the surface area gives the rate of change of volume as the radius increases.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#32-multiple-variables","title":"3.2 Multiple variables","text":"<ul> <li>For multiple variables,the approach is the same, but with increments resulting from changes in any or all of the variables: $$ \\delta z\\approx\\displaystyle\\frac{\\partial f}{\\partial x}\\delta x+ \\displaystyle\\frac{\\partial f}{\\partial y}\\delta y $$</li> <li>Example:</li> <li>Estimate the percentage change in volume of a circular cylinder if the length increase in 2% and the radius decreases by 1%:    $$    V=\\pi r^2L, \\delta \\approx\\frac{\\partial V}{\\partial r}\\delta r+\\frac{\\partial V}{\\partial L}\\delta L=2\\pi rL\\delta r+\\pi r^2\\delta L    $$    $$    \\displaystyle\\frac{\\delta V}{V}\\times 100\\approx 2 \\displaystyle\\frac{\\delta r}{r}\\times 100+ \\displaystyle\\frac{\\delta L }{L}\\times 100    $$</li> <li>Thus the volume is approximately constant if the ratio of the lengthening to thinning is 0.5.</li> <li>This ratio is called Poisson's ratio(\\(\\nu\\)) in stress analysis, and it is usually less than 0.5.</li> <li>Example 2:</li> <li>The Reynolds Number of a fluid flow combines information about the dimensions, speeds and viscosity to characterise the nature of the flow -laminar, turbulent,etc. It is a dimensionless number(no units).If \\(U\\) is typical velocity, \\(L\\) is a typical dimension, and \\(\\nu\\) is the kinematic viscosity , the we define:    $$    Re=\\displaystyle\\frac{UL}{\\nu}    $$    If \\(L\\) is decreased by 5%, \\(U\\) increased by 3%, and \\(\\nu\\) decreased by 4%, estimate the change in \\(Re\\).</li> <li>Same as above,     $$    \\displaystyle\\frac{\\delta Re}{Re}\\times 100\\approx \\displaystyle\\frac{\\delta U}{U}\\times 100+\\displaystyle\\frac{\\delta L}{L}\\times 100-\\displaystyle\\frac{\\delta\\nu}{\\nu}\\times 100    $$</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#viiiordinary-differential-equations-2","title":"VIII:Ordinary Differential Equations 2","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-ordinary-differential-equationsode","title":"1: Ordinary Differential Equations(ODE)","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#11-second-order-ode","title":"1.1: Second order ODE","text":"<ul> <li>The order means the highest order of the derivation.</li> <li>The ordinary means that it is about derivation instead of partial differential.</li> <li>Such as the Newton's second law: $$ m\\displaystyle\\frac{d^2x}{dt^2}=F $$</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-second-orderlinearhomogeneous-odes","title":"1.2: Second order,linear,homogeneous ODEs","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#121-the-common-format-of-the-second-order-odes","title":"1.2.1 The common format of the second order ODEs","text":"\\[ a\\displaystyle\\frac{d^2y}{dx^2}+b\\displaystyle\\frac{dy}{dx}+cy=0 \\]"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#122-the-solution","title":"1.2.2 The solution","text":"<ul> <li>Let \\(y=e^{mt}\\) as the trial solution, so the equations can be expressed as \\(am^2+bm+c=0\\), and we can find the value of \\(m_1\\) and \\(m_2\\).</li> <li>For three cases:<ul> <li>If \\(m_1\\) =\\(m_2\\), the solution will be: \\(y(t)=Ae^{m_1t}+Be^{m_2t}\\).</li> <li>If \\(m_1\\) = \\(m_2\\), the solution will be : \\(y(t)=Ae^{mt}+Bte^{mt}\\).</li> <li>If \\(m_1\\) or \\(m_2\\) =\\(a+bi\\), the solution will be : \\(y(t)=e^{at}[A\\cos(bt)+B\\sin(bt)]\\)</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#13-forced-inhomogeneous-second-order-linear-odes","title":"1.3: Forced (inhomogeneous), second order, linear ODEs","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#131-the-simple-example","title":"1.3.1: The simple example","text":"<p>$$ a\\displaystyle\\frac{d^2y}{dt^2}+b\\displaystyle\\frac{dy}{dx}+cy=F(t) $$ The \\(F(t)\\) is what we called the forced.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#132-the-composition-of-the-inhomogeneous-equations","title":"1.3.2: The composition of the Inhomogeneous equations","text":"<ul> <li>If the \\(F(t)\\) is equal to 0, which is the free and natural case. This solution is called a complementary function.</li> <li>If the \\(F(t)\\) is not equal to 0, the solution to this will be a combination of CF and a response to the forcing, which is known as PI short for Particular Integration.</li> <li>\\(y_{GS}(t)=y_{CF}(t)+y_{PI}(t)\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#133-the-way-to-find-the-pi","title":"1.3.3: The way to find the PI","text":"<ul> <li>Find the trial solution \\(y(t)\\) for the \\(F(t)\\)<ul> <li>Use constant 'C' to replace the constant in \\(F(x)\\).</li> <li>Keep the constant in the power.</li> <li>Use \\(A\\cos(nx)+B\\sin(nx)\\) for \\(\\cos(nx)\\)</li> </ul> </li> <li>Some examples:<ul> <li>\\(y''+3y'+2y=6\\) for \\(y(t)\\)<ul> <li>Firstly, use \\(y(t)=C\\) as the trial.</li> <li>So \\(y'=0\\) and \\(y''=0\\).</li> <li>Substitute these to the above equations: \\(0+0+2y=6\\)</li> <li>So we can find \\(y(t)=3\\)</li> <li>The CF of this equation can be find by:</li> <li>\\(m^2+3m+2=0\\), \\(m_1=-1\\) and \\(m_2=-2\\).</li> <li>So \\(y_{CF}(t)=Ae^{-2t}+Be^{-t}\\).</li> <li>The \\(y_{GS}(t)=Ae^{-2t}+Be^{-t}+3\\)</li> </ul> </li> <li>\\(y''+5y'+6y=\\displaystyle\\frac{2}{3}e^{-t}\\) and \\(y(0)=0\\),\\(y'(0)=1\\)<ul> <li>We can use \\(Ae^{-t}\\) as the trial</li> <li>So \\(y'=-Ae^{-t}\\) and \\(y''=Ae^{-t}\\).</li> <li>\\(Ae^{-t}-5Ae^{-t}+6Ae^{-t}=\\displaystyle\\frac{2}{3}e^{-t}\\), A=\\(\\displaystyle\\frac{1}{15}\\), \\(y_{PI}=\\displaystyle\\frac{1}{3}e^{-t}\\) </li> <li>\\(m^2+5m+6=0\\) , so \\(m_1\\) = -2 and \\(m_2\\)= -3. The \\(y_{CF}=Ae^{-2t}+Be^{-3t}\\) </li> <li>The  \\(y_{GS}=Ae^{-2t}+Be^{-3t}+\\displaystyle\\frac{1}{15}e^{-t}\\) </li> </ul> </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#14-oscillations-resonance","title":"1.4: Oscillations &amp; Resonance","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#141-resonance","title":"1.4.1: Resonance","text":"<ul> <li>If forcing \u201cmatches\u201d natural/free   behavior of the system we get a \u201cbigger\u201d response - we call this resonance.</li> <li>In maths, the resonance means that the force F(x) will be applied on both CF and PI.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#142-find-the-pi-of-resonance","title":"1.4.2: Find the PI of Resonance","text":"<ul> <li>Resonance is most relevant to oscillatory forcing but the same mathematical idea can be applied on other force.</li> <li>The PI of resonance should be multiply a 't' of the ordinary PI.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#15-first-order-linear-odes","title":"1.5: First order, linear ODEs","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#151-the-standard-form","title":"1.5.1: The Standard form","text":"<p>\\(\\displaystyle\\frac{dy}{dt}+p(t)y=q(t)\\) - \\(p(t)\\) and \\(q(t)\\) are for function of \\(t\\). - The methods to solve the equations including integrating factors, separation of variables and substitution.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#152-integrating-factors","title":"1.5.2: Integrating Factors","text":"<ul> <li>Firstly, the function should be converted to he standard form.</li> <li>\\(\\displaystyle\\frac{dy}{dt}+p(t)y=q(t)\\)</li> <li>The integrating factor is given by \\(u(t)=e^{\\int p(t)dt}\\).</li> <li>Multiply the standard function by \\(u(t)\\), then integrating both sides.</li> <li>\\(y(t)=\\displaystyle\\frac{1}{u(t)}(\\int u(t)q(t)dt + C)\\)</li> <li>Examples:<ul> <li>\\(y'+2y\\sin(2x)=2e^{\\cos(2x)}\\)<ul> <li>\\(u(x)=e^{\\int p(x)dx}\\), for this situation \\(p(x)=2\\sin(2x)\\), \\(u(x)=e^{\\int 2\\sin(2x)dx}=e^{2\\times(-1)\\times0.5\\cos(2x)}=e^{-\\cos(2x)}\\)</li> <li>\\(y(x)=e^{\\cos(2x)}\\int [e^{-\\cos(2x)}\\times2e^{\\cos(2x)}]=e^{\\cos(2x)}(2x+C)\\)</li> </ul> </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#153-methods-of-substitution","title":"1.5.3: Methods of Substitution","text":"<ul> <li>One standard method is to make the substitution of \\(y(t)=tv(t)\\), where the \\(v(t)\\) is a new function.</li> <li>Used in the non-linear 1st ODE, which cannot use the IF (not linear) and separation of  variables (\\(\\displaystyle\\frac{dy}{dx}\\not ={y(x)g(y)}\\)), then use the above methods to solve the equations.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-eigenvalues-systems-of-equations","title":"2: Eigenvalues &amp; Systems of Equations","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#21-motivation","title":"2.1: Motivation","text":"<ul> <li>In many engineering applications, we have to solve systems of coupled differential equations.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#22-linear-geometric-transformations","title":"2.2: Linear Geometric Transformations","text":"<ul> <li>If we treat the matrix \\(A\\) as a kind of transformation which could change the base vectors \\(i\\) and \\(j\\).</li> <li>For some vectors for example \\(\\vec{x}\\), the transformation \\(A\\) may not change the direction of \\(A\\), which means it will stay at the linear space it has extended, but its magnitude may change.</li> <li>In this condition, we may say \\(Ax=\\lambda x\\), which means the transformation \\(A\\) is just as a scalar \\(\\lambda\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#23-finding-the-eigenvalues-and-eigenvectors","title":"2.3: Finding the Eigenvalues and Eigenvectors","text":"<ul> <li>The scalar \\(\\lambda\\) is called the eigenvalue, while the vector \\(x\\) is called the eigenvector.</li> <li>In order to solve \\(Ax=\\lambda x\\), we can change it to \\((A-\\lambda I)x=0\\Rightarrow |A-\\lambda I|=0\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#24systems-of-ode-i","title":"2.4:Systems of ODE I","text":"<ul> <li>For example, \\(\\begin{aligned}m_1y''_1&amp;=-k_1y_1+k_2(y_2-y_1)\\\\ m_2y''_2&amp;=-k_2(y_2-y_1) \\end{aligned}\\)</li> <li> <p>\\(\\begin{pmatrix} \\ddot{y_1} \\\\ \\ddot{y_2}\\end{pmatrix}=\\begin{pmatrix}-\\frac{(k_1+k_2)}{m_1} &amp; \\frac{k_2}{m_1} \\\\ \\frac{k_2}{m_1} &amp; -\\frac{k_2}{m_2} \\end{pmatrix}\\begin{pmatrix}y_1 \\\\ y_2\\end{pmatrix}\\)</p> </li> <li> <p>We can take the oscillation (for the second order) :</p> <ul> <li>\\(y_1=c\\cos(\\omega t-\\alpha _1)\\)</li> <li>\\(\\ddot{y_1}=\\omega ^2 y_1\\)</li> <li>Same for \\(y_2=\\omega ^2 y_2\\)</li> <li>Any oscillation will got same answer.</li> <li>If we treat that \\(2\\times 2\\) matrix as \\(A\\), \\(\\omega ^2 \\begin{pmatrix}y_1\\\\y_2 \\end{pmatrix}=A\\begin{pmatrix}y_1 \\\\y_2\\end{pmatrix}\\)</li> </ul> </li> <li> <p>It is same as the \\(Ax=\\lambda x\\), and the answer of these equations is \\(x\\), which is the eigenvectors.</p> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#25-systems-of-odess-ii","title":"2.5: Systems of ODESs II","text":"<ul> <li>For example, \\(\\begin{aligned}\\displaystyle\\frac{dx}{dt}&amp;=-4x+y \\\\ \\displaystyle\\frac{dy}{dt}&amp;=-5x+2y \\end{aligned}\\)</li> <li> <p>\\(\\displaystyle\\frac{d}{dt}\\begin{pmatrix}x \\\\y \\end{pmatrix}=\\begin{pmatrix} -4 &amp;&amp; 1 \\\\-5 &amp;&amp; 2 \\end{pmatrix}\\begin{pmatrix}x \\\\y \\end{pmatrix}\\)</p> </li> <li> <p>Let \\(\\begin{pmatrix}x \\\\y\\end{pmatrix}=\\begin{pmatrix}x_0 \\\\y_0\\end{pmatrix}e^{\\lambda t}\\)</p> </li> <li>\\(x_0\\) and \\(y_0\\) are constant. </li> <li> <p>Then we get: \\(\\lambda \\begin{pmatrix}x_0 \\\\y_0 \\end{pmatrix}=\\begin{pmatrix}-4 &amp;&amp; 1 \\\\-5 &amp;&amp; 2\\end{pmatrix}\\begin{pmatrix}x_0 \\\\y_0\\end{pmatrix}\\)</p> </li> <li> <p>Use the way of E-value and E-vectors can find the solution.</p> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#solve-by-elimination","title":"Solve by elimination <ul> <li>For example, \\(\\begin{cases}\\dot{x}=-4x+y \\\\ \\dot{y}=-5x+2y\\end{cases}\\)</li> <li>\\(\\begin{aligned}\\ddot{x}&amp;=-4\\dot{x}+\\dot{y} \\\\ &amp;=-4\\dot{x}=5x+2(\\dot{x}+4x)\\end{aligned}\\)</li> <li>Substitute \\(x',x\\) to original equation, find the x,y.</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#26-systems-of-odes-iii","title":"2.6: Systems of ODEs III","text":"<ul> <li>For example, \\(\\begin{aligned}\\dot{x}&amp;=x+y-2z\\\\ \\dot{y}&amp;=-x+2y+z \\\\ \\dot{z}&amp;=-y-z \\end{aligned}\\)</li> <li> <p>The matrix form: \\(\\displaystyle\\frac{d}{dt}\\begin{pmatrix}x\\\\ y\\\\ z\\end{pmatrix}=\\begin{pmatrix}1&amp;1&amp;-2 \\\\-1&amp;2&amp;1 \\\\0&amp;-1&amp;-1\\end{pmatrix}\\begin{pmatrix}x\\\\ y\\\\ z\\end{pmatrix}\\)</p> </li> <li> <p>Just find the E-vector, the equations can be solved.</p> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-diagonalisation-of-matrices-and-decoupling-of-systems-of-equations","title":"3: Diagonalisation of matrices and decoupling of systems of equations","text":"<ul> <li> <p>\\(\\begin{aligned}\\displaystyle\\frac{dx}{dt}&amp;=-4x+y \\\\ \\displaystyle\\frac{dy}{dt}&amp;=-5x+2y \\end{aligned}\\)</p> </li> <li> <p>Then, \\(\\displaystyle\\frac{d}{dt}\\begin{pmatrix} x\\\\ y\\end{pmatrix}=\\begin{pmatrix}-4&amp;&amp;1\\\\-5&amp;&amp;2\\end{pmatrix}\\begin{pmatrix}x\\\\ y\\end{pmatrix}\\)</p> </li> <li> <p>If we assumed \\(y=Pz\\)</p> </li> <li>It is found that \\(\\lambda_1=1\\), \\(x_1=\\begin{pmatrix} 1\\\\ 5\\end{pmatrix}\\) and \\(\\lambda_2=-3\\), \\(x_2=\\begin{pmatrix}1\\\\1\\end{pmatrix}\\).</li> <li>So \\(P=\\begin{pmatrix}1&amp;1\\\\5&amp;1\\end{pmatrix}\\) </li> <li>The diagonalisation \\(Z=P^{-1}AP^{-1}\\)</li> <li>\\(Z=\\begin{pmatrix}1&amp;&amp;0\\\\0&amp;&amp;-3\\end{pmatrix}\\)</li> <li>\\(\\begin{pmatrix}\\dot{z_1}\\\\ \\dot{z_2}\\end{pmatrix}=Z\\begin{pmatrix}z_1\\\\z_2 \\end{pmatrix}\\)</li> <li>It is easy to find \\(z_1=Ae^t\\) and \\(z_2=Be^{-3t}\\).</li> <li>\\(y=Pz\\Rightarrow\\begin{pmatrix}x\\\\ y\\end{pmatrix}=\\begin{pmatrix}1&amp;1\\\\ 5&amp;1\\end{pmatrix}\\begin{pmatrix}z_1\\\\z_2\\end{pmatrix}\\)</li> <li>Then the expression of \\(x\\) and \\(y\\) can be found.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#ix-the-principles-applications-of-calculus","title":"IX: The Principles &amp; Applications of Calculus","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-limits-and-differentiation","title":"1: Limits and Differentiation","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#11-introduction-to-limits","title":"1.1: Introduction to limits","text":"<ul> <li>A limit is best regarded as the end point of the infinite process, or the target, so we avoid the question of do we ever reach it.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-differentiation-from-first-principles","title":"1.2: Differentiation from First Principles","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#121-average-and-exact-gradient","title":"1.2.1: Average and exact gradient <ul> <li>We need know the precise answer at a point.</li> <li>We choose two points close together, find the slope between them, then move them together.</li> <li>Then we find the tangent line by consider the limit of the 'close' process.</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#122-gradient-of-a-curve-differentiation","title":"1.2.2: Gradient of a curve - differentiation <ul> <li>Example_1: <ul> <li>If we consider the function \\(y=t^2\\).</li> <li></li> <li>If we want to know the slope of the curve PQ, i.e. \\(\\displaystyle\\frac{\\delta y}{\\delta t}\\)</li> <li>We can find that at point P,\\(y=t^2\\) and at point Q \\(y+\\delta y=(t+\\delta x)^2\\)</li> <li>Since \\(y=y\\), we can find and rearrange it: \\(\\displaystyle\\frac{\\delta y}{\\delta t}=2t+\\delta t\\)</li> <li>When \\(\\delta t\\rightarrow 0\\), we write: \\(\\displaystyle\\frac{dy}{dt}=\\lim_{\\delta t\\to 0}\\displaystyle\\frac{\\delta y}{\\delta t}=2t\\)</li> <li>We call this process differentiation from first principles, and its result is called derivative.</li> </ul> </li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#13-notation","title":"1.3: Notation","text":"<ul> <li>Differentiation use various symbols: \\(d,\\partial,D\\) for derivatives, \\(\\delta\\) is used for  infinitesimal changes (tiny), and \\(\\Delta\\) for finite change (that don't tend to zero)</li> <li>We use these for derivatives: \\(\\displaystyle\\frac{dy}{dx},\\displaystyle\\frac{d}{dx}(y),f'(x),y'(x),\\dot{y}\\)</li> <li>Noted that over-dot is only used for time derivatives.</li> <li>Partial differential are denoted: \\(\\frac{\\partial z}{\\partial x},(\\frac{\\partial z}{\\partial x})_y,z_x\\)</li> <li>Second derivatives use different symbols: \\(\\displaystyle\\frac{d}{dx}(\\displaystyle\\frac{d}{dx}(y))\\), or \\((\\displaystyle\\frac{d}{dx})^2y\\) and \\(\\displaystyle\\frac{d^2y}{dx^2}\\)</li> <li>The 'double dot' and 'double prime' rules are same as that in first derivatives in second derivatives.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#14-standard-derivatives","title":"1.4: Standard Derivatives","text":"<ul> <li>Note that we use binomial expansion for the derivation of \\(y=x^n\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#15-limits","title":"1.5: Limits","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#151-convergent-and-divergent-series","title":"1.5.1: Convergent and Divergent series <ul> <li>Such as \\(S_1=1/2+1/4+1/8+....\\to 1\\), we simply say \\(S_1=1\\). If we consider is as a limit, this is a convergent series.</li> <li>Compared it with \\(S_2=1-1/2+1/3_1/4+....\\), which has one '+' after one '-', it is called convergent alternating series.</li> <li>After re-arrange the series, we can find:  </li> <li>We call it conditionally convergent.</li> <li>A series that converges (convergent) even if all terms are made positive is called absolutely convergent which can be re-arrange to find the limit.</li> <li>However, the series labelled \\(S_3\\) diverges, the prove can be: </li> <li>So \\(S_3\\to \\infty\\) and is therefore divergent. This method of proof is called the comparison test.</li> <li>Noted that even though the individual terms in this series tend to zero, that does not prove convergence.</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#152-limits-of-functions","title":"1.5.2: Limits of functions <ul> <li>1: \\(\\lim_{x\\to 0}3x^2-4=-4\\), whilst \\(\\lim_{x\\to \\infty}3x^2-4=\\infty\\)</li> <li>Note that the function is not simply getting close to the zero, but the difference between the function and zero is getting smaller.</li> <li>2: \\(\\lim_{x\\to \\infty}sin(x)=\\)'undefined', cause the sin(x) neither tends to a fixed value nor to infinity.</li> <li>3: \\(\\lim_{x\\to 2}\\displaystyle\\frac{3}{x-2}\\to \\pm\\infty\\), or \\(\\lim_{x\\to 2+}\\displaystyle\\frac{3}{x-2}\\to +\\infty\\) and \\(\\lim_{x\\to 2-}\\displaystyle\\frac{3}{x-2}\\to - \\infty\\)</li> <li>Note that we use notation 2+ to mean 'from the positive side' and 2- for 'from the negative side'.</li> <li>5: \\(\\lim_{x\\to \\infty}(\\displaystyle\\frac{x^2-1}{x+3})=\\lim_{x\\to \\infty}[\\displaystyle\\frac{x^2(1-1/x^2)}{x(1+3/x)}]=\\infty\\)</li> <li>In that case, the numerator and denominator both tend to infinity, we re-arrange and get the answer.</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#how-to-get-the-limit-of-ptqt","title":"How to get the limit of p(t)/q(t) <ul> <li>\\(p(t)\\) and \\(q(t)\\) are polynomials.</li> <li>Try to separate factors:  Such as \\(\\lim\\frac{\\sqrt{x^2+3}}{x+3}\\), try to separate \"x\", \\(\\lim \\frac{\\sqrt{x^2(1+3/x^2)}}{x(1+3/x)}\\), then find the limit. </li> <li>Using L'Hopital's Rule:  Note that \"\\(\\frac{\\sqrt{()}}{kx+b}\\)\" or inverse cannot be should be solved it.</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-integration","title":"2: Integration","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#21-the-definite-integration-and-indefinite-integration","title":"2.1: The Definite Integration and Indefinite integration","text":"<ul> <li>The integration that produces a value not merely a formula is called a definite integration.</li> <li>An integration without a value is called indefinite integration.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#22-relationship-of-integration-to-differentiation","title":"2.2: Relationship of integration to differentiation","text":"<ul> <li>According to the fundamental theorem of calculus: \\(\\delta A\\approx f(x)\\delta x\\), and \\(\\displaystyle\\frac{dA}{dx}=f(x)\\) in the limit \\(\\delta x\\to 0\\)</li> <li>And the area is the antiderivative of the area, written as \\(A=\\displaystyle\\int{f(t)}dt\\)</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#23-volume-of-revolution","title":"2.3: Volume of Revolution","text":"<ul> <li>A volume of revolution is formed by rotating a curve about a axis, which may be the x-axis or y-axis or other line.</li> <li>If the rotation is about the x-axis,each with radius given by \\(f(x)\\) and thickness \\(\\delta x\\), the volume of one disc is \\(\\delta V\\approx \\pi f(x)^2\\delta x\\)</li> <li>And the volume between \\(x=a\\) and \\(x=b\\) is given by: \\(\\lim_{\\delta x\\to 0}\\Sigma^{x=b}_{x=a}\\pi f(x)^2\\delta x\\)</li> <li>So \\(V=\\displaystyle\\int _a^b\\pi y^2dx\\) </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#24-arc-length","title":"2.4: Arc-length","text":"<ul> <li>To find the length of a curve expressed as \\(y=f(x)\\).</li> <li>\\(\\delta s^2\\approx \\delta x^2+\\delta y^2\\), so \\(\\delta s\\approx \\sqrt{\\delta x^2+\\delta y^2}=\\sqrt{1+(\\displaystyle\\frac{\\delta y}{\\delta x})}dx\\)</li> <li>Then we take a limit:  $$ s=\\lim_{\\delta x\\to 0}\\sum\\delta s=\\lim_{\\delta x\\to 0}\\sqrt{1+(\\displaystyle\\frac{\\delta y}{\\delta x})^2}\\delta x=\\int_a^b\\sqrt{1+(\\displaystyle\\frac{dy}{dx})^2}dx $$</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#25-surface-area-or-revolution","title":"2.5: Surface area or revolution","text":"<ul> <li>The volume of revolution has a curved surface, which may be regarded as a sum of thin circular bands. </li> <li>For each, the area is approximately the circumference multiplied by the length of the small piece of arc. $$ A_S\\approx\\sum 2\\pi y\\delta s=\\sum 2\\pi y\\sqrt{1+(\\displaystyle\\frac{\\delta y}{\\delta x})^2}\\delta x=\\int_a^b 2\\pi y\\sqrt{1+(\\displaystyle\\frac{dy}{dx})^2dx} $$</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#26-bending-stiffness","title":"2.6: Bending stiffness","text":"<ul> <li>Initially, we will consider only a rectangular beam bending a small amount.Resistance to bending comes from stretching planes of material on the outside if the bend, and compressing in the inside bend, with: Resistance to bending \\(\\pm\\) amount of stretching \\(\\times\\) moment of about centre line.</li> <li>The strain (amount od stretch/compression) is proportional to the distance from the centre line, and the moment of that force is also proportional to the distance from the centre. Therefore we need to calculate the second moment of area about the centre line.</li> <li>For thickness \\(\\delta y\\) and width \\(w\\), we get second moment \\(I\\) \\(I\\approx \\sum (w\\delta y)(y)(y)\\),hence \\(I=\\int_{-d/2}^{d/2}wy^2dy\\).</li> <li>For rectangular beam of width \\(w\\) and depth \\(d\\), this gives \\(I=\\displaystyle\\frac{wd^3}{12}\\).</li> <li>For a circular bar, it gives that \\(I=\\pi r^4/4\\), and hence for tube of inner radius \\(a\\) and outer radius \\(b\\), we get \\(I=\\pi (b^4-a^4)/4\\).</li> <li>Tubes and I beams have a large bending stiffness relative to their mass as much of the mass is away from the centre line (neutral axis).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-centre-of-mass-and-multiple-integrals","title":"3: Centre of Mass and Multiple Integrals","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#31-centre-of-mass-in-1d","title":"3.1: Centre of Mass in 1D","text":"<ul> <li>For two objects, we calculate the centre of mass by looking at total mass and the total moment.Take the moment about \\(O\\), with \\(X\\) as the coordinate of the c.o.m: $$ m_1x_1+m_2x_2=(m_1+m_2)X,X=\\displaystyle\\frac{m_1x_1+m_2x_2}{m_1+m_2}=\\displaystyle\\frac{total moment}{total mass} $$</li> <li>A collection of discrete objects but all on the same line: $$ X=\\displaystyle\\frac{\\sum m_ix_i}{m_i} $$</li> <li>For a continuous bar in 1D, but with varying density \\(\\rho(x)kg.m^{-1}\\), we use the same starting with one small piece of the rod:<ul> <li>For the mass: \\(\\delta m\\approx\\rho \\delta x,m=\\int_0^L\\rho (x)dx\\)</li> <li>For the moment about the \\(O\\): \\(\\delta M\\approx \\rho x\\delta x,M=\\int_0^L\\rho(x)xdx\\)</li> <li>Then the position of \\(X\\) is given by the same ratio, \\(X=\\displaystyle\\frac{M}{m}\\)</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#32-multiple-integrals","title":"3.2: Multiple integrals","text":"<ul> <li>Integration in 2D or 3D uses the same concept - the limit of a sum of small contributions.For example, to find the mass of a rectangular plate with density \\(\\rho=3+x+2y\\), extending from \\(x=0\\to 2\\) and \\(y=0\\to 3\\) </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#two-ways-to-do-the-2d-integrals","title":"Two ways to do the 2D Integrals <ul> <li>Use 1-D integration (uniform \\(\\rho\\)): \\(m=\\int_a^b\\rho y{\\rm d}x\\)</li> <li> <p>Use Double integration (\\(\\rho (x,y)\\)): \\(m=\\int_a^b\\int_0^y \\rho {\\rm d}y{\\rm d}x\\), note that \"\\(\\int_0^y\\)\" is the range of \\(y(x)\\) </p> </li> <li> <p>For one small piece, \\(\\delta m\\approx \\rho x\\delta y\\). For a strip parallel to the x-axis, mass \\(\\approx[\\sum \\rho \\delta x]\\delta y\\).</p> </li> <li>Overall,\\(m\\approx\\sum [\\sum \\rho \\delta x]\\delta y\\), and in the limit \\(\\delta x\\to 0\\), \\(\\delta y\\to 0\\).</li> <li>\\(m=\\displaystyle\\int_{y=0}^3[\\displaystyle\\int_{x=0}^2\\rho(x,y)dx]dy=\\int_0^3\\int_0^2\\rho(x,y)dxdy\\)</li> <li>Note that the inner integral has the end-points 0,2 and is treated as a function of \\(x\\), with \\(y\\) held constant, before complete the outer integral of \\(y\\).(Order doesn't matter)</li> <li>To find the c.o.m with coordinates(X,Y), we need moments about two axes: \\(M_X=\\displaystyle\\iint x\\rho dxdy\\) (About the y-axis), \\(M_Y=\\displaystyle\\iint y\\rho dxdy\\) (About the x-axis)</li> <li>Then \\(X=\\displaystyle\\frac{M_X}{m}\\),\\(Y=\\displaystyle\\frac{M_Y}{m}\\)</li> <li>It is possible to adapt this approach to find the c.o.m, of non-rectangular regions.</li> <li>Other applications includes the case of a 2D or 3D body with internal heat sources or heat sinks. If there is equilibrium, then the heat crossing the boundary of the region must equal to the total heat source or sink within it.</li> <li>Thus we can equate the volume integral of heat produced with the surface integral of heat crossing a boundary.</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#the-sample-exercise-of-integrations","title":"The sample exercise of Integrations","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-the-integration-methods","title":"1: The integration Methods <ul> <li>(1): Normal integral - use anti-derivate and chains rules </li> <li>(2): Substitution: as \\(\\int p(x)f(g(x))\\) eg:\\(\\int 3x\\sqrt{1-5x^2}{\\rm d}x\\).let \\(u(x)=1-5x^2\\), \\(\\frac{du}{dx}=-10x\\), \\(dx=-\\frac{du}{10x}\\).</li> </ul> <p>\\(\\begin{aligned}\\therefore \\int 3x\\sqrt{1-5x^2}{\\rm d}x&amp;=\\int 3x(-\\frac{1}{10x}\\sqrt{u}){\\rm d}u\\\\ &amp;=\\frac{-3}{10}\\int \\sqrt{u}du\\\\  &amp;=-\\frac{1}{5}(1-5x^2)^{3/2}\\end{aligned}\\)</p> <ul> <li>(3): By part, as \\([\\int u'v=uv-\\int uv']\\) eg: \\(\\int 3x\\cos(1-3x){\\rm d}x\\), let \\(v(x)=2x\\), \\(u'(x)=\\cos(1-3x)\\), \\(v'(x)=2\\), \\(u(x)=-\\frac{1}{3}\\sin (1-3x)\\).</li> </ul> <p>\\(\\begin{aligned}\\int 3x\\cos(1-3x){\\rm d}x&amp;=2x(-\\frac{1}{3})\\sin (1-3x)-\\int -\\frac{1}{3}\\sin (1-3x).2{\\rm d}x \\\\ &amp;=-\\frac{2}{3}x\\sin (1-3x)+\\frac{2}{3}[\\frac{1}{3}\\cos(1-3x)] \\end{aligned}\\)</p> <ul> <li>(4): By partial fraction, as \\(\\int \\frac{p(x)}{q(x)}{\\rm d}x\\)</li> </ul> <p>eg: \\(\\begin{aligned}\\int \\frac{3x-1}{2x^2-x}{\\rm d}x&amp;=\\int \\frac{3x-1}{x(2x-1)}{\\rm d}x\\\\ &amp;=\\int (\\frac{A}{x}-\\frac{B}{2x-1}){\\rm d}x\\end{aligned}\\)</p> <p>\\(\\because A(2x-1)-Bx=3x-1\\), \\(\\therefore A=B=1\\).</p> <p>\\(\\begin{aligned}\\int(\\frac{A}{x}-\\frac{B}{2x-1}){\\rm d}x&amp;=\\int \\frac{1}{x}-\\int \\frac{1}{2x-1}\\\\ &amp;=\\ln{x}-\\frac{1}{2}\\ln{2x-1}\\end{aligned}\\)</p> <ul> <li>(5): By sin/cos substitution, as \\(\\int \\sqrt{a^2-x^2}{\\rm d}x\\) eg: \\(\\int \\sqrt{a^2-x^2}{\\rm d}x\\), \\(a&gt;0\\), let \\(x=a\\sin \\theta\\), \\(\\theta\\in (-\\frac{\\pi}{2},\\frac{\\pi}{2})\\).</li> </ul> <p>\\(\\begin{aligned}\\int\\sqrt{a^2-x^2}&amp;=\\int\\sqrt{a^2-a^2\\sin^2\\theta} da\\sin\\theta \\\\&amp;=\\int a\\cos\\theta(a\\cos\\theta){\\rm d}\\theta \\\\&amp;= a^2\\int \\frac{1}{2}(1+\\cos(2\\theta)){\\rm d}\\theta \\\\&amp;= \\frac{a^2}{2}(t+\\frac{1}{2}\\sin 2\\theta)+C \\end{aligned}\\)</p> <p>Note the integration range should be changed to the range of '\\(\\theta\\)'.</p>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-area-surface-area-volume-and-length-calculation","title":"2: Area, surface area, volume and length calculation <ul> <li> <p>(1): Area calculation - \\(A=\\int y{\\rm d}x\\) eg: Find the area enabled by \\(y=3x-x^2\\) and x-axis: \\(A=\\int_ 0^3 (3x-x^2){\\rm d}x\\)</p> </li> <li> <p>(2): Revolution volume - \\(V=\\int \\pi y^2{\\rm d}x\\) eg: Find the revelation volume of \\(y=\\sqrt{4-x^2}\\) between x=0 and x=2 around x-axis, the volume should be \\(\\int _0^2 \\pi \\sqrt{4-x^2}{\\rm d}x\\).</p> </li> <li> <p>(3): Length of the curve - \\(S=\\int _a^b\\sqrt{1+(\\frac{dy}{dx})^2}{\\rm d}x\\). eg: Find the length given by \\(y=\\cosh x\\) between x=0 and x=2, \\(S=\\int _0^2 \\sqrt{1+\\sinh ^2x}{\\rm d}x\\), \\(\\because \\frac{\\sinh(xi)}{i}=\\sin x\\), \\(\\therefore S=\\int _0^2 \\sqrt{1+\\sinh ^2x}{\\rm d}x= \\sinh 2\\).</p> </li> <li> <p>(4): Centre of mass (Uniform density) eg: Find the c.o.m of the triangular plate enclosed by \\(y=\\pm \\frac{1}{2}x\\) and \\(x=4\\).</p> </li> </ul> <p>\\(\\begin{aligned}m&amp;=2\\int _0^4\\rho (\\frac{1}{2}){\\rm d}x\\\\ &amp;=2\\rho [\\frac{1}{4}x^2]_0^4 \\\\ &amp;=8\\rho  \\end{aligned}\\)</p> <p>\\(\\begin{aligned}X&amp;=\\frac{M_x}{m}\\\\ &amp;=\\frac{8}{3}\\end{aligned}\\);</p> <p>\\(\\begin{aligned}X&amp;=\\frac{M_x}{m}\\\\ &amp;=\\frac{8}{3}\\end{aligned}\\), \\(Y=0\\).</p> <p>eg2: Find the centre of mass of \\(x^2+y^2=a^2\\), for \\(x&gt;=0\\), the semi-circle:</p> <p>\\(\\begin{aligned}m&amp;=2\\int _0^a\\rho \\sqrt{a^2-x^2}{\\rm d}x\\\\ &amp;= 2\\rho \\frac{1}{4}\\pi a^2 \\\\ &amp;=\\frac{1}{2}\\rho \\pi a^2\\end{aligned}\\)</p> <p>\\(\\begin{aligned} M_x&amp;= \\rho \\int_0 ^a x2y{\\rm d}x \\\\ &amp;=\\frac{2}{3}\\rho a^3\\end{aligned}\\)</p> <p>\\(\\begin{aligned} X&amp;=\\frac{M_x}{m}\\\\ &amp;=\\frac{4a}{3\\pi} \\end{aligned}\\)</p> <ul> <li>(5): Centre of mass (\\(\\rho =\\rho (x,y)\\)) eg1: Find the c.o.m, \\(0&lt;x&lt;3\\), \\(0&lt;y&lt;2\\), \\(\\rho =x^2y-xy^2\\) (per unit area), \\(m=\\int _0 ^3\\int _0^2 (x^2y-xy^2){\\rm d}x{\\rm d}y\\).</li> </ul> <p>\\(\\begin{aligned}m&amp;=\\int _0 ^3\\int _0^2 (x^2y-xy^2){\\rm d}x{\\rm d}y\\\\ &amp;= \\int _0^2 [\\frac{1}{3}yx^2-\\frac{1}{2}y^2x^2]_0^3{\\rm d}y\\\\ &amp;=6 \\end{aligned}\\)</p> <p>\\(\\begin{aligned} M_x&amp;=\\int _0^2\\int _0^3x(x^2y-xy^2){\\rm d}x{\\rm d}y \\\\ &amp;=\\frac{33}{2}\\end{aligned}\\)</p> <p>\\(\\begin{aligned}M_Y&amp;= \\int _0^2 \\int _0 ^3 y(x^2y-xy^2){\\rm d}x{\\rm d}y\\\\ &amp;=6 \\end{aligned}\\)</p> <p>eg2: A triangular plate has corner at (0,0),(0,1), (1,0). Find its centre of mass, \\(\\rho =y\\).</p> <p>\\(\\begin{aligned} m&amp;=\\int _0^{1-x}\\int _0^1 \\rho {\\rm d}x{\\rm d}y\\\\ &amp;=\\int _0^{1-x}\\int _0^1 y{\\rm d}y{\\rm d}x\\\\ &amp;=\\frac{1}{6}\\end{aligned}\\)</p> <p>\\(\\begin{aligned} \\int _0^1\\int _0^{1-x}\\rho x{\\rm d}y{\\rm d}x&amp;= \\int _0 ^2[\\frac{1}{2}xy^2]_0^{1-x}{\\rm d}x\\\\ &amp;=\\frac{1}{24}\\end{aligned}\\)</p> <ul> <li>(6): Area of surface of revolution - \\(A=\\int _a^b2\\pi y\\sqrt{1+(\\frac{dy}{dx})^2}{\\rm d}x\\) eg. Find the area of revolution of \\(y=\\cosh x\\), \\(x\\in (0,2)\\).</li> </ul> <p>\\(\\begin{aligned}A&amp;= \\int _0 ^2 2\\pi \\cosh(x)\\sqrt{1+\\sinh ^2(x)}{\\rm d}x \\\\ &amp;= \\frac{1}{2}\\pi \\sinh(4)+2\\pi  \\end{aligned}\\)</p> <ul> <li>(7): Centre of mass of revelation  eg: Find the centre of mass of the revolution body of \\(x^2+y^2=a^2\\), (\\(x&gt;=0\\))</li> </ul> <p>\\(\\begin{aligned}m&amp;=\\int _0 ^a \\pi y^2\\rho {\\rm d}x \\\\ &amp;=\\pi \\rho \\int _0 ^a (a^2-x^2){\\rm d}x\\\\ &amp;= \\frac{2}{3}a^3\\pi \\rho \\end{aligned}\\)</p> <p>\\(\\begin{aligned} M_x&amp;=\\int _0 ^a x\\pi y^2\\rho {\\rm d}x \\\\ &amp;= \\frac{1}{4}a^4\\pi \\rho \\end{aligned}\\)</p> <p>\\(\\begin{aligned}  X&amp;=\\frac{M_x}{m} \\\\  &amp;=\\frac{3}{8}a  \\end{aligned}\\)</p>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#x-maclaurin-series","title":"X: Maclaurin Series","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-the-exponential-sine-and-cosine-series","title":"1: The Exponential, Sine and Cosine Series","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#11-an-infinite-power-series","title":"1.1: An infinite power Series","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#111-introduction","title":"1.1.1: Introduction <ul> <li>Consider the infinite Series: $$ S=1+x+\\frac{x^2}{2!}+\\frac{x^2}{3!}+\\frac{x^4}{4!}+.... $$</li> <li>If we differentiate both sides, we can get: $$ \\displaystyle\\frac{dS}{dx}=S $$</li> <li>Noting that \\(\\displaystyle\\frac{d}{dx}e^x\\), so we see that this is the exponential Series: $$ e^x=exp(x)=1+x+\\displaystyle\\frac{x^2}{2!}+\\displaystyle\\frac{x^3}{3!}+.... $$</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#112-properties","title":"1.1.2: Properties <ul> <li>This is a infinite power series about \\(x=0\\), which means it works at \\(x=0\\) and nearby.</li> <li>The series for \\(e^x\\), converges for all values of \\(x\\), and \\(x\\) can also be complex number.</li> <li>We can say it has an infinite radius of convergence.</li> <li>It works best for small values of \\(|x|\\) or \\(|z|\\).</li> <li>A Maclaurin Series in a variable \\(x\\) is just a power series about \\(x=0\\).</li> <li>The series of cosine, sine and exponential have same derivation way. (Differential)</li> </ul>","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#12-using-the-exponential-series","title":"1.2: Using the exponential series","text":"<ul> <li>\\(e^{10.1}=e^{10}e^{0.1}=e^{10}[1+0.1+\\frac{0.01}{2}+ ....]\\). If we get the value of \\(e^{10}\\), then we can choose various adaptations of power series like this to get a desired level of accuracy.</li> <li>\\(e^{1+x}=e^1e^x=e[1+x+\\frac{x^2}{2} + ....]\\)</li> <li>Using a complex argument is permitted, and the choice of \\(i\\theta\\) results in two more useful series: ($\\theta $ in radian) $$ e^{i\\theta}=\\cos\\theta+i\\sin\\theta=[1-\\frac{\\theta^2}{2!}+\\frac{\\theta^4}{4!}- ....]+i[\\theta-\\frac{\\theta^3}{3!}+\\frac{\\theta^5}{5!}- ...] $$</li> <li>This the power series of \\(\\cos(\\theta)\\) and \\(\\sin(\\theta)\\) $$ \\cos\\theta=1-\\frac{\\theta^2}{2!}+\\frac{\\theta^4}{4!}- .... $$ $$ \\sin\\theta=\\theta-\\frac{\\theta^3}{3!}+\\frac{\\theta^5}{5!}- ... $$</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-the-logarithmic-series","title":"2: The Logarithmic Series","text":"<ul> <li>If there is a series like this: \\(ln(x)=a_0+a_1x+a_2x^2+...\\)</li> <li>If we change another form of this series: $$ ln(1+x)=x-\\frac{x^2}{2}+\\frac{x^3}{3}-\\frac{x^4}{4}+ .... $$</li> <li>For more usual form, we get Taylor Series: $$ ln(y)=(y-1)-\\frac{(y-1)^2}{2}+\\frac{(y-1)^3}{3}- .... $$</li> <li>Taylor Series is valid near \\(y=1\\), and converges if \\(0&lt;y\\leq 2\\). This is a Taylor Series about \\(y=1\\).</li> <li>If we differentiate the series, we get: \\(\\frac{1}{1+x}=1-x+x^2-x^3+...\\), which is a geometric series with first term \\(a=1\\), ratio \\(r=-x\\).</li> <li>The geometric series converges if \\(|x|&lt;1\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-the-binomial-series","title":"3: The Binomial Series","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#31-the-binomial-expansion","title":"3.1: The Binomial Expansion","text":"<p>$$ (a+b)^n=\\displaystyle\\sum_{r=0}^nC^r_na^{n-r}b^r $$ * This series is finite if \\(n\\) is a positive integer.</p>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#32-the-binomial-series","title":"3.2: The Binomial Series","text":"<ul> <li>If \\(n\\) is negative or a fraction, and we use the same series as above, th series will be infinite.</li> <li>Firstly, \\((a+b)^n=a^n[1+(\\frac{b}{a}) ]^n\\), then we use the binomial expansion: $$ (1+x)^p=1+px+\\frac{p(p-1)}{2!}x^2+\\frac{p(p-1)(p-2)}{3!}x^3+... $$</li> <li>If the power \\(p\\) is a positive integer, the series terminated as before and always convergent.</li> <li>If \\(p\\) is negative integer or a fraction, the series is infinite, and converges only if \\(|x|&lt;1\\).</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#4-applications-and-combining-series","title":"4: Applications and Combining series","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#41-combining-series","title":"4.1: Combining series","text":"<ul> <li>If we have a function composed of two or more standard series, we can combined, if we correctly identify the overall domain of convergence for the final series.</li> <li>For example: </li> </ul> <p>\\(\\begin{aligned}f(x) &amp;=\\frac{ln(1-2x)}{\\sqrt{1-3x}} \\\\&amp;=ln(1-2x)(1-3x)^{-1/2} \\\\&amp;=[-2x-2x^2-\\frac{8}{3} x^3-...]\\times[1+\\frac{3}{2}x+\\frac{27}{8}x^2+... ] \\\\ &amp;=(-2)x+(3-2)x^2+(-\\frac{27}{4}+3-\\frac{8}{3})x^3+... \\\\   \\end{aligned}\\)</p> <ul> <li>The combined series will converge if both series converge, so we must satisfy both convergence conditions: $$ -1&lt;-2x\\neq 1\\qquad -1&lt;-3x&lt;1 $$</li> <li>So \\(|x|&lt;\\frac{1}{3}\\) works for both conditions.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#42-applications-for-infinite-series","title":"4.2: Applications for Infinite Series","text":"<ul> <li>Infinite Series can be used to find \\(e^x\\) and \\(\\sin(x)\\) in computers.</li> <li>Series can be used to evaluate the integral, such as binomial expansion can be used to estimate \\(\\displaystyle\\int _0^1\\displaystyle\\frac{1}{(1+x^2)^3}{\\rm d}x\\).</li> <li>To solve more complicated differential equations.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#xi-numerical-methods","title":"XI: Numerical Methods","text":""},{"location":"NOTES/Stage_1/1001/EngineeringMath/#1-newton-raphson-methods","title":"1: Newton-Raphson Methods","text":"<ul> <li>To find the root of the function \\(f(x)=0\\), which is assumed as \\(x=X\\). </li> <li>We start from \\(x_0\\), and find the derivate of \\((x_0,f(x_0)\\)), which is \\(f'(x)\\),then we draw the tangent line of this point. This line across with x axis at \\(x_1\\).</li> <li>Repeat the operation of \\(x_0\\) with \\(x_1\\), and then \\(x_2\\) ...\\(x_n\\) and so on.</li> <li>From the right-angle triangle: $$ f'(x_0)=\\frac{f(x_0)}{x_0-x_1} \\ x_1=x_0-\\frac{f(x_0)}{f'(x_0)} $$</li> <li>So that we can find the general formula: $$ x_{n+1}-x_n-\\frac{f(x_n)}{f'(x_n)} $$</li> <li>This is the Newton-Rephson Method.</li> <li>We always choose 4 significant number of the results, and the answer will be same when n is increasing: </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#2-numerical-integration","title":"2: Numerical integration","text":"<ul> <li>Sometimes numerical integration is more convenient compared to calculus.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#21-trapezium-rule","title":"2.1: Trapezium rule","text":"<ul> <li>A simple methods to replace the curve by several short lines and find the sum of the trapezium area.</li> <li>If we choose five points and find four trapezium areas as below: </li> <li>The answer will be: $$ A=\\displaystyle\\int _a^b y{\\rm d}x\\approx T_4=\\frac{h}{2}[y_1+2(y_2+y_3+y_4)+y_5] $$</li> <li>The section number depends on the points number, the middle sections (except first and last one) should times '2'.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#22-simpsons-rule","title":"2.2: Simpson's rule","text":"<ul> <li>An improved method is to replace the curve by several short quadratic sections.</li> <li>We choose three points from one quadratic curve and another three points from one quadratic curve,(The middle one is same) and the do the sum. (4 sections) </li> <li>If we noted the y-position of the chosen points are \\(f_1\\), \\(f_2\\) and \\(f_3\\): $$ \\displaystyle\\int _{-h}^{+h}y{\\rm d}x = \\displaystyle\\frac{h}{3}(f_1+4f_2+f_3) $$</li> <li>This the formula can be used for any three points. It can also be remembered as \\(f_1+2f_2+2f_2+f_3\\), four sections for three points.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#23-accuracy","title":"2.3: Accuracy","text":"<ul> <li>The Trapezium Rule can be applied using any number of strips from one upward, and the accuracy increasing as number of strips increasing. It is found that doubling the number of strips divides the error by four approximately: $$ error\\propto h^2 \\ second-order\\quad convergence $$</li> <li>Simpson's rule can be used for any even number of strips from 2 upwards, with accuracy of: $$ error\\propto h^4 \\ fourth-order\\quad convergence $$</li> <li>Adaptive integration, is a kind of way to change the width of the strips using computer programs.</li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#3-eigenvalues-and-eigenvectors","title":"3: Eigenvalues and eigenvectors","text":"<ul> <li>The method can be used to find the approximately solution of E-value and E-vector are demonstrated below.</li> <li>For an example matrix: A=\\(\\begin{pmatrix} 3&amp;4 \\\\ 2&amp;1 \\\\ \\end{pmatrix}\\), we can easily find that \\(\\lambda_1=5\\), \\(v_1=\\begin{pmatrix} 2 \\\\ 1 \\\\ \\end{pmatrix}\\); \\(\\lambda_2=-1\\), \\(\\begin{pmatrix} 1 \\\\ -1 \\\\ \\end{pmatrix}\\).</li> <li>Use this method, we can find the max magnitude E-value and its E-vector: </li> <li>If we plot the result, another E-value and E-vector can also be found by inverse matrix: </li> </ul>"},{"location":"NOTES/Stage_1/1001/EngineeringMath/#4-solving-differential-equations-eulers-methods","title":"4: Solving differential equations - Euler's methods","text":"<ul> <li>If we want to solve the equation like \\(\\frac{dy}{dx}=f(x,y)\\), with initial condition \\(y(x_0)=y_0\\).</li> <li>Over a short distance, we can use \\(\\delta y\\approx\\frac{dy}{dx}\\delta x\\). Instead we use \\(h\\) replace \\(\\delta x\\): $$ \\begin{aligned} y_1&amp;=y_0+h\\frac{dy}{dx}(0) \\ &amp;=y_0+hf(x_0,y_0) \\ \\end{aligned} $$</li> <li>Then we get a general formula: $$ y_{n+1}=y_n+hf(x_n,y_n) $$</li> <li>Using this method, we can get the approximate graph of the solution: </li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/","title":"C Programming Basic","text":""},{"location":"NOTES/Stage_1/Coding/C/#i-c-programming-basics-and-input-and-output","title":"I: C Programming Basics and Input and Output","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-input","title":"1: Input","text":""},{"location":"NOTES/Stage_1/Coding/C/#11-scanf","title":"1.1: Scanf","text":"<pre><code>scanf(\"%s\",&amp;name);//%s for string\nscanf(\"%d\",&amp;number);//%d for intrigue\nscanf(\"%c\",&amp;character);//%c for characters\nscanf(\"%f\",&amp;floatnumber);//%f for floatnumbers\nscanf(\"%i\",&amp;signedDecimalInt);//%i for signed decimal intrigue\nscanf(\"%o\",&amp;unsignedOctalInt);//%o for signed octal int\nscanf(\"%x\",&amp;unsignedHexdecinmal);// X for upper hexadecimal,x for lower hex\nscanf(\"%a %b\",&amp;a,&amp;b);//input two numbers\nscanf(\"%4d\",a);// right specifying the result up to 4 digit (all the result to the right side)\nscanf(\"%.4d\",a);// if a = 123 , the result will be 0123\nscanf(\"%.4f\",a);// if a = 123.45678, the result will be 123.4568\nscanf(\"%4.4f\",a);// The combination of above\nscanf(\"%*.*f\",4,4,a);// Same as the last line\n\n// Using the scan set in scanf can terminated the input at specified character\nscanf(\"%8[aeiou]\", z); // The string input will be stopped if the letter is not one of 'aeiou'\nscanf(\"%8[^aeiou]\", z); // inverted scan set\n\n// It is available to skip certain characters in the input stream:\n\nscanf(\"%d-%d-%d\", &amp;month, &amp;day, &amp;year);\n// For the input 02-22-2003, the '-' will be discorded\nscanf(\"%d%*c%d%*c%d\", &amp;month, &amp;day, &amp;year);\n//For the 02/22/2003, use '* can ensure the input cannot be stored will be discorded.\n</code></pre> <ul> <li>Note that scanf cannot recognize the \"space\".</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#12-fgets","title":"1.2: fgets()","text":"<pre><code>fgets(name,sizeof(name),stdin);\n</code></pre> <ul> <li>fgets() can be use to input the string.</li> <li>Notes that it can accept the \"space\", but there will be an additional \"return\" in the end.</li> <li>A pointer can be use to delete the final \"return\":</li> </ul> <pre><code>char *find;//a pointer of the string\nfgets(name,sizeof(name),stdin);\nfind = strchr(name,'\\n');//a function in string.h which can be used to return the address of the first place of '\\n'\n*find = '\\0';\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#2-output","title":"2: Output","text":""},{"location":"NOTES/Stage_1/Coding/C/#21-common-use-of-printf","title":"2.1: Common use of printf()","text":"<pre><code>// Print the intrigue\nprintf(\"%d\",&amp;a);// output intrigue\nprintf(\"%d %d\",&amp;a,&amp;b);//output with space between them\n// Print the float number\nprintf(\"%e\",123.456);// The result will be 1.23456e+002\nprintf(\"%f\",123.456);//Print 123.456000, six digits in the right side of point\n// Print the String and characters\nprintf(\"%s\\n\",\"hello world\");//The conversion specifier 's' will terminated at '\\0'.\nprintf(\"%p\\n\",ptr);// The '\\p' can be used to print the address of a pointer points to.\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#22-using-flags-in-the-printf-format-control-string","title":"2.2: Using Flags in the printf format control string","text":"<pre><code>printf(\"%10s%10d%10c%10f\\n\\n\", \"hello\", 7, 'a', 1.23);\n// Using the right justifying \nprintf(\"%-10s%-10d%-10c%-10f\\n\", \"hello\", 7, 'a', 1.23);\n// Add a '-' can make it to left justifying\nprintf(\"%+d\\n%+d\\n\", 786, -786);\n// Add '+' to the positive number in the result \nprintf(\"% d\\n% d\\n\", 547, -547);\n// Add' ' to the result \nprintf(\"%#o\\n\", c);\n// Add prefix 0 to the octal value\nprintf(\"%#x\\n\", c);\n// Add prefix 0x to the hexadecimal numbers\nprintf(\"%09d\\n\", 452);\n// Add prefix '0' to the numbers\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#3-reorient-the-inputoutput","title":"3: Reorient the input/output","text":""},{"location":"NOTES/Stage_1/Coding/C/#31-use-fopen","title":"3.1: Use 'fopen'","text":"<pre><code>FILE *f = fopen(\"PATH\",\"r\")// The file path and \"r\" means read only\nfgets(string,length,f);\nfscanf(f,\"%d\",&amp;x);\n//same for fprintf()\nfclose(f);\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#32-use-freopen","title":"3.2: Use 'freopen'","text":"<pre><code>freopen(\"PATH\",\"r\",stdin);//use the standard input \nfreopen(\"PATH\",\"w\",stdout);\nfclose(stdin);\nfclose(stdout);\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#33-use-ifstream-or-ofstream","title":"3.3: Use 'ifstream' or 'ofstream'","text":"<pre><code>ifstream name; // 'i' for input or read\nname.open(\"PATH\");\nname &gt;&gt; a; // read the name file to variable 'a'\nname.flush();//clear the buff area\nname.close();// close the file\nofstream write;//'o' for output or write\nwrite.write(\"PATH\");\nwrite &lt;&lt; a; // write the output into file\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#ii-data-types","title":"II: Data Types","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-introduction","title":"1: Introduction","text":""},{"location":"NOTES/Stage_1/Coding/C/#2-variables","title":"2: Variables","text":"<ul> <li>Variables are names used to refer a location in memory that holds a value.</li> <li>Formally, a variable is a symbol or name associated with a fixed physical address (L- VALUE), which denotes a value (R-VALUE).</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#21-type-int","title":"2.1: Type: Int","text":"<ul> <li>The int type differs from the intrigues in maths.</li> <li>It can be short int (16 bits) or long int (32 bits).</li> <li>The highest bit used to save the sign. (minus or plus)</li> <li>Note that the result of '/' between int will also be an int.</li> <li>Note that 'a=++i' means 'a=(++i)' while 'a=i++' means '(a=i)++'.</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#22-type-float-and-double","title":"2.2: Type: Float and double","text":"<ul> <li>Float: Single precision, 32-bits</li> <li>Double: Double precision, 64-bits</li> <li>Note that the result of '/' between float and double will be float and double.</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#23-type-char","title":"2.3: Type: Char","text":"<ul> <li>In the C language (unlike other languages) the type char does not denote a new data type, but it is equivalent to the domain of values represented in one byte (range 0-255);</li> <li>The integer value is the numeric value of the character in the code ASCII.</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#24-type-boolean","title":"2.4: Type: Boolean","text":"<ul> <li>In C programming value 0 means FALSE and Non-zero means TRUTH. <pre><code>x||y;// or\nx&amp;&amp;y;// and\n!x;// not\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#25-type-string-and-character-arrays","title":"2.5: Type: String and character arrays","text":"<ul> <li>Strings (chunks of text) are represented through an array of chars - structured pre- defined data type.</li> <li>The first place of the array is '0' instead of '1'. <pre><code>char s[10];//10 is the length of the string, s is the pointer to the beginning of the array\nchar a[]=\"hello_\";\na[5]='\\0';// the '\\0' means the end of the string\nprintf(\"%s\",a);// the output will be 'Hello' cause it ended in advance.\n</code></pre></li> <li> <p>Note that compare every letters in a word one by one can be used to do the dictionary order. <pre><code>#include&lt;string.h&gt;\nstrcmp(\"a\",\"b\");//which can return a number show the '&gt;','&lt;','=' relation\n</code></pre></p> </li> <li> <p>In C++, we use an advanced type 'string', which no longer need to define the size.</p> </li> </ul> <pre><code>#include&lt;string&gt;\nstring s;//define the string\nstring s_1;\nint size = s.length();//get the length of string\nint i;// string 's' cannot be visited using the index simply, which would be declared later\ns_1.append(1,s[i]);//append can be used to append\n</code></pre> <ul> <li>Note that the \"string\" type cannot br treated as the character array simply:</li> </ul> <pre><code>string s_1 = \"test\";\nchar a[10] = \"test\";\n// Both the string and char[] can be \"viewed\" using the index simply\ncout &lt;&lt; char[0]; // output will be 't'\ncout &lt;&lt; string[0]; // the output will be 't' as well \n</code></pre> <ul> <li>For the 'string' type, we can use 'stringstream' type to do type change:</li> </ul> <pre><code>stringstream string_stream;\nstring s = \"2333\";\nint a;\nstring_stream &lt;&lt; s;// write the s to the string_stream\nstring_stream &gt;&gt; a;// write the string_stream to int a;\nstring_stream.clear();// clear the stringstream after usage\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#26-symbolic-names-and-constant","title":"2.6: Symbolic names and Constant","text":"<pre><code>#define a 100;//define global constant\nconstant int N = 10;//define local constant\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#iii-conditional-statement","title":"III: Conditional statement","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-if-else-statement","title":"1: If-else statement","text":"<pre><code>if (result==0)//only one if to make the condition\n{\n    printf(\"Hello World!\");\n}\n----------\nif(result==0)//use if-else to express different outputs in different conditions\n{\n    printf(\"Yes\");\n}\nelse\nprintf(\"No\");\n----------\nif(result==0)//nested if-else\n{\n    printf(\"Yes\");\n}\nelse\n{\n    if(result==1)\n    { \n        printf(\"No\");\n    }\n    else\n    printf(\"Unknown\");\n}\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#2-switch-statement","title":"2: Switch statement","text":"<ul> <li>Switch-case statement can be use to do multiple choices. <pre><code>switch(getchar())\n{\n    case 'Y':printf(\"Yes\\n\");break;\n    case 'N':printf(\"No\\n\");break;\n    default: printf(\"Unknown\\n\");\n}\nswitch(getchar())\n{\n    case 'Y'://omit this line will let 'Y' and 'y' be same.\n    case 'y':printf(\"Yes\\n\");break;\n    default: printf(\"No\\n\");\n}\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#iv-loop","title":"IV: Loop","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-while-loop","title":"1: while Loop","text":"<pre><code>while(scanf(\"%d\",&amp;a)==1)//add the inputs continually\n{\n    sum+ = a;//save the sum\n    if(a&lt;0){\n        break;// Terminate the loop when a&lt;0\n    }\n    if(a=0){\n        continue;//skip this loop can continue to next\n    }\n    count++;//save the counts of the numbers\n}\nprintf(\"%d\",sum);\n----------------------\ndo\n{\n    sum+ = a;//save the sum\n    if(a&lt;0){\n        break;// Terminate the loop when a&lt;0\n    }\n    if(a=0){\n        continue;//skip this loop can continue to next\n    }\n    count++;//save the counts of the numbers\n} \nwhile(count&lt;10);//the loop can only do 10 times\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#2-for-loops","title":"2: For Loops","text":"<pre><code>for(i = 0; i &lt; count; i++)//initial,condition and increments\n{\n    int a;\n    scanf(\"%d\", &amp;a);\n    sum += a; \n}\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#vfunctions","title":"V\uff1aFunctions","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-define-a-function","title":"1: Define a function","text":"<pre><code>void example(char str[])//non-return function\n// The function Signature\n{\n//the main part\n}\nint sum(int x,int y){//type,name,parameters\n    return a+b;//the return value\n}\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#2-library-function","title":"2: Library Function","text":""},{"location":"NOTES/Stage_1/Coding/C/#21-ctypeh","title":"2.1: ctype.h","text":"<pre><code>isdigit();//check if is a decimal digit\nisalpha();//check if is a letter\nisupper();//check if is a uppercase letter\nislower();//check if is a lowercase letter\nisspace();//check if a character is white-space (space, tab, newline, etc.)\nispunct();//check if a character is a punctuation character.\ntolower();//convert a letter to lowercase\ntoupper();//convert a letter to uppercase\niscrtrl();//check if it is control character\nispunct();//check if it is a printing character rather than space, digit or a letter\nisprint();//check if it is the character visitable on screen\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#22-stringh","title":"2.2: string.h","text":"<pre><code>strlen();//return the length of string\nstrcmp();//compare the two strings\nstrstr(\"hello\",\"ello\");//return the position where the second string in the first one\nstrcpy(first,second,n);// same as \"first\" = \"second\" (n is the byte number)\nsizeof(); //return the length of string or array, for the pointer will return '8' in Mac (windows/linux '4')\nstrtod();//convert string to double\nstrtol();//convert string to long\nstroul();//convert the string to unsigned long and its second parameter (pointer) return the part cannot be converted\nfgets();//read the line of the text\nputs();//print the string with a '\\n'\nstrcat(first.second);//append the second one at the end of the first one\nstrchr(*s1,c);//Located the first occurrence of c in the first string and returned a pointer to c\nstrcspn();//Return the length of string 1 containing no characters from string 2\nstrpbrk();//Search the first string argument for the first occurrence of any character in its second string argument.\nstrrchr();// Search the last occurrence of the specified character in a string.\nstrspn();// determine the length of initial part of the string in its first string taht contain only characters from second arguments\nstrtok(string,\" \");//used to separate the sentence into words (tokens).\n\n// Below is memory operation functions\n\nmemcpy();//copy a specified number of bytes from second pointer into the first pointer.\nmemove();//like memcpy, but allows bytes from one part of a string to be copied into another part of the same string even if overlap.\nmemset(void * string,char 'ch',int n);//copies the value of the byte in its second argument into the first n bytes of the objects,can be used to initialize the array with '0' more efficiently\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#23-mathh","title":"2.3: math.h","text":"<pre><code>sqrt();\npow();\nsin();\nlog();\nfabs();\nceil();//round up to the closest int\nfloor();//round down to the closest\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#24-recursive-function","title":"2.4: Recursive function","text":"<ul> <li>Function in C allowed to all themselves which is known as recursion. <pre><code>int numberOfDigits(int x)\n{\n // Base case\nif (x &lt; 10) return 1;\n     // Recursive case\n    return numberOfDigits(x / 10) + 1;\n}\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#25-libraries","title":"2.5: Libraries","text":""},{"location":"NOTES/Stage_1/Coding/C/#3-main-function","title":"3: Main function","text":"<ul> <li>We can also define the arguments of main function:</li> </ul> <p><pre><code>int main(int argc, char *argv[]){}\n// 'argc' is the number of arguments passed in command line (cmd)\n//'argv' is an array storing pointers, each pointer is the string you input in cmd mode\n// The argv[0] will be the address of the file\n</code></pre> - Using the main function arguments, we can pass the value when executing the code file:</p> <p><pre><code>string s = string(argv[1]);\nif(s == \"-a\")\n{\n    cout&lt;&lt;\"The number you pass is :\"&lt;&lt;s&lt;&lt;endl;\n}\n</code></pre> In cmd mode, after the compile with g++, type in: <pre><code>./example.out -a 100\n</code></pre> The result will be 100.</p>"},{"location":"NOTES/Stage_1/Coding/C/#4-scope-of-variables","title":"4: Scope of variables","text":"<ul> <li>A scope is an area of visibility of a defined name.</li> <li>Scope can also be nested.</li> <li>One variable can also overshadow names in nested scopes.</li> <li>A variable only takes up memory while it is in scope, and deleted when it goes out of the scope.</li> <li>Blocks \\(\\approx\\) Scope</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#5-call-by-value-and-call-by-reference","title":"5: Call-by-value and Call-by-reference","text":"<ul> <li>Call-by-value <pre><code>double half(double input)\n// function can not manipulate the parameters and it is copied in memory\n{\nreturn input/2;\n}\nint main()\n{\ndouble var = 5;\ndouble half_of_var = half(var);\n}\n</code></pre></li> <li>Call-by-reference</li> </ul> <pre><code>void half(double &amp; input)\n// the function can manipulate the arguments\n{\ninput /= 2;\n}\nint main()\n{\ndouble var = 5;\nhalf(var);\n}\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#6-the-array-as-function-input","title":"6: The array as function input","text":"<pre><code>int sum(int arr[],int size){}\n// the dimension can be empty\ndouble print(const int array[][5][10]) {}\n// the multi-dimension arrays can only leave one empty\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#7-function-overloading","title":"7: Function overloading","text":"<ul> <li>Possible to create multiple functions with the same name but different argument list (number of parameters, type of parameters, order of parameters).</li> </ul> <pre><code>double norm(double a, double b)\n{\nreturn a*a + b*b;\n}\ndouble norm(double a, double b, double c)\n{\nreturn a*a + b*b + c*c;\n}\n</code></pre> <ul> <li>A variant of function overload is given the arguments default values.</li> </ul> <pre><code>double integerPower(double, int = 2);\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#8-lambda-functions","title":"8: Lambda functions","text":""},{"location":"NOTES/Stage_1/Coding/C/#vi-arrays-and-application","title":"VI: Arrays and application","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-array","title":"1: Array","text":"<p><pre><code>char a[3];//a[1],a[1],a[2], note that the index from '0'\nint a[2][2];//two-dimension array\nprintf(\"%d\",a[1][1]);//output as a variable\nint c[2]={1,2};//initial directly\nint a[2]={1};//is equal to {1,0}\nint c[]={1,2};//the initialism will define its size\n// The address of two-dimension array a[M][N] can be expressed as a[i] = a[0]+ i x N x sizeof(TYPE)\n</code></pre> * Use 'size_t' to define the loop variable 'i' which could avoid array overflow. (mostly '%u' or '%lu').</p>"},{"location":"NOTES/Stage_1/Coding/C/#2-linear-search","title":"2: Linear search","text":"<ul> <li>How to find the position of a given value in an array <pre><code>int linearsearch(const int a[],int size,int value)\n{\n    for(int i=0;i&lt;size;i++)\n    {\n        if(a[i]==value){\n            return i;\n        }\n        else\n        return -1;//express the function failed\n    }\n}\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#3-binary-search","title":"3: Binary search","text":"<ul> <li>Find the position of the value of a sorted array. <pre><code>int binarySearch(const int a[],int start, int end, int value)\n{\nif (start &gt; end)//the prerequisite is sorted\n{\n    return -1;\n}\nint middle = (start + end) / 2;\nif (a[middle] == value)\n{\n    return middle;\n}\nif (a[middle] &gt; value)// find the right part\n{\n    return binarySearch(a, start, middle - 1, value);\n}\nelse\n    return binarySearch(a, middle + 1, end, value);//find the left part\n}\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#4-sorting","title":"4: Sorting","text":""},{"location":"NOTES/Stage_1/Coding/C/#41-swap-sort","title":"4.1: Swap Sort","text":"<pre><code>void SwapSort(int a[],int size)\n{\n    for(int i=0;i&lt;size;i++)//sort from the first digit\n    {\n        int k=i;//use 'k' to save i\n        for(int j=i+1;i&lt;size;j++)//check the next digit\n        {\n            if(a[j]&lt;a[i])\n            {\n                k=j;\n            }\n            int tmp=a[i];//tmp to save a[i]\n            a[i]=a[k];//swap a[i] and a[j]\n            a[k]=tmp;\n        }\n    }\n}\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#42-quicksort-in-c","title":"4.2: QuickSort in C","text":"<ul> <li>The prototype of qsort function:</li> </ul> <pre><code>void qsort(void *base,int nelem,unsigned int width,int(* pfCompare)(const void *, const void *));\n// base: the beginning address of unsorted array\n// nelem: the numbers of array\n// width: the bit size of each element\n// pfCompare: the beginning address of compare function\n</code></pre> <ul> <li>The rule of compare function:</li> </ul> <pre><code>int compare(const void * elem1,const void * elem2);\n// If * elem1 should before the elem2, the return value is minus int.\n// If * elem1 should after the elem2, the return value should be plus int.\n// If each of them in the first is acceptable, the return value is 0.\n</code></pre> <ul> <li>The example of compare function:</li> </ul> <pre><code>int compare(const *void elem1,const void * elem2)\n{\n    unsigned int * p1, * p2;\n    p1 = (unsigned int *) elem1;\n    // Note that \"*elem1\" unavailable\n    p2 = (unsigned int *) elem2;\n    return (*p1 % 10)-(*p2 % 10);\n    // the sorting rule is the first digit \n} \n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#vii-files-and-pointers","title":"VII: Files and Pointers","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-files","title":"1: Files","text":""},{"location":"NOTES/Stage_1/Coding/C/#11-input-and-output-of-files","title":"1.1: Input and Output of files","text":"<pre><code>FILE *f = fopen(\"numbers.txt\", \"r\");//use a pointer to open the file, 'r' for read\nfscanf(f, \"%d\", &amp;a);//fscanf for input\nif (f == NULL) //NULL means the file does not exit\n{ \n    printf(\"Error: cannot open file\\n\"); \n    return 1; \n    }\nfclose(f);//fclose for closing the file\nFILE *out = fopen(\"sum.txt\" , \"w\");\n//'w' for write\nfprintf(out, \"%d\\n\", sum);//fprintf for output\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#12-fgets_1","title":"1.2: fgets()","text":"<pre><code>FILE *f = fopen(\"modules.txt\", \"r\");\nfgets(s, size, f);//note that fgets() will end the input at '\\n' and can only read size-1, cause the last digit is '\\0'.\nwhile(fgets(s, MAX, f))// fgets() can be used to calculate the line numbers\n{\nif (strlen(s) == MAX - 1 &amp;&amp; s[MAX - 2] != '\\n')\n{\n    printf(\"Error: buffer overflow\\n\");\n    fclose(f); \n    return 1;\n}\n    count++; \n}\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#2-pointers","title":"2: Pointers","text":""},{"location":"NOTES/Stage_1/Coding/C/#21-operation-of-pointers","title":"2.1: Operation of Pointers","text":"<pre><code>int x=5;\nint *p;//define a pointer\np=&amp;x;//a pointer without a '*' can only access an address(with '&amp;')\n*p=42;//access the pointer directly\nx--;//now the value of x is 41\n//note that pointers can only contain same data type!\nint *q;\nq=p+1;//if the address of p is 100, then q address will be 104(+1 means plus 4 bytes)\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#22-relationship-between-array-and-pointers","title":"2.2: Relationship between array and pointers","text":"<pre><code>int vet[10];//define an array\nprintf(\"%p %p\",vet,&amp;vet[0]);//will print two same address\nint *pi;\npi=vet;//is equal to \npi=&amp;vet[0];\n*(pi+3)=28;//the fourth of the array is defined as 28\npi++;//change that pi takes the second place of the array\n//Note that vet is a constant pointer\nint a[]; int *p;\n// The name of array 'a' is a constant pointer, which points to a[0], the type of a[] is 'TYPE *'\np=a;// point 'p' to the a[0]\n*p=10;// a[0] = 10\n*(p+1)=20;// a[1] = 20;\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#23-the-way-using-and","title":"2.3: The way using '&amp;' and '*'","text":"<p>The '&amp;' is a binary operator which used to return the address of its operand. The * is the dereference operator, return  the object to which its operand points to.</p> <p>For example:</p> <pre><code>int x=5;\nint *xPr;\nxPr=&amp;x;// The pointer 'xPr' points to address of 'x'\nprintf(\"%d\",xPr);// Print the value stored in address of xPr (same as 'x')\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#24-using-the-const-qualifier-with-pointers","title":"2.4: Using the 'const' qualifier with Pointers","text":"<p>Use the qualifier 'const' can avoid the parameters being changed when used by pass-by-reference. (The modification of parameters will lead to complier error)</p> <p>When pass a pointer to a function, the pointer and data can be 'const' or 'non-const', so will provide four situations.</p> <ul> <li>Non-const Pointer to non-const data:</li> </ul> <p><pre><code>#include&lt;ctype.h&gt;\nvoid convertToUppercase(char *sPtr) \n{\n while (*sPtr != '\\0')\n    {\n    *sPtr = toupper(*sPtr);\n    ++sPtr;\n    }\n}\nconvertToUppercase(string);\n</code></pre> When defining a non-const character in function, so we can use toupper() to change what the pointer points to, then use '++' to move the location of the pointer.</p> <ul> <li>Non-const Pointer to const data: </li> </ul> <p><pre><code>void printCharacters(const char *sPtr)\n {\n    for (; *sPtr != '\\0'; ++sPtr) //no initialize\n    { \n        printf(\"%c\", *sPtr);\n    }\n }\n</code></pre> In this case, the const pointer 'sPtr' points to cannot be changed, so we can't operate the '*Ptr', but can change the location of 'sPtr' using '++'.</p> <ul> <li>Const Pointer to non-const data:</li> </ul> <p><pre><code>#include &lt;stdio.h&gt;\nint main(void)\n{\n int x; \n int y;\n // ptr is a constant pointer to an integer that can be modified\n // through ptr, but ptr always points to the same memory location\n int * const ptr = &amp;x;\n\n *ptr = 7; // allowed: *ptr is not const\n ptr = &amp;y; // error: ptr is const; cannot assign new address\n}\n</code></pre> The non-const data means the value pointer points to can be changed '*ptr=7', but the location (address) cannot be changed (line 404 will be a complier error).</p> <ul> <li>Const Pointer to const data:</li> </ul> <pre><code>int main(void)\n{\n int x = 5; // initialize x\n int y; // define y\n // ptr is a constant pointer to a constant integer. ptr always\n // points to the same location; the integer at that location\n // cannot be modified\n const int *const ptr = &amp;x; // initialization is OK\n printf(\"%d\\n\", *ptr);\n *ptr = 7; // error: *ptr is const; cannot assign new value\n ptr = &amp;y; // error: ptr is const; cannot assign new address\n }\n</code></pre> <p>Both the data and pointer are const type, so neither the value nor the location can be changed, or else will produce the error.</p>"},{"location":"NOTES/Stage_1/Coding/C/#25-array-of-pointers","title":"2.5: Array of Pointers","text":"<p>The elements of array can be composed of pointers in C, the most common situation is using the strings of array. As the type string is actually a pointer points to the beginning of the string. </p> <p>For example:</p> <pre><code>const char *suit[4] = {\"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\"};\n</code></pre> <p>In this way, we define the array with four strings as elements.</p>"},{"location":"NOTES/Stage_1/Coding/C/#26-pointers-to-functions","title":"2.6: Pointers to functions","text":"<p>We can use pointers that point to a function (actually the beginning address of function),</p> <p>such as: <pre><code>int (*pf)(int a,char b);\n// pf is the name of pointer\n</code></pre></p> <p>We can also use the pointers which point to functions in function parameters. (pass-by-reference)</p> <p>Such as: </p> <p><pre><code>void bubble(int work[], size_t size, int (*compare)(int a, int b) );\n</code></pre> In this example, the pointer 'compare' being used to call another outside function 'compare'.</p>"},{"location":"NOTES/Stage_1/Coding/C/#27-function-pointers-in-array","title":"2.7: Function Pointers in Array","text":"<p>As the string array we have talked about above, we can also store the pointers to function in array.</p> <p><pre><code>void (*f[3])(int) ={function1,function2,function3};\n</code></pre> In this way, an array with three function-pointers is defined. </p>"},{"location":"NOTES/Stage_1/Coding/C/#28-pointer-to-a-pointer","title":"2.8: Pointer to a pointer","text":"<pre><code>int *p;\nint **pp;//define a pointer points to a pointer\np=&amp;n;\npp=*p;// the pp points to *p\nprintf(\"%d\",*(*pp));// *(*pp) is n\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#29-void-pointer","title":"2.9: Void Pointer","text":"<pre><code>double d = 3.14;\nvoid *p = &amp;d;// void can be initialized or assigned by any type of variables\n// Note that for the void * type pointer p, '*p','++p','--p','p-n' have no meaning.\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#viii-structure-in-c","title":"VIII: Structure in C","text":""},{"location":"NOTES/Stage_1/Coding/C/#1-introduction_1","title":"1: Introduction","text":"<ul> <li>A kind of aggregates of many different type of variables, commonly usd to define the record in file.</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#2-structure-definitions","title":"2: Structure Definitions","text":"<ul> <li>This a prototype of structure:</li> </ul> <pre><code>struct employee \n// The employee is the structure tag\n{\nchar firstName[20];\nchar lastName[20]; \nunsigned int age;\nchar gender;\ndouble hourlySalary;\n// All the variables in the braces are the members of the structure, which can be different types\n};\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#21-self-referential-structures","title":"2.1: Self-referential structures","text":"<ul> <li>The only to reference the structure in itself is using the pointer points to itself:</li> </ul> <pre><code>struct employee2 {\nchar firstName[20];\nchar lastName[20];\nunsigned int age;\nchar gender;\ndouble hourlySalary;\nstruct employee2 teamLeader; // ERROR struct employee2 *teamLeaderPtr; // pointer\n};\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#22-defining-the-variables-of-structures-types","title":"2.2: Defining the variables of structures types","text":"<ul> <li>The definition of structures creates a new type that used to define variables of other types:</li> </ul> <pre><code>struct card acard, deck[52], *cardPtr;\n// aCard is a variable of type struct card\n// deck[52] is an array in the struct\n// * cardPtr is a pointer in this struct\n</code></pre> <ul> <li>The another way to define a structure is using comma after the braces:</li> </ul> <pre><code>struct card {\n    char *face;\n    char *suit;\n} aCard, deck[52], *cardPtr;\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#23-operations-that-can-be-performed-on-structures","title":"2.3: Operations that can be performed on structures","text":"<ul> <li> <p>Assign struct variables to struct variables of the same type.</p> </li> <li> <p>Taking the address of a struct variable.</p> </li> <li> <p>Accessing the members of a struct members</p> </li> <li> <p>Using the sizeof operator.</p> </li> <li> <p>NOTE that '==' or '!=' can not be used, cause the size of data of particular type is machine dependent.</p> </li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#3-initializing-structures","title":"3: Initializing structures","text":"<ul> <li>Structures can be initialized using intializer lists as with array.</li> </ul> <p><pre><code>struct card {\n    char *face;\n    char *suit;\n};\nstruct card aCard = {\"Three\",\"Hearts\"};\n</code></pre> * The other members uninitialized will be set as '0' or 'NULL' for pointers.</p>"},{"location":"NOTES/Stage_1/Coding/C/#4-accessing-structure-members-with-and-","title":"4: Accessing Structure Members with . and -&gt;","text":"<ul> <li>'.' is called the dot operator which can access member; '-&gt;' is called the pointer operator which can access the member by reference.</li> </ul> <pre><code>struct card {\n    char *face;\n    char *suit;\n};\nint main(void)\n{\n    struct card aCard;// define a 'card' structure named 'aCard'\n    aCard.face = \"Ace\";\n    aCard.suit = \"Spades\";\n    struct card *cardPtr = &amp;aCard;\n    // assign address of aCard to a pointer\n    printf(\"%s\\n\",aCard.face);\n    // using '.' print the member\n    printf(\"%s\\n\",cardPtr-&gt;face);\n    // using '-&gt;' print the member\n    printf(\"%s\\n\",(*cardPtr).face);\n    // using '*' print the member\n}\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/C/#5-using-structures-with-functions","title":"5: Using Structures with Functions","text":"<p>Structures may be passed to functions by:</p> <ul> <li>Passing individuals structures members.</li> <li>passing an entire structures.</li> <li>Passing a pointer to a structure.</li> </ul>"},{"location":"NOTES/Stage_1/Coding/C/#6-typeof","title":"6: Typeof","text":"<ul> <li>The keyword typedef provides a mechanism for creating alias for previously defined data types.</li> <li> <p>Names for structure types are often defined with typeof to create shorter type names.</p> </li> <li> <p>For example, the statement:</p> </li> </ul> <pre><code>typedef struct card Card;\n// defines the new type name Card as a synonym for the type struct card\n\ntypedef struct {\n    char *face;\n    char *suit;\n}Card;\n// In this way we can create the structure type Card without the need for a separate typedef statement.\n</code></pre> <ul> <li>After that, 'Card' can now be used to declare variables pf type struct card as:</li> </ul> <pre><code>Card deck[52];\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/Matlab/","title":"MATLAB Basic","text":""},{"location":"NOTES/Stage_1/Coding/Matlab/#i-basic-matlab-functions-matrix-and-simultaneous-equations","title":"I: Basic Matlab functions, Matrix and simultaneous equations","text":""},{"location":"NOTES/Stage_1/Coding/Matlab/#1-elementary-functions","title":"1: Elementary Functions","text":"<ul> <li>Use ^ for power</li> <li>Use sqrt() for root</li> <li>exp() for exponential</li> <li>asin for \\(sin^-1\\)</li> <li>log for ln</li> <li>log10 and log2 for \\(log_{10}\\) and \\(log_{2}\\)</li> <li>nthroot(x,n) for the nth  real root of x</li> <li>abs for absolute value</li> <li>complex(a,b) for construct the complex number a+bi</li> <li>Real() and imag() for the real part or the imaginary part</li> <li>pi for \\(\\pi\\)</li> </ul>"},{"location":"NOTES/Stage_1/Coding/Matlab/#2-the-operations-of-the-matrix-and-simultaneous-equations","title":"2: The operations of the matrix and simultaneous equations","text":"<ul> <li>Use the 'space' or ',' to type the elements in a line, and use ';' to change the line</li> <li>To create a 3 \\(\\times\\) 3 identity matrix:     <pre><code>x=[1 0 0;0 1 0;0 0 1];\n</code></pre></li> <li>Use the ' to find the transpose of the matrix</li> <li>Use '+,-,*' to calculate</li> <li>If \\(AX=B\\), X=\\(A^{-1}*B\\)=inv(A)*B=A\\B</li> <li>Use A(a,b) to extract the element in row(a),col(b)</li> <li>Use A(1,:) to extract all the first line of A, while use A(:,1) to extract all the first column</li> </ul>"},{"location":"NOTES/Stage_1/Coding/Matlab/#ii-plot-data-and-functionsread-data-from-excel-data-sheet-and-do-integration","title":"II: Plot data and functions,read data from excel data sheet and do integration","text":""},{"location":"NOTES/Stage_1/Coding/Matlab/#1-create-m-file-and-plot-data","title":"1: Create m-file and plot data","text":""},{"location":"NOTES/Stage_1/Coding/Matlab/#11-create-m-file","title":"1.1: Create m-file","text":"<ul> <li>Use the matlab and click the 'New'</li> <li>Use editor like vscode to create '.m' files</li> </ul>"},{"location":"NOTES/Stage_1/Coding/Matlab/#12-plot-data-of-dots-and-functions","title":"1.2: Plot Data of dots and functions","text":"<ul> <li>Plot data from several dots: <pre><code>x=[1,2,3,4,5,6,7,8];%define x\ny=[2,9,28,65,126,219,343,513];%define y\nplot(x,y,'b--') %plot('x','y','colour'+'symbol')\n</code></pre></li> <li>Colour specification:<ul> <li>y for yellow;</li> <li>r for red;</li> <li>g for green;</li> <li>b for blue;</li> <li>w for white;</li> <li>k for black;</li> </ul> </li> <li>Typical symbols:<ul> <li>'o' for circle;</li> <li>'x' for x;</li> <li>'-' for doted line;</li> <li>'s' for square;</li> <li>'d' for diamond;</li> </ul> </li> <li>Define a function and plot a function:<ul> <li>Use the @ method: <pre><code>y=@(x)1+2*x+x.^3; % Add '.' when express power or fraction\ny([1,2,3]) % Output the value of y\nZ=@(x,y)x.^2+y.^2 % Two variable function\nZ([1,3],[2,4]) %Output the Z\n</code></pre></li> <li>Plot a function: <pre><code>% Method 1;\nx=[1:100]; % The continuous number between 1~100\ny=1./x+2*sin(x);\nplot(x,y,'r-');\n% Method 2;\nfigure(1);% Create a figure windows, '1' just a number\ny=@(x)1./x+2*sin(x); %Define a function\nfplot(y,[1,100],'r') % The second part is the range of x-axis\n</code></pre></li> </ul> </li> <li>The way to plot two functions in one image: <pre><code>plot(x,y,'b-');\nhold on;\nplot(v,t,'d-')\n</code></pre></li> <li>Add axis labels,legend and title: <pre><code>xlabel('Times(s)');\nylabel('Distance(m)');\nlegend('Measured data','Fitted'); % Follow the order of the plot\ntitle('Analysis of Distance vs Time') % Add these things after all the plot\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/Matlab/#2-do-the-integration-using-dots-and-functions","title":"2: Do the integration using dots and functions","text":"<p><pre><code>% The integration of several dots\nx=[1,2,3];\ny=[2,4,6];\nplot(x,y,'r*');\nZ=trapz(y)\n% The integration of a function\nsyms x; % define the variable x\nyy=x.^2-x+4;% Define a function\nz2=int(yy,x,1,8);% $\\int_1^8(x^2-x+4)dx$\ndouble(z2) %Find the answer rounded to two points\n</code></pre> * Read data from excel sheet <pre><code>% Firstly, add the target file to the matlab folder or path\nData=xlsread('filename.xlsx',1,'A1:C10'); % '1' for the sheet 1, 'A1:C10' for the range\nx=Data(:,1); % Extract the first column\ny=Data(:,2); % Extract the second column\nplot(x,y,'r-')\n</code></pre></p>"},{"location":"NOTES/Stage_1/Coding/Matlab/#iii-fit-the-data-with-a-polynomial-function-and-define-the-polynomial-function-using-polyval","title":"III: Fit the data with a polynomial function and define the polynomial function using polyval","text":""},{"location":"NOTES/Stage_1/Coding/Matlab/#1-fit-the-data-with-a-polynomial-function","title":"1: Fit the data with a polynomial function","text":"<pre><code>x=[1,2,3];\ny=[2,4,6];\nP1=polyfit(x,y,2);% '2' refer to 2nd order function\ny_fitted=p(1)*x.^2+p(2)*t+p(3);% The power decrease but the coefficient increase\n% The other way is to use @ method\ny_fitted=@(x)polyval(p,x);\nfigure(2); %open a image windows\nplot(x,y,'r*');\nhold;\nfplot(y_fitted,[1,10],'b-')\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/Matlab/#2-solve-polynomial-equations","title":"2: Solve polynomial equations","text":"<ul> <li>The polynomial equations are like this: \\(2x^3+x^2+5=0\\) <code>matlab p=roots([2,1,1,5]) %the snip of the lacked coefficient p=p(image(p)==0) %find the real roots</code></li> </ul>"},{"location":"NOTES/Stage_1/Coding/Matlab/#3-roots-of-arbitrary-functions","title":"3: Roots of arbitrary functions","text":"<pre><code>f1=@(x)x.^2+4*sin(x)-16; %define the function\nfplot(f1,[-6,6]);\ngrid on\n% plot the function and find the approx roots\nx1=fzero(f1,-4);\nx2=fzero(f1,4);\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/Matlab/#iv-differential-partial-differential-and-solving-differential-equations","title":"IV: Differential, partial differential and solving differential equations","text":""},{"location":"NOTES/Stage_1/Coding/Matlab/#1-differential-and-partial-differential","title":"1: Differential and partial differential","text":"<ul> <li>Differential: <pre><code>syms x; \ny=x.^2+x; %use the function\np=diff(y)\n</code></pre></li> <li>Partial Differential: <pre><code>syms x y;\nz=x.^2*y.^2+x*y;\ndiff(z,x);\ndiff(z,y);\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/Matlab/#2-use-dsolve-to-solve-differential-equations","title":"2: Use dsolve to solve differential equations","text":"<ul> <li>First order: <pre><code>syms x;\nd=dsolve('Dy=sin(x)+3*x',x);\n% Get a G.S\nd1=dsolve('Dy=sin(x)+3*x','y(0)=1',x);\n% Get the P.S\n</code></pre></li> <li>Second order: <pre><code>syms x;\ns=desolve('D2y=2*x-y','y(0)=0','Dy(0)=0',x) %Put the limits in the middle\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/Matlab/#3-use-ode23-to-solve-odes","title":"3: Use ode23 to solve ODEs","text":"<ul> <li>y is a single variable of x: <pre><code>f=@(x,y)sin(x)+y;\node23(f,[0,2],1);\n% [0,2] for the range of the solutions and '1' for y(0)=1\n% This command could plot the solutions\n[x,y]=ode23(f,[0,2],1);\n% Print the solutions\n</code></pre></li> <li>y is the vector variable of x: such as \\(\\displaystyle\\frac{d}{dx} \\begin{pmatrix} y_1\\\\ y_2\\\\ y_3 \\end{pmatrix}=\\begin{pmatrix} x \\\\ x+2\\\\ x-4 \\end{pmatrix}\\)</li> </ul> <pre><code>f=@(x,y)[x;x+2;x-4];\node23(f,[0,5],[1;0;-1])\n% [0,5] for the range and [1;0;-1] for the initial numbers\n[x,y]=ode23(f,[0,5],[1;0;-1])\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/Matlab/#v-inputoutputfor-loop-and-if-loop","title":"V: Input,output,for-loop and if-loop","text":""},{"location":"NOTES/Stage_1/Coding/Matlab/#1-display-and-input","title":"1: Display and Input","text":"<pre><code>disp('Please enter the input');\na=input('Please enter the number:')\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/Matlab/#2-for-loop","title":"2: For-loop","text":"<pre><code>x=2;\nfor n=1:2 % No need to add ';'\n% '1' for the first corner number and '2' for circulate times\nx=sqrt(1+2*x);% The limit situations\nend\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/Matlab/#3-if-loop","title":"3: If-loop","text":"<pre><code>if(a1==0)&amp;&amp;(a2==0) % No need to add the ';'\ndisp('Nothing');\nelseif(a1==0)&amp;&amp;(a2==1)\ndisp('Right');\nelse\ndisp('Not valid');\nend\n</code></pre>"},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/","title":"Python Data Analysis","text":""},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/#i-import-the-relevant-python-libraries","title":"I: Import the relevant Python Libraries","text":"<pre><code># Import 'display' in 'Ipython.display'\nfrom IPython.display import display\nimport os \nfrom pathlib import Path # OS and Pathlib libraries can be used to read data \nimport pandas as pd # Pandas library can be used to create dataframes.\nimport matplotlib.pyplot as plt # matplotlib is used to plot graphs\nimport seaborn as sns\nfrom scipy import stats # scipy and seaborn are needed for statistical analysis \n</code></pre>"},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/#ii-reading-in-and-processing-the-data","title":"II: Reading in and Processing the data","text":"<ul> <li>Pandas can be used to read in csv data. <pre><code>path = Path('data/northern_stage') # The variable 'path' stores the path named 'data/northern_stage'\nelectric = pd.read_csv(path/\"electric.csv\") # Use pd.read_csv to read the csv file into the variable 'electric'\n</code></pre></li> <li>Check the data frame created: <pre><code>electric # Type in the variable directly can preview the data frame created \nelectric.head()\nelectric.tail()# Preview the first or last 5 lines of the sheet\nprint(electric.columns.tolist()) # print the ' electric' to list form \n</code></pre></li> <li>Set the data  numerical form: <pre><code>pd.set_option('display.float_format',lambda x: '%.2f' % x) # Set the format for display in float number\nelectric.describe() # Get the brief description of the electric \n</code></pre></li> <li>Set the date form: <pre><code>electric['Date'] = pd.to_datetime(electric['Date']) # Use pd.to_datetime to change the 'Date' column to the proper format (YY-MM-DD)\n</code></pre></li> <li>Sort the dataframes: <pre><code>electric = electric.sort_values(by='Date',ascending = False) # Sort the 'electric' by 'date' in ascending (or default descending )\n</code></pre></li> <li>Merge the data in one data frame <pre><code>df = pd.merge(gas, electric, suffixes = (\"_gas\", \"_electric\"), on=\"Date\", how=\"outer\")\n# Use pd.merge () to store a new 'df' variable, merge the dataframes 'gas' and 'electric', parameter 'on=\" \"' denote the same (keep) part, suffixes(\"_x\",\"_y\") means add marks at the end of the same column from different dataframe, how ='' means union from each \ndf = pd.merge( # merge the previous 'df' and an 'renamed' water \n    df,\n    water.rename( \n        columns={col: col + \"_water\" for col in water.columns if col != \"Date\"}\n    ),\n    # use the 'DataFrame.rename' function to modify the dataframe 'water', 'columns='can be used to add '_water' to the old dataframe except 'Date' column\n    on=\"Date\",\n    how=\"outer\",\n)\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/#iii-visualizing-the-data","title":"III: Visualizing the Data","text":""},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/#1-plotting-a-histogram","title":"1: Plotting a histogram","text":"<ul> <li>We use Pandas ' plot.hist function to plot the histogram: <pre><code>electric.Unit.plot.hist(figsize=(8,8), color=\"orange\", ec=\"white\", bins=range(0,300000,1000)) # Use the function to plot \nplt.title('title')\nplt.xlabel('X')\nplt.ylabel('Y') # Set axis labels\nplt.xlm(0,30000) # Set the x-lim\nplt.show() # show the plot \n</code></pre></li> <li>Use the diff() function to calculate difference and create new column to store the data  <pre><code>electric['reading_gaps']=electric.Date.diff().dt.total_seconds().divide(24*3600)\n#Create a new column 'reading_gaps' store the gaps of date , use 'dt.total_seconds()' change the date form to seconds\n</code></pre></li> <li>Use divide() create the consumption ratio with time: <pre><code>electric['cost_per_unit'] = electric['Calculated Cost'].divide(electric['Unit'])\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/#2-visualizing-time-series-data","title":"2: Visualizing time series data","text":"<ul> <li>Use DataFrame.plot() to plot data with time: <pre><code>electric.plot(x='Date', y='Reading', figsize=(8,8))\nplt.xlim('2010-03-01','2020-03-20')\n# Set the date limit of x\nplt.show()\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/#3-visualizing-using-bar-charts","title":"3: Visualizing using Bar charts:","text":"<ul> <li>Using bar charts to visualizing the categorical and numerical data  <pre><code>ax = df.groupby(df.Date.dt.month)[['Unit_gas', 'Unit_electric']].mean().plot.bar(figsize=(8,8))\n# Define a new DataFrame to store, use groupby() to select the with data with group 'month' (using dt.month to pick 'month' in date), use '.mean()' to find the mean value.\nax.set_title('')\nax.set_xlabel()\nax.set_ylabel()\n# Use DataFrame.set_title to set the title\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_1/Coding/PythonDataAnalysis/#4-correlations-in-data","title":"4: Correlations in data","text":"<ul> <li>Using corr function to get the correlation: <pre><code>electric.corr()\n</code></pre></li> <li>Visualizing the correlation: <pre><code>sns.set(rc={\"figure.figsize\":(12, 8)})\n# sns for 'seaborn', '.set' can set the layout. \nslope, intercept, r_value, p_value, std_err = stats.linregress(electric['Unit'], electric['Carbon'])\n# stats.linregress() can be use to calculate the slope, intercept and the r_value \n</code></pre> <pre><code>//Test for git\n# include&lt;stdio.h&gt;\nint main()\n{\n    printf(\"%s\",\"Test\");\n    return 0;\n}\n</code></pre></li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/","title":"AC Electrical Power and Conversion","text":""},{"location":"NOTES/Stage_2/acElectrical/#i-ac-systems","title":"I: AC Systems","text":""},{"location":"NOTES/Stage_2/acElectrical/#1-conventions","title":"1: Conventions","text":""},{"location":"NOTES/Stage_2/acElectrical/#11-convention-for-magnetic-flux-and-current","title":"1.1: Convention for magnetic flux and current","text":"<ul> <li> <p>'X' in circle means into paper.</p> </li> <li> <p>'.' in circle means out of paper.</p> </li> <li> <p>Right-hand (coil) rule can justify the direction of flux generated by current.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/acElectrical/#12-structure-of-single-phase-generator","title":"1.2: Structure of Single phase generator","text":"<ul> <li> <p>The armature coil 1 &amp; 2 in the fixed stators.</p> </li> <li> <p>The filed coil curled out of two different current are in the swirling rotor.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#13-flux-linkage-and-induced-voltage","title":"1.3: Flux linkage and induced voltage","text":"<ul> <li>The flux linkage \\(\\psi = N\\phi\\). We omit the coil number \\(N\\) at this condition. As:</li> </ul> \\[ \\phi = Li  \\] <ul> <li>If we note that \\(i = i_m\\cos{(\\omega t)}\\):</li> </ul> \\[ \\phi = \\phi_{mutual}\\cos{(\\omega t)} \\] <ul> <li>According to Faraday's Law:</li> </ul> \\[ V = -N\\displaystyle\\frac{d\\phi}{dt} \\]"},{"location":"NOTES/Stage_2/acElectrical/#2-ac-phasors","title":"2: AC Phasors","text":""},{"location":"NOTES/Stage_2/acElectrical/#21-expression-of-ac-phasor","title":"2.1: Expression of AC phasor","text":"<ul> <li> <p>For a signal \\(f(t) = A\\cos{(\\omega t + \\phi)}\\), it can be represented in complex plane as \\(F = Ae^{j\\phi}\\) or \\(F =A\\angle \\phi\\)</p> </li> <li> <p>For example of V and I, if is is for a capacitor, which V is lagging the I, the expression would be:</p> </li> </ul> \\[ V = V_{rms}\\angle \\theta_v \\\\ I = I_{rms}\\angle \\theta _v + \\theta _i \\] <p></p> <ul> <li> <p>Note the reminder tips of capacitor V lagging and inductance I lagging: \"CIVIL\".</p> </li> <li> <p>Usually take positive angle in anti-cw and take voltage as reference point and lock it to the horizontal or vertical axis.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#22-returning-phasors-to-time-domain","title":"2.2: Returning phasors to time domain","text":"<p>For example, a signal named '\\(F=e^{j\\phi}\\)' in complex domain, to change it back to time domain, we can multiply it by \\(e^{j\\omega t}\\):</p> \\[ Fe^{j\\omega t} = Ae^{j(\\omega t +\\phi)} = A\\angle (\\omega t+ \\phi) \\] <p>This expression can be simplified to:</p> \\[ f(t) = A[\\cos{(\\omega t+\\phi)}+j\\sin{(\\omega t+ \\phi)}] \\] <p>If we only take the real part:</p> \\[ f(t) = A\\cos{(\\omega t +\\phi)} \\]"},{"location":"NOTES/Stage_2/acElectrical/#23-ac-current-flux-and-the-induced-voltage","title":"2.3: AC current, flux and the induced voltage","text":""},{"location":"NOTES/Stage_2/acElectrical/#3-properties-of-ac-power","title":"3: Properties of AC Power","text":""},{"location":"NOTES/Stage_2/acElectrical/#31-single-phase-power","title":"3.1: Single Phase Power","text":"<ul> <li> <p>Using the sink convention, which power into the load is positive.</p> </li> <li> <p>The instantaneous power flow into circuit is:</p> </li> </ul> \\[ P=v.i \\] <ul> <li>For AC case, </li> </ul> \\[ v = \\hat{V}\\cos{(\\omega t)} \\\\ i = \\hat{I}\\cos{(\\omega t -\\phi)} \\] <ul> <li>Bring the V and I together:</li> </ul> \\[ P = \\hat{V}\\hat{I}[\\displaystyle\\frac{1}{2}(1+\\cos{(2\\omega t)}\\cos{(\\phi)}+\\frac{1}{2}\\sin{(2\\omega t)}\\sin{(\\phi)}] \\] <ul> <li>The PULSATING part deliver the active power and the OSCILLATING part deliver the reactance power which just goes back and forth. The stored energy in inductance or capacitor is \\(\\frac{1}{2}CV^2\\) OR \\(\\frac{1}{2}LI^2\\)</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/acElectrical/#32-complex-power","title":"3.2: Complex Power","text":"<p>\\(\\hat{I}\\cos{(\\omega t-\\phi)}\\) and \\(\\hat{V}\\cos{(\\omega t)}\\) can be expressed as:</p> \\[ I = \\frac{\\hat{I}}{\\sqrt{2}}-j\\frac{\\hat{I}}{\\sqrt{2}}+j0 \\] <ul> <li>So the complex is defined as:</li> </ul> \\[ S = P + jQ = VI* \\] <ul> <li>\\(I*\\) is called the Conjugate I, which change the imaginary part symbol to \"-\":</li> </ul> \\[ I* = \\frac{\\hat{I}}{\\sqrt{2}}\\cos{(\\phi)}+j\\frac{\\hat{I}}{\\sqrt{2}}\\sin{(\\phi)} \\] <ul> <li>So the complex power is defined as:</li> </ul> \\[ S = \\frac{\\hat{V}\\hat{I}}{2}\\cos{(\\phi)} + j\\frac{\\hat{V}\\hat{I}}{2}\\sin{(\\phi )} \\] <ul> <li> <p>The unit of complex power is unit voltamps(VA), the unit of active power is just Watts and the unit of reactive power is Volt-Ampere Reactive (VAR).</p> </li> <li> <p>The power factor is defined using the power triangle:</p> </li> </ul> \\[ \\cos{(\\phi)} = \\frac{Power}{Volt-Amperes} \\] <p></p> <ul> <li> <p>\\(S = \\sqrt{P^2+Q^2}\\)</p> </li> <li> <p>\\(Q = VI\\sin{(\\phi)}\\)</p> </li> <li> <p>\\(P = VI\\cos{(\\phi)}\\)</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#32-resistance-and-impedance","title":"3.2: Resistance and Impedance","text":"<ul> <li> <p>Compared to \\(V=IR\\) in DC circuits, Z is used so \\(V = IZ\\).</p> </li> <li> <p>For a pure resistance, Z = R.</p> </li> <li> <p>For a pure inductance:</p> </li> </ul> \\[ Z = jX_L = j\\omega L \\] <p>\\(X_L\\) is defined as inductive reactance.</p> <ul> <li>For a pure capacitance:</li> </ul> \\[ Z = -jX_C = -\\frac{j}{\\omega C} \\] <p>\\(X_C\\) is defined as capacitive reactance.</p> <ul> <li>Note that the resistance and reactance measured in ohm.</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#33-power-with-an-resistive-load","title":"3.3: Power with an Resistive Load","text":"<ul> <li> <p>Voltage and current are in phase, so the \\(\\phi = 0\\) and the power factor is 1.</p> </li> <li> <p>\\(P = V_{rms}I_{rms}\\)</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#34-power-with-an-inductive-load","title":"3.4: Power with an Inductive Load","text":"<ul> <li> <p>Current lags the voltage by 90 degrees according to the calculation.</p> </li> <li> <p>The average power delivered should be '0', and anergy is released then stored each 1/2 cycle.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#35-power-with-a-capacitive-load","title":"3.5: Power with a capacitive Load","text":"<ul> <li> <p>Current leads the voltage according to the calculation.</p> </li> <li> <p>The average power is '0'.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#36-meaning-of-reactive-power","title":"3.6: Meaning of Reactive Power","text":"<ul> <li> <p>Reactive power is the power that helps create and sustain the electric and magnetic fields required by alternating current.</p> </li> <li> <p>The reactive power in AC circuit depends on phase angle.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#4-single-phase-ac-to-three-phase-ac","title":"4: Single phase AC to Three phase AC","text":""},{"location":"NOTES/Stage_2/acElectrical/#41-single-phase","title":"4.1: Single phase","text":"<ul> <li>To get more current spread out the winding, we add one pair of coil:</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#42-simple-three-phase-generator","title":"4.2: Simple three phase generator","text":"<ul> <li>As \\(I_1+I_2+I_3 =0\\), the return path can be removed:</li> </ul> <ul> <li>The three phases using 3 cables and use machine better with 0.96 use factor, compared to single and four phase machines.</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#43-vector-representation-of-three-phase-generator","title":"4.3: Vector representation of three-phase generator","text":"<ul> <li> <p>\\(V = V_{rms}\\angle{0}\\)</p> </li> <li> <p>\\(V = V_{rms}\\angle{-120}\\)</p> </li> <li> <p>\\(V = V_{rms}\\angle{-240}\\)</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/acElectrical/#44-star-connection-to-line-connection","title":"4.4: Star connection to Line connection","text":"<ul> <li> <p>Line voltage: measure across two lines.</p> </li> <li> <p>Line current: measure through a line.</p> </li> </ul> \\[ V_{LINE} = \\sqrt{3} \\times V_{PHASE} \\] \\[ I_{LINE} = I_{PHASE} \\] <ul> <li>If the phases are the same or balanced:</li> </ul> \\[ P = \\sqrt{3}V_LI_L\\cos{\\phi} \\]"},{"location":"NOTES/Stage_2/acElectrical/#45-delta-connection-to-line-quantities","title":"4.5: Delta connection to line quantities","text":"\\[ I_{LINE} = \\sqrt{3} \\times I_{PHASE} \\] \\[ V_{LINE} = V_{PHASE}  \\] <ul> <li>If all phases are the same or balanced:</li> </ul> \\[ P = \\sqrt{3}V_LI_L\\cos{\\phi} \\]"},{"location":"NOTES/Stage_2/acElectrical/#46-power-in-three-phase-system","title":"4.6: Power in three phase system","text":"<ul> <li> <p>Active Power: \\(P = \\sqrt{3}V_LI_L\\cos{(\\phi)}\\)</p> </li> <li> <p>Reactive Power: \\(Q = \\sqrt{3}V_LI_L\\sin{(\\phi)}\\)</p> </li> <li> <p>Apparent Power: \\(S = \\sqrt{3}V_LI_L*\\)</p> </li> <li> <p>Note that by default we use line values and total power (apparent power) with rms value.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#47-3-phase-power-systems","title":"4.7: 3 Phase Power Systems","text":"<ul> <li> <p>Generation: there is a limit on generator voltage (22-23.5 kV)</p> </li> <li> <p>Transmission: Voltage stepped up for efficiency (275/400 kV)</p> </li> <li> <p>Distribution: voltage stepped down for underground cables and safe load.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#48-single-line-representation","title":"4.8: Single line representation","text":"<ul> <li> <p>The system is usually balanced if the system is healthy.</p> </li> <li> <p>No need to think of 3 phases, loom at a single phase instead.</p> </li> <li> <p>Assume balanced conditions, i.e. only one phase is used.</p> </li> <li> <p>Large loads are designed to be balanced.</p> </li> <li> <p>Single phase load are distributed evenly to balance the 3-phase load on the grid.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#49-per-unit-calculation","title":"4.9: Per-unit calculation","text":"<ul> <li> <p>Base (reference) value choice:</p> <ul> <li>Usually base of S and V are chosen and I and Z are derived.</li> </ul> </li> <li> <p>The unit of per-unit will be '\\(p.u.\\)'.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#ii-electrical-magnetic-interaction-and-vf-drives","title":"II: Electrical magnetic interaction and VF drives","text":""},{"location":"NOTES/Stage_2/acElectrical/#1-rotor-and-armature-interaction","title":"1: Rotor and armature interaction","text":""},{"location":"NOTES/Stage_2/acElectrical/#11-field-interaction-and-torque","title":"1.1: Field interaction and torque","text":"<ul> <li> <p>The stator and rotor magnetic fields have to be in the correct position and the correct magnitude to create demanded torque.</p> </li> <li> <p>Electrical supply has to be sufficient to create enough speed and torque.</p> </li> <li> <p>Torque has to be sufficient to overcome mechanical resistance, inertia to the required speed.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#12-3-phase-synchronous-machine","title":"1.2: 3 phase synchronous machine","text":"<ul> <li>As the phase shift of 120 degrees between three phases, if we analyses at \\(t=0\\):</li> </ul> <ul> <li>So we note \\(F\\) as the magnetomotive force, defined as \\(F = NI\\):</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#13-3-phase-rotating-field","title":"1.3: 3 phase rotating field","text":"<ul> <li> <p>3 stationary pulsating fields sum giving a rotating field constant in magnitude moving forwards at one pole pitch per half cycle.</p> </li> <li> <p>Mathematically expressed as \\(\\frac{3}{2}\\Phi e^{j\\omega t}\\)</p> </li> <li> <p>A two pole field moves 1 revolution per electrical cycle - 50 Hz means 50 revs/sec.</p> </li> <li> <p>A four pole field rotates 1/2 revolution per electrical cycle.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#2-variable-frequency-electric-drives","title":"2: Variable frequency electric drives","text":"<ul> <li> <p>The large efficiency gains should be made when process operate at variable speed.</p> </li> <li> <p>This need a variable frequency and variable voltage, so that requires a variable frequency converter.</p> </li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#21-power-electronics-devices","title":"2.1: Power Electronics Devices","text":"<ul> <li> <p>Mosfet: Low voltage rating (up to 1.5k), high speed.</p> </li> <li> <p>BJT: largely replaced by IGBT.</p> </li> <li> <p>IGBT: Moderate voltage rating and speed.</p> </li> <li> <p>GTO Thyristor: High V (6k), low speed, used in high power and low frequency devices.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/acElectrical/#22-chopper-controlled-dc-motor","title":"2.2: Chopper controlled DC motor","text":"<ul> <li> <p>Switching turning on / off to control the voltage.</p> </li> <li> <p>Voltage across the motor is pulsating.</p> </li> <li> <p>The motor responds to the average voltage.</p> </li> <li> <p>Resistance limits the steady state current.</p> </li> <li> <p>Inductance limits the speed of current rise.</p> </li> <li> <p>The chopper circuit can produce a sine wave if we alter the pulse width dynamically:</p> </li> </ul> <p></p> <ul> <li>Apply PWM voltage to the motor winding, the inductance will provide the sin AC current.</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#23-3-phase-voltage-source-inverter","title":"2.3: 3-phase voltage source inverter","text":"<ul> <li> <p>The capacitor and diodes can provide the path when the lower side switch connected.</p> </li> <li> <p>The phase connection can be expressed as:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/acElectrical/#24-pwm-voltage-and-current-waveform","title":"2.4: PWM voltage and current waveform","text":"<ul> <li>As the voltage in one phase can be \\(\\frac{2}{3}V_{DC}\\), \\(\\frac{1}{3}V_{DC}\\), 0, \\(-\\frac{1}{3}V_{DC}\\) and \\(-\\frac{2}{3}V_{DC}\\), changing the switch we can get the phase voltage as:</li> </ul> <ul> <li>By altering the modulation signal (change the switch altering frequency) we can change AC frequency.</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#25-sine-triangle-pwm-spwm","title":"2.5: Sine-triangle PWM (SPWM)","text":"<ul> <li>Combine the square wave of triangle wave in high frequency, the modulated sin wave can be produced:</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#26-implementing-pwm-in-logic","title":"2.6: Implementing PWM in Logic","text":"<ul> <li>DSP and micro-controller usually have built in hardware to produce PWM:</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#27-shoot-through-fault","title":"2.7: Shoot-through fault","text":"<ul> <li>To avoid T1 and T2 connect at the same time causing the short circuit (shoot-through fault), a small time delay called deadline is inserted by the controller.</li> </ul>"},{"location":"NOTES/Stage_2/acElectrical/#28-variable-frequency-3-phase-convert-overview","title":"2.8: Variable frequency 3 phase convert Overview","text":""},{"location":"NOTES/Stage_2/analogElectronic/","title":"Analog Electronics","text":""},{"location":"NOTES/Stage_2/analogElectronic/#i-introduction-overview","title":"I: Introduction &amp; Overview","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-introduction","title":"1: Introduction","text":"<ul> <li> <p>Consider what can affect these circuits (noise etc)</p> </li> <li> <p>Consider how to improve designing circuits </p> </li> <li> <p>Focus on 2 examples:</p> <ul> <li>instrumentation amplifier for sensors</li> <li>Power amplifier </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#2-basic-laws","title":"2: Basic Laws","text":""},{"location":"NOTES/Stage_2/analogElectronic/#21-kirchoffs-law","title":"2.1: Kirchoff's Law","text":""},{"location":"NOTES/Stage_2/analogElectronic/#22-the-diode-basics","title":"2.2: The diode basics","text":""},{"location":"NOTES/Stage_2/analogElectronic/#23-ideal-sources","title":"2.3: Ideal Sources","text":""},{"location":"NOTES/Stage_2/analogElectronic/#24-equivalent-circuits","title":"2.4: Equivalent circuits","text":""},{"location":"NOTES/Stage_2/analogElectronic/#25-small-and-large-signal-modelling","title":"2.5: Small and Large signal modelling","text":"<ul> <li> <p>The input signal can be separated to the large signal (DC component) and small signal (AC component).</p> </li> <li> <p>The DC component is called the DC bias (Quiescent point, Q point, or the operating point, bias point)</p> </li> </ul> <p></p> <p></p> <ul> <li>For BJT circuit like below:</li> </ul> <p></p> <ul> <li>Using \\(I_B\\), \\(I_C\\) and \\(V_{CE}\\) and the V-I curve of transistors, the Q point can be found:</li> </ul> <p></p> <ul> <li>The Q-point in the middle will be most proper.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#26-small-signal-conductance","title":"2.6: Small signal conductance","text":"<p>For AC model:</p> <p></p> <p>we tend to think in terms of conductance g:</p> \\[ \\frac{1}{r_{AC}} = g_{ac} = \\frac{\\Delta I_{AC}}{\\Delta V_{AC}} \\] <p>noted that we typically use \\(i_{ac}\\) and \\(v_{ac}\\) short for \\(\\Delta I_{AC}\\) and \\(\\Delta I_{AC}\\)\u3002</p> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#27-load-line-analysis","title":"2.7: Load line analysis","text":""},{"location":"NOTES/Stage_2/analogElectronic/#3-noise","title":"3: Noise","text":"<ul> <li> <p>Noise refers to unwanted signals.</p> </li> <li> <p>Noise can originate in the sensor, lines or amps.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#31-thermal-noise","title":"3.1: Thermal Noise","text":"<ul> <li> <p>Also known as Johnson-Nyquist noise.</p> </li> <li> <p>Thermal noise from random motions of electrons in conductors.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#32-shot-noise","title":"3.2: Shot noise","text":"<ul> <li> <p>Also known as Poisson noise.</p> </li> <li> <p>From the quantum nature of charge flow.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#ii-filters-bode-plots","title":"II: Filters &amp; Bode Plots","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-low-pass-filter","title":"1: Low Pass filter","text":"<ul> <li> <p>For resistance, \\(Z_R=R\\); for capacitance, \\(Z_C = X_C = \\frac{1}{j\\omega C} = \\frac{1}{2\\pi f C}\\)</p> </li> <li> <p>Low pass filter can be considered as a potential divider:</p> </li> </ul> \\[ V_{OUT} = V_{in}\\times (\\frac{Z_C}{Z_{total}}) \\] <p>The total impedance \\(Z_{total}\\) is given by:</p> \\[ Z_{total} = \\sqrt{R^2 +X_C ^2} \\] <p>So </p> \\[ V_{out} = V_{in} \\times (\\frac{X_C}{\\sqrt{R^2+X_c ^2}}) \\] <ul> <li>If we increase the frequency, the output voltage will be:</li> </ul> <p></p> <p>And the gain in dB = 20log(Vout/Vin):</p> <p></p> <ul> <li> <p>This plot is known as a Bode Plot.</p> </li> <li> <p>There is a frequency at which \\(X_c = R\\), which is know as the cut-off frequency (\\(f_c\\)).</p> </li> <li> <p>The cut-off frequency is 100 Hz as above.</p> </li> <li> <p>The gain in dB in \\(f_c\\) usually defines the band-width.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#2-high-pass-filter","title":"2: High Pass Filter","text":"<p>Use the same method, the formula is:</p> \\[ V_{out} = V_{in} \\times (\\frac{R}{\\sqrt{R^2 +X_c^2}}) \\] <ul> <li>If we increase the frequency, the output will be:</li> </ul> <p></p> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#3-multi-stage-filter","title":"3: Multi-stage Filter","text":"\\[ V_{out2} = V_{in1} * (\\frac{R_1^2}{R_1^2+X_{c1}^2}) \\]"},{"location":"NOTES/Stage_2/analogElectronic/#4-passive-bandpass-filter","title":"4: Passive bandpass filter","text":"<p>A band pass filter is to be constructed using RC components will only allow a range of frequencies to pass, calculating the </p> <ul> <li>Note that the high pass filter defines the lower threshold.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#iii-bjt-transistors-the-analog-perspective","title":"III: BJT transistors - the analog perspective","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-discrete-bjt-structure","title":"1: Discrete BJT structure","text":""},{"location":"NOTES/Stage_2/analogElectronic/#2-bjt-large-signal-operation","title":"2: BJT large signal operation","text":""},{"location":"NOTES/Stage_2/analogElectronic/#21-ebers-moll-model-for-bjt","title":"2.1: Ebers Moll model for BJT","text":"<p>For example of NPN:</p> <p></p> <p>where \\(\\alpha _F\\) is the forward current gain:</p> \\[ \\alpha _F = \\frac{I_C}{I_E} \\] <p>and </p> \\[ \\beta _F = \\frac{I_C}{I_B} \\] <p>with some operations we can also get the relation between \\(\\alpha\\) and \\(\\beta\\):</p> \\[ \\beta _F = \\frac{\\alpha _F}{1-\\alpha _F} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#22-driving-the-bjt-with-v_be-and-i_b","title":"2.2: Driving the BJT with V_BE and I_B","text":"<p>The collector current increases exponentially with \\(V_{BE}\\).</p> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#23-bjt-operating-regions","title":"2.3: BJT operating regions","text":""},{"location":"NOTES/Stage_2/analogElectronic/#iv-2-port-network","title":"IV: 2-port Network","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-two-port-analysis","title":"1: Two port analysis","text":"<ul> <li>Circuits are built from building blocks.</li> <li>Each of these blocks can defined has an input impedance and a Norton or Thevenin output stage as:</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#11-two-port-analysis-of-transistors","title":"1.1: Two port analysis of transistors","text":"<ul> <li>The common transistor types such as BJTs and MOSFETs operate by one terminal controlling the current flow between other 2 terminals. </li> <li>They are therefore current sources with control.</li> <li>For BJT, the base is controlled by a current so the impedance is almost just resistance.</li> <li>The output impedance is really just the resistance from collector to emitter if we ignore the small internal capacitance.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#12-two-port-analysis-of-mosfet","title":"1.2: Two port analysis of Mosfet","text":"<ul> <li> <p>For mosfet, the gate is controlled by a voltage so the impedance is just a capacitance.</p> </li> <li> <p>The output impedance is just resistance from source to drain.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#13-hybrid-pi-model","title":"1.3: Hybrid pi model","text":"<ul> <li>The 2 port model can be used as the basis for circuit simulator.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#14-h-parameter-model","title":"1.4: H parameter Model","text":"<ul> <li> <p>The H parameter model uses the input current as one of variables.</p> </li> <li> <p>H11 is the input impedance</p> </li> <li> <p>H12 is the usually assumed to 0.</p> </li> <li> <p>H21 is the gain.</p> </li> <li> <p>H22 is the output impedance of transistor.</p> </li> </ul> <p>H method be like:</p> \\[ \\left(\\begin{matrix}     V_1 \\\\     I_2 \\end{matrix}\\right)=\\left(\\begin{matrix}     h_{11} &amp; h_{12} \\\\     h_{21} &amp; h_{22}  \\end{matrix}\\right)\\left(\\begin{matrix}     I_1 \\\\     V_2  \\end{matrix}\\right) \\]"},{"location":"NOTES/Stage_2/analogElectronic/#2-bjt-amplifier","title":"2: BJT Amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#21-the-ideal-amplifier","title":"2.1: The ideal Amplifier","text":"<ul> <li> <p>Voltage gain = \\(A_{v} = \\frac{V_{out}}{V_{in}}\\)</p> </li> <li> <p>Current gain = \\(A_{i} = \\frac{I_{out}}{I_{in}}\\)</p> </li> <li> <p>Power gain = . \\(A_{p} = \\frac{P_{out}}{P_{in}}\\) </p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#22-th-way-to-build-amplifier","title":"2.2: Th way to build amplifier","text":"<ul> <li>For example, the common-emitter amplifier:</li> </ul> <ul> <li> <p>\\(I_E = I_C +I_B\\)</p> </li> <li> <p>Current gain \\(\\beta = \\frac{I_C}{I_B}\\)</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#23-bjt-single-transistor-amplifier","title":"2.3: BJT single transistor amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#24-bjt-ce-large-signal-summary","title":"2.4: BJT CE Large signal summary","text":"<ul> <li> <p>CE amplifier: \\(v_{in}\\) form base and \\(v_{out}\\) from collector.</p> </li> <li> <p>\\(C_{in}\\): AC isolation of input, preventing input from affecting Q point.</p> </li> <li> <p>\\(R_{B1}\\) and \\(R_{B2}\\): determine the base voltage independent of BJT types.</p> </li> <li> <p>\\(R_C\\): set the gain of circuit which cannot be too large.</p> </li> <li> <p>\\(R_{E1}\\): improve the impedance of the amplifier.</p> </li> <li> <p>\\(R_{E2}\\): Set the voltage level of Q point / make the output independent of \\(\\beta\\) </p> </li> <li> <p>\\(C_{out}\\): AC isolation of the output.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#25-transistor-biasing","title":"2.5: Transistor biasing","text":"<ul> <li>As \\(I_B = (V_CC-V_{BE})/R_{B1})\\), \\(I_B\\) is limited by \\(R_{B1}\\).</li> </ul> <ul> <li> <p>\\(R_E\\) will reduces the gain. </p> </li> <li> <p>We can also use the \\(R_{B}\\) to bias the \\(V_B\\), while pay for extra loss of power.</p> </li> </ul> <p></p> <ul> <li>Add the \\(C_E\\) as bypass capacitor.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#26-bjt-ce-amplifier-small-model-summary","title":"2.6: BJT CE amplifier - small model summary","text":""},{"location":"NOTES/Stage_2/analogElectronic/#27-bjt-ce-small-model-analysis","title":"2.7: BJT CE small model analysis","text":"<ul> <li>First, remove the capacitors (treated as wires) and the DC Vcc.</li> </ul> <ul> <li>Second, rearrange to small model.</li> </ul> <ul> <li> <p>\\(r_{\\pi}\\) and \\(r_0\\) is the resistance of BJT.</p> </li> <li> <p>\\(g_m = \\frac{i_c}{v_{BE}}\\), so \\(g_m v_{BE}\\) is the \\(i_c\\).</p> </li> <li> <p>Consider the input impedance:</p> </li> </ul> <p></p> <p>The input impedance \\(r_{in}\\) is defined as \\(r_{in} = \\frac{v_{in}}{i_{in}}=R_{B1}||R_{B2}||r_x\\). \\(r_x\\) is the impedance from transistor and \\(R_{E1}\\).</p> <p></p> <ul> <li> <p>\\(r_{in} = R_{B1} || R_{B2} || (r_{\\pi}+\\beta _FR_{E1})\\)</p> </li> <li> <p>Consider the output impedance, \\(r_{out} \\approx R_C || (r_0+R_{E1})\\), which is approx to \\(R_C\\).</p> </li> <li> <p>The voltage gain is given by \\(A_V=\\frac{v_{out}}{v_{in}}\\).</p> </li> </ul> <p></p> <ul> <li>\\(v_{out} = -i_c R_c = -\\beta_F i_b R_C\\)</li> </ul> \\[ \\begin{aligned}     v_{in} &amp;= v_{b} \\\\     &amp;= r_{\\pi}i_b + i_eR_{E1} \\\\     &amp;= i_b(r_{\\pi} + (\\beta _F +1)R_{E1}) \\end{aligned} \\] <p>so \\(A_V = \\frac{-\\beta _FR_C}{r_{\\pi} + \\beta _F R_{E1}}\\)</p> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#28-example-of-ce-bjt-analysis","title":"2.8: Example of CE BJT analysis","text":""},{"location":"NOTES/Stage_2/analogElectronic/#281-setting-up-the-dc-characteristics","title":"2.8.1: Setting up the DC characteristics","text":"<ul> <li> <p>The AC signal is assumed ton be small compared to the DC, so it can be considered later.</p> </li> <li> <p>The first step is to review the transistor data sheet and decide the Q point.</p> </li> <li> <p>The transistor curves can be generated using simulation software:</p> </li> </ul> <p></p> <ul> <li> <p>First, we assume that \\(V_{cc} = 10V\\) in this condition, then we choose \\(V_{CE} = 5V\\), almost half of \\(V_{CC}\\) is common. If we choose \\(I_b = 40\\mu A\\), then we can mark the Q point in the graph.  </p> </li> <li> <p>Then we can find that the \\(I_c\\) value and the gain (\\(\\frac{I_C}{I_B}\\)) can be defined.</p> </li> <li> <p>It would be reasonable to choose the line to make sure the Q point is in the m idle of the curve.</p> </li> <li> <p>The next step is to calculated the \\(R_C\\), which control the gain (the larger the \\(R_C\\) is, the larger the voltage \\(R_C\\) have will be larger, so that increase the gain). According to voltage divider, we assumed that \\(V_{RE1} + V_{RE2} = 1 V\\) to keep it small.</p> </li> <li> <p>The total voltage \\(V_{CC} = V_{RE1} + V_{RE2} + V_{CE} + V_{RC}\\), then \\(V_{RC}\\) can be calculated.</p> </li> <li> <p>Using the Ohm's Law, \\(R_C = \\frac{V_{RC}}{I_C}\\).</p> </li> <li> <p>Up to now, we have defined the value of \\(I_B\\), \\(I_C\\), \\(R_C\\) and the voltage cover two \\(R_E\\).</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#282-calculating-the-emitter-resistors","title":"2.8.2: Calculating the emitter resistors","text":"<ul> <li> <p>We know the \\(I_E = I_C + I_B\\) according to the KCL.</p> </li> <li> <p>Using Ohm Law on \\(I_E\\), we can find that \\(R_{E1} + R_{E2}\\) can be defined by \\(\\frac{1}{I_E}\\).</p> </li> <li> <p>We need a small value of \\(R_{E1}\\) so we define that \\(R_{E1} = 5 \\Omega\\). The other resistor can be calculated.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#283-calculating-the-bias-resistors","title":"2.8.3: Calculating the Bias resistors","text":"<ul> <li> <p>The bias resistors are in the circuit to ensure the base voltage. The current flowing down the \\(\\frac{R_{B1}}{R_{B2}}\\) chain is chosen to be many times that of \\(I_B\\). So we choose \\(I_{RB2} = 20 \\times I_B\\).</p> </li> <li> <p>As we know $V_{R_{B2}} = V_B = V_{RE1} +V_{RE2} + V_{BE} $, \\(V_{BE}\\) is given if the type of the transistor is vested.</p> </li> <li> <p>Using Ohm Law, the \\(R_{B2} = \\frac{V_{RB2}}{I_{RB2}}\\)</p> </li> <li> <p>Applying KCL, \\(I_{RB1} = I_{RB2} + I_B\\).</p> </li> <li> <p>The voltage across \\(R_{B1} = V_{CC} - V_{RB2}\\), so the \\(V_{RB1} = R_{B1} \\times I_{RB1}\\).</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#284-setting-up-the-ac-characteristics","title":"2.8.4: Setting up the AC characteristics","text":"<ul> <li>Using the two-port model to simplify the CE BJT, we can get the formula of the voltage gain:</li> </ul> \\[ A_V = \\displaystyle\\frac{-g_m R_C}{1+g_m(R_{E1} + R_{E2})} \\] <ul> <li> <p>We can find that the emitter resistors reduce the gain. However, the bypass capacitor helps as iof we choose the value of \\(C_E\\), it will short-cut \\(R_{E2}\\).</p> </li> <li> <p>The bypass capacitor is there making the effect of the larger emitter resistor disappear for the AC signal so it is in effect a kind of filter:</p> </li> </ul> \\[ f_C = \\frac{1}{2\\pi RC} \\] <p>So we can use:</p> \\[ f_C = \\frac{1}{2\\pi R_{E2} C_E} \\] <ul> <li> <p>If we want the frequencies above 20 Hz to pass through so we can take \\(f_C=20\\) Hz.</p> </li> <li> <p>Then we can calculate \\(C_E\\).</p> </li> <li> <p>The value of \\(C_{in}\\) and \\(C_{out}\\) can be choose depends on the type of signal.</p> </li> <li> <p>The \\(R_L\\) is also be chosen depends on conditions.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#29-common-collector-amplifier","title":"2.9: Common collector amplifier","text":"<ul> <li> <p>The output of CC is connected to the emitter.</p> </li> <li> <p>The gain of CC is approx to 1.</p> </li> <li> <p>High impedance in and low impedance out.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#v-fet-transistors","title":"V: FET Transistors","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-mosfet-large-signal-operation","title":"1: MOSFET large signal operation","text":"<ul> <li>Note that we discuss the enhancement mode only.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#11-mosfets-operation","title":"1.1: MOSFETs operation","text":""},{"location":"NOTES/Stage_2/analogElectronic/#12-bjt-vs-mosfet","title":"1.2: BJT vs MOSFET","text":""},{"location":"NOTES/Stage_2/analogElectronic/#13-saturation-drain-current-variance-with-v_gs","title":"1.3: Saturation drain current variance with \\(V_{GS\\)","text":""},{"location":"NOTES/Stage_2/analogElectronic/#14-channel-length-modulation","title":"1.4: Channel length modulation","text":""},{"location":"NOTES/Stage_2/analogElectronic/#15-summary","title":"1.5: Summary","text":""},{"location":"NOTES/Stage_2/analogElectronic/#2-mosfet-small-signal-operation","title":"2: MOSFET small signal operation","text":""},{"location":"NOTES/Stage_2/analogElectronic/#21-mosfet-complete-small-signal","title":"2.1: MOSFET complete small signal","text":""},{"location":"NOTES/Stage_2/analogElectronic/#22-mosfet-simplified-small-model","title":"2.2: MOSFET simplified small model","text":""},{"location":"NOTES/Stage_2/analogElectronic/#23-mosfet-operational-speed","title":"2.3: MOSFET operational speed","text":"<ul> <li> <p>Lets assume the dominant capacitance is the GS capacitance.</p> </li> <li> <p>The general formula for unity gain current frequency \\(f_T\\) for an R-C combination is given by: </p> </li> </ul> \\[ f_t = \\frac{1}{2\\pi RC} \\] <ul> <li>\\(r=\\frac{1}{g}\\) where g is conductance.</li> </ul> <p>So \\(f_t = \\frac{g}{2\\pi C}\\)</p> <ul> <li>If we only calculate the most significant \\(C_{GS}\\):</li> </ul> \\[ f_T = \\frac{g_m}{2\\pi C_{GS}} \\] <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#3-mosfet-single-transistor-amplifier","title":"3: MOSFET single transistor amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#31-mosfet-common-source-amplifier","title":"3.1: MOSFET Common source amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#32-mosfet-common-drain-amplifier","title":"3.2: MOSFET Common drain amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#4-mosfet-as-a-resistor-diode-connected-mosfet","title":"4: MOSFET as a Resistor (diode connected MOSFET)","text":""},{"location":"NOTES/Stage_2/analogElectronic/#41-diode-connected-mosfet","title":"4.1: Diode connected MOSFET","text":"<ul> <li> <p>\\(V_{DS} = V_{GS}\\), so \\(V_{DS} &gt; V_T\\), device is always in saturation.</p> </li> <li> <p>As the device is in saturation, so the drain current is given by:</p> </li> </ul> \\[ I_D = K(V_{GS} - V_T)^2 \\] <ul> <li>But we want to find the output voltage:</li> </ul> \\[ V_{OUT} = V_{DS} = $V_{GS$ \\] <p>Then we get:</p> \\[ V_{OUT} = V_T + \\sqrt{\\frac{|I_{sig}|}{K}} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#42-diode-connected-mosfet-as-active-resistor","title":"4.2: Diode connected MOSFET as active resistor","text":"<ul> <li>Connecting the gate to the drain means that \\(V_{DS}\\) controls \\(I_D\\), therefore the transconductance becomes the channel conductance, the total resistance is given by:</li> </ul> \\[ r = \\frac{1}{g_m +g_{mb} + g_{ds}} \\] <ul> <li>However, if the body effect is small, and we use long channel transistors, \\(g_m\\) becomes dominant:</li> </ul> \\[ r = \\frac{1}{g_m} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#43-active-resistor-potential-divider","title":"4.3: Active resistor potential divider","text":"<ul> <li> <p>\\(g_m = \\frac{dI_D}{dV_{GS}} = 2K[V_{GS} - V_T]\\).</p> </li> <li> <p>\\(K = \\frac{\\mu C_{ox}}{2}\\frac{W}{L}\\)</p> </li> <li> <p>Lets consider the strong inversion case:</p> </li> </ul> \\[ r = \\frac{1}{g_m} \\] <ul> <li>So for a potential divider:</li> </ul> \\[ V_{OUT} = \\frac{R_2}{R_1 + R_2}V_{DD} \\] <ul> <li>\\(V_{OUT}\\) can be altered by varying W and L in each transistor, this is ideal for integration into a micro-chip.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#vi-power-amplifier","title":"VI: Power Amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-power-amplifier-classes","title":"1: Power Amplifier classes","text":"<ul> <li> <p>Common emitter and common drain amplifier are considered as class A amplifiers - single active device (transistor)</p> </li> <li> <p>There are other classes:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#2-power-amplifier-classes-by-power-usage","title":"2: Power Amplifier classes (by power usage)","text":""},{"location":"NOTES/Stage_2/analogElectronic/#21-class-a-eg-common-emitter","title":"2.1: Class A - eg. Common Emitter","text":""},{"location":"NOTES/Stage_2/analogElectronic/#211-efficiency","title":"2.1.1: Efficiency","text":"<ul> <li> <p>we need to understand how efficient our amplifier are.</p> </li> <li> <p>Consider the common-emitter amplifier.</p> </li> <li> <p>To set up the amplifier, we first arrange the DC bias conditions, which puts the transistor at the Q-point and \\(I_B\\):</p> </li> </ul> <p></p> <ul> <li> <p>The red line is the load line and \\(i_c\\)(max) is \\(\\frac{V_{cc}}{R_L}\\) and B is \\(V_{cc}\\)</p> </li> <li> <p>As an AC signal is applied on top of the bias, the base current \\(I_B\\), travels up and down the load line. Imagine that the signal causes \\(I_B\\) to vary between the points M and N for example.</p> </li> <li> <p>That will cause \\(V_{CE}\\) and \\(I_C\\) to vary as the green waves.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#212-quality","title":"2.1.2: Quality","text":"<ul> <li> <p>There are other potential problems as well. The common emitter amplifier works well if the AC input signal is small.</p> </li> <li> <p>If the signal gets too large, then eventually the base current could \"hit\" either access axis (\\(V_{CE}\\) or I_C axes)</p> </li> <li> <p>In fact this problem becomes an issue as soon as the output signal reaches \\(V_{cc}~V_{CE-SAT}\\).</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#213-mosfet-clipping-distortion","title":"2.1.3: MOSFET clipping distortion","text":""},{"location":"NOTES/Stage_2/analogElectronic/#214-the-wrong-bias","title":"2.1.4: The Wrong Bias","text":"<ul> <li> <p>if the transistor is biased wrongly then the signal might also get clipped even if the AC input is small.</p> </li> <li> <p>Suppose for example, the Q point was chosen to be N by mistake. Then even for a small AC input, the output might be clipped in the negative half.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#215-frequency-effects","title":"2.1.5: Frequency Effects","text":"<ul> <li>The transistor will not amplify all frequencies equally - that can distort a more complex signal that has multiple frequencies.</li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#216-power-analysis-class-a","title":"2.1.6: Power analysis - class A","text":"<ul> <li> <p>Imagine common-emitter amplifier powering a resistive load.</p> </li> <li> <p>Then load receives the amplified \\(I_c\\) wave (green) with magnitude.</p> </li> <li> <p>The amplified wave is usually smaller than the quiescent current.</p> </li> <li> <p>In fact the amplified wave should never have a peak-peak current greater than 2\\(I_Q\\). So output power is much smaller than that consumed.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#217-class-a-amplifier-summary","title":"2.1.7: Class A amplifier: summary","text":""},{"location":"NOTES/Stage_2/analogElectronic/#22-class-b","title":"2.2: Class B","text":""},{"location":"NOTES/Stage_2/analogElectronic/#221-class-b-push-pull-amplifier","title":"2.2.1: Class B push pull amplifier","text":"<ul> <li> <p>To improve efficiency compared to a Class A amplifier, we may try to eliminate the dissipation at zero output. That means, we aim to design an amplifier whose dissipation is zero when \\(v_{in} = 0\\)</p> </li> <li> <p>The solution will be Class B push-pull output stage.</p> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#222-class-b-amplifier-crossover-distortion","title":"2.2.2: Class B amplifier crossover distortion","text":""},{"location":"NOTES/Stage_2/analogElectronic/#223-power-analysis-class-b","title":"2.2.3: Power analysis - Class B","text":""},{"location":"NOTES/Stage_2/analogElectronic/#224-summary","title":"2.2.4: Summary","text":""},{"location":"NOTES/Stage_2/analogElectronic/#23-class-ab","title":"2.3: Class AB","text":""},{"location":"NOTES/Stage_2/analogElectronic/#231-class-ab-power-amplifier","title":"2.3.1: Class AB power amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#232-crossover-distortion-improvement-in-class-ab","title":"2.3.2: Crossover distortion improvement in Class AB","text":""},{"location":"NOTES/Stage_2/analogElectronic/#233-summary","title":"2.3.3: Summary","text":""},{"location":"NOTES/Stage_2/analogElectronic/#vii-operational-amplifier","title":"VII: Operational Amplifier","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-introduction_1","title":"1: Introduction","text":"<ul> <li>Op-Amps are as general purpose amplifier:</li> </ul> <ul> <li>Two Golden rules :<ul> <li>Rule 1: the output attempts to do whatever is necessary to make the voltage between the two inputs zero.</li> <li>The input draw no current.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#2-classic-op-amp-circuits","title":"2: Classic op-amp circuits","text":"<ul> <li>Inverting Amplifier </li> </ul> \\[ \\frac{v_{out}}{v_{in}} = -\\frac{R_1}{R_1} \\] <ul> <li>Non-inverting Amplifier </li> </ul> \\[ \\frac{V_o}{v_i} = \\frac{R_2}{R_1} +1 \\] <ul> <li>Difference Amplifier </li> </ul> \\[ V_{o} = \\frac{R_2}{R_1}(V_2-V_1) \\] <ul> <li>Instrument Amplifier:</li> </ul> \\[ V_o = -(V_1-V_2)(1+\\frac{R_2}{R_1}\\times 2)\\frac{R_4}{R_3} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#3-feedback","title":"3: Feedback","text":"<ul> <li> <p>A: Basic amplifier gain</p> </li> <li> <p>f: Feedback gain factor </p> </li> <li> <p>\\(S_{out}\\): Output signal</p> </li> <li> <p>\\(S_e\\): Error signal</p> </li> <li> <p>\\(S_f\\): Feedback signal </p> </li> <li> <p>In negative, the feedback signal tries to negate the input, so it is termed error.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#31-feedback-gain","title":"3.1: Feedback Gain","text":"<p>For any amplifier, the output signal will be given by:</p> \\[ s_{out} = As_e \\] <p>where:</p> \\[ \\begin{cases}     s_e &amp;= s_{in} - s_f \\\\     s_f &amp;= fs_{out}     \\end{cases} \\] <p>where \\(f\\) is the feedback factor.</p> <p>So: \\(s_{out} = A(s_{in}-s_f) = A(s_{in}-fs_{out}\\)</p> <p>By definition:</p> \\[ A_f = \\frac{s_{out}}{s_{in}} = \\frac{A(s_{in}-fs_{out})}{s_{in}} = A - \\frac{A.fs_{out}}{s_{in}} \\] <p>So:</p> \\[ A_f = A - Af\\frac{s_{out}}{s_{in}} = A-AfA_f \\] <p>Finally:</p> \\[ A_f = \\frac{A}{1+Af} \\approx \\frac{1}{f} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#32-advantage-1-gain-sensitivity","title":"3.2: Advantage 1 - Gain sensitivity","text":"<p>If assume:</p> \\[ A = A\\pm \\delta A \\] <p>Bring back to the former formula:</p> \\[ A_f = \\frac{A \\pm \\delta A}{1+(A\\pm \\delta A)f} \\] <p>As long as \\(Af &gt;&gt; 1\\):</p> \\[ A_f \\approx \\frac{1}{f} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#33-advantage-2-eliminating-distortion","title":"3.3: Advantage 2 - Eliminating distortion","text":"<ul> <li>Suppose the basic amplifier is distortive. So the output does not give a sine wave for a sine wave input.</li> </ul> <ul> <li> <p>The gain is about 1/f. </p> </li> <li> <p>This gives a very good property of feedback amplifier in terms of eliminating distortion.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#34-advantage-3-noise-rejection","title":"3.4: Advantage 3 - noise rejection","text":"<ul> <li>Consider a noisy amplifier scenario (predicted conditions). It generates noise, such that:</li> </ul> \\[ s\\prime _e = s_e + \\tilde{v_n} \\] <ul> <li> <p>Where \\(\\tilde{v_n}\\) is the rms noise at the amplifier input.</p> </li> <li> <p>The easiest way to analyze this is to simply assume the input signal is a combination of signal \\(s_{in\\) and noise \\(\\tilde{v_n}\\)</p> </li> <li> <p>The signal to noise ratio is then defined as:</p> </li> </ul> \\[ SNR = \\displaystyle\\frac{Afs_{in}}{Af\\tilde{v_n}} = \\frac{s_{in}}{\\tilde{v_n}} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#35-cost-of-feedback","title":"3.5: Cost of Feedback","text":"<ul> <li> <p>Feedback comes with reduced gain, hence you may need to add a pre-amplifier to boost the gain.</p> </li> <li> <p>Wherever you have a loop, there is hazard of oscillation.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#36-frequency-response-open-loop","title":"3.6: Frequency response - open loop","text":"<p>For the amplifier without feedback, we can simply define the frequency response in terms of the first pole:</p> \\[ A(j\\omega) = \\frac{A_{LF}}{1+i\\omega/P_1} \\] <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#4-non-ideal-performance","title":"4: Non-ideal performance","text":""},{"location":"NOTES/Stage_2/analogElectronic/#41-slew-rate","title":"4.1: Slew rate","text":""},{"location":"NOTES/Stage_2/analogElectronic/#42-input-offset-voltage","title":"4.2: Input offset voltage","text":""},{"location":"NOTES/Stage_2/analogElectronic/#viii-digital-to-analog-conversion-back-again","title":"VIII: Digital to Analog Conversion (&amp; back again)","text":""},{"location":"NOTES/Stage_2/analogElectronic/#1-analog-digital-representation","title":"1: Analog &lt;-&gt; digital representation","text":""},{"location":"NOTES/Stage_2/analogElectronic/#2-accuracy-in-adcdac-conversion","title":"2: Accuracy in ADC/DAC conversion","text":"<p>Consider the two components of information in the signal:</p> <ul> <li> <p>Time: Accuracy is determined by the sampling rate (\\(\\Delta T\\))</p> </li> <li> <p>Amplitude: Accuracy is determined by the dynamic range resolution (\\(\\Delta S\\))</p> </li> </ul> <p>These will determine the rate of information the system to deal with, which is called the bit rate, defined by:</p> \\[ BR = information\\quad packet \\quad size \\times sampling \\quad rate \\] <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#3-nyquist-shannon-theorem","title":"3: Nyquist - Shannon theorem","text":"<p>Minimum sampling rate should be at least twice the highest data frequency of the analog signal:</p> \\[ f_{sampling} \\ge 2.f_{max} \\]"},{"location":"NOTES/Stage_2/analogElectronic/#4-adcdac-quantization-error-noise","title":"4: ADC/DAC Quantization error (noise)","text":"<p>\\(S_{out}\\) is affected by the discrete levels. It is not possible to match exactly, the error \\(S_{out} - S_{in}\\) is the quantization noise that has an amplitude of \\(\\pm \\frac{1}{2}\\) LSB.</p> <ul> <li>If all error values are equally likely the RMS quantization error is:</li> </ul> \\[ NOISE_{RMS} = \\frac{1}{\\sqrt{12}}LSB = 0.3LSB \\]"},{"location":"NOTES/Stage_2/analogElectronic/#5-adcdac-quantization-snr","title":"5: ADC/DAC Quantization SNR","text":""},{"location":"NOTES/Stage_2/analogElectronic/#6-digital-to-analog-conversion","title":"6: Digital to Analog conversion","text":""},{"location":"NOTES/Stage_2/analogElectronic/#61-core-principle","title":"6.1: Core principle","text":""},{"location":"NOTES/Stage_2/analogElectronic/#62-dac-system","title":"6.2: DAC system","text":"<p>Objective is to take a digital signal and convert it into an analog one. It can use a simple summing amplifier, which is know as a weighted resistor DAC.</p> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#63-weighted-resistor-dac","title":"6.3: Weighted resistor DAC","text":""},{"location":"NOTES/Stage_2/analogElectronic/#64-r-2r-ladder-network-dac","title":"6.4: R-2R Ladder network DAC","text":""},{"location":"NOTES/Stage_2/analogElectronic/#65-capacitive-dac","title":"6.5: Capacitive DAC","text":""},{"location":"NOTES/Stage_2/analogElectronic/#66-charge-scaling-dac","title":"6.6: Charge Scaling DAC","text":""},{"location":"NOTES/Stage_2/analogElectronic/#7-analog-to-digital-conversion","title":"7: Analog to digital Conversion","text":""},{"location":"NOTES/Stage_2/analogElectronic/#71-types-of-adcs","title":"7.1: Types of ADC's","text":"<ul> <li> <p>Flash ADC </p> </li> <li> <p>Sigma-delta ADC </p> </li> <li> <p>Successive approximation converter </p> </li> </ul>"},{"location":"NOTES/Stage_2/analogElectronic/#72-sample-and-hold-concept","title":"7.2: Sample and hold concept","text":""},{"location":"NOTES/Stage_2/analogElectronic/#73-comparator","title":"7.3: Comparator","text":""},{"location":"NOTES/Stage_2/analogElectronic/#74-flash-adc-operational-principle","title":"7.4: Flash ADC - operational principle","text":""},{"location":"NOTES/Stage_2/analogElectronic/#75-flash-adc-3-bit-adc","title":"7.5: Flash ADC -3 Bit ADC","text":""},{"location":"NOTES/Stage_2/analogElectronic/#76-half-flash-adc","title":"7.6: Half Flash ADC","text":"<p>If we need high resolution (high number of bits) but don't have the space for lots of components.</p> <p></p>"},{"location":"NOTES/Stage_2/analogElectronic/#77-sigma-delta-adc","title":"7.7: Sigma-delta ADC","text":""},{"location":"NOTES/Stage_2/analogElectronic/#78-successive-approximation","title":"7.8: Successive approximation","text":""},{"location":"NOTES/Stage_2/analogElectronic/#79-adc-comparison","title":"7.9: ADC Comparison","text":""},{"location":"NOTES/Stage_2/analogueReport/","title":"analogueReport","text":"Operational Amplifier Lab Report Ziyu Tian"},{"location":"NOTES/Stage_2/analogueReport/#abstract","title":"Abstract","text":"<p>This experiment explored the properties of inverting operational amplifiers (op-amps in short), which contain the plotted frequency response graphs, gain-bandwidth product, slew rate and offset voltage, validated the mathematical function of the summing op-amp and difference op-amp, discussed how the Common Mode Rejection Ratio (CMRR in short) affect the efficiency of amplifier.</p>"},{"location":"NOTES/Stage_2/analogueReport/#introduction","title":"Introduction","text":"<p>The op-amp is a very high-gain (open-loop gain tending to infinity), DC-coupled differential voltage amplifier with very large (tending to infinity) input impedance and extremely low output impedance[1], which has six terminals: one non-inverting input is denoted by positive (+) sign, one inverting denoted by (\u2212) sign, two where positive and negative power supplies (+VCC and \u2212VCC or V+, &amp; V\u2212), as shown in Fig.1. As a active circuit element, op-amp is designed to perform mathematical operations of addition, subtraction, multiplication, division, differentiation, and integration[2].</p> <p> Fig.1.[1] The Op-amp in symbolic (left) and IC (right) form  </p> <p>This experiment aimed at validating the definition of bandwidth, cut-off frequency, slew rate, distortion phenomenon and the offset voltage of inverting op-amps, exploring the operation of the summing and difference op-amps with CMRR properties. To achieve the aims above, the tasks have been done as below:</p> <ul> <li> <p>Calculate the total gain using the \\(V_{out}\\) and \\(V_{in}\\) in oscilloscope.</p> </li> <li> <p>Determine the bandwidth using the gain-bandwidth product provided in data sheet shown in Fig.2.</p> </li> </ul> <p> Fig.2. The Op-amp data sheet </p> <ul> <li> <p>Plot the frequency response and determine the cut-off frequency, then change another set of resistance ratio repeating the test above.</p> </li> <li> <p>Increase the frequency, observe the full power bandwidth then calculate the slew rate.</p> </li> <li> <p>Reconnect the circuit, determine the offset-voltage.</p> </li> <li> <p>Change the circuit to summing op-amp and difference op-amp, observe the operations and calculate the CMRR.</p> </li> </ul>"},{"location":"NOTES/Stage_2/analogueReport/#procedure","title":"Procedure","text":"<ul> <li>For inverting amplifier experiment, we use the op-amp designed as Fig.3 with \\(R_1=1\\)k\\(\\Omega\\). Apply the input as 1 kHz, 0.1 \\(V_{pp}\\), then observe and record the \\(V_{in}\\) and \\(V_{out}\\) to calculate the gain using formula: $$ A_{experiment}= \\displaystyle\\frac{V_{out}}{V_{in}}\\tag{1.1} $$</li> </ul> \\[ A_{theory}= -\\displaystyle\\frac{R_2}{R_1}\\tag{1.2} \\] <p> Fig.3. The inverting op-amp </p> <p>then compare the gain with theoretical value calculated by formula 1.2. Change \\(R_2\\) to 470 \\(\\Omega\\) and voltage to 0.025 \\(V_{pp}\\) do the above procedure again.</p> <ul> <li>Increase the frequency, measure the gain up to the cut-off frequency and plot the data. Observe the cut-off frequency from the graph and calculate the the bandwidth using the formula:</li> </ul> \\[ Bandwidth = \\displaystyle\\frac{GBP}{Gain}\\tag{2} \\] <ul> <li> <p>Change \\(R_2\\) to 10 k\\(\\Omega\\) and repeat the steps measuring frequency response. Compare these result with the theoretical values in data sheet (Fig.2).</p> </li> <li> <p>Change the values of both \\(R_1\\) and \\(R_2\\) to 10 k\\(\\Omega\\) with the input signal of 1 kHz.</p> </li> <li> <p>Adjust the input signal until the output signal has a \\(V_{pp}\\) of 10 V.</p> </li> <li> <p>Keep the input signal in same level, increase the frequency until the output signal distorts. Record the full power bandwidth at the frequency distortion begin point. Then keep increasing the frequency until the triangle wave occurs, record this value of frequency.</p> </li> <li> <p>Add \\(V_{pp}\\) and period measurements in the oscilloscope, calculate the slew rate of this op-amp using the formula:</p> </li> </ul> \\[ Slew\\quad rate = \\displaystyle\\frac{dV}{dt} = \\frac{V_{pp}}{\\frac{1}{2}T}\\tag{3} \\] <p>then compare this value with the theoretical slew rate in data sheet Fig.2.</p> <ul> <li>Reconnect the circuit with Fig.4 and set \\(R_1\\) = 1 k\\(\\Omega\\) and \\(R_2\\) = 470 k\\(\\Omega\\). </li> </ul> <p> Fig.4. Off-set voltage Calculation </p> <ul> <li>According to the formula:</li> </ul> \\[ V_o = (1+\\displaystyle\\frac{R_2}{R_1})V_{off}\\tag{4} \\] <p>measuring the output voltage \\(V_o\\), then calculate the offset voltage.</p> <ul> <li>Construct the summing circuit designed as Fig.5, with \\(R_1\\) = 10 k\\(\\Omega\\) and \\(R_2\\) = 22 k\\(\\Omega\\).</li> </ul> <p> Fig.5. Summing op-amp </p> <ul> <li> <p>Connect one of the summing op-amp input to 1 kHz sine wave with 100 \\(mV_{pp}\\).</p> </li> <li> <p>Connect the lower terminal of potentiometer to ground and the upper terminal to +15 V pin, then connect the potentiometer output to another input of the summing op-amp. So that the input voltage of the op-amp can be adjusted easily.</p> </li> <li> <p>Increase the DC input using potentiometer, then observe and record the summing effect of the output signal.</p> </li> <li> <p>Construct the difference amplifier designed as Fig.6 with \\(R_1\\) = 1 k\\(\\Omega\\), \\(R_2\\) = 22 k\\(\\Omega\\).</p> </li> </ul> <p> Fig.6. Difference op-amp </p> <ul> <li> <p>Connect the both input of the op-amp to 1 \\(V_{pp}\\), 1 Hz sine wave, which is the common mode of amplifier.Measure the output using multimeter, calculated the gain in this condition, \\(A_{CM}\\).</p> </li> <li> <p>Keep one of the op-amp input 1 kHz sine wave, change another input to the ground. Measure the output using multimeter, calculated the gain in this condition, \\(A_{DM}\\).</p> </li> <li> <p>Determine the Common Mode Rejection Ratio (CMRR) using the formula given by:</p> </li> </ul> \\[ CMRR = 20\\log_{10}{\\displaystyle\\frac{A_{DM}}{A_{CM}}}(dB)\\tag{5} \\]"},{"location":"NOTES/Stage_2/analogueReport/#results-and-discussion","title":"Results and Discussion","text":"<p>In terms of the measured data of the inverting amplifier experiment, \\(V_{out1} = 980\\) m\\(V_{pp}\\) and \\(V_{in1} = 113\\) m\\(V_{pp}\\) when \\(R_2 = 10\\) k\\(\\Omega\\) and \\(V_{out2} = 12.25\\) \\(V_{pp}\\) and \\(V_{in1} = 0.025\\) \\(V_{pp}\\) when \\(R_2 = 470\\) k\\(\\Omega\\), as shown in Fig.7.1 and Fig.7.2. </p> <p> Fig.7.1 Gain when \\(R_2\\) = 10 k\\(\\Omega\\) </p> <p> Fig.7.2 Gain when \\(R_2\\) = 470 k\\(\\Omega\\) </p> <p>Using formula (1.1), the gain can be generate as:</p> \\[ A_1 = \\displaystyle\\frac{V_{out1}}{V_{in1}} = \\frac{980}{113} = 8.67 \\] \\[ A_2 = \\displaystyle\\frac{V_{out2}}{V_{in2}} = \\frac{12.25}{0.025} = 490 \\] <p>These values follow the theoretical values calculated using formula (1.2), which validate the theory results.</p> <p>According to formula (2) and GBP = 3 MHz from data sheet in Fig.2, we can calculate the bandwidth of these two sets of data:</p> \\[ Bandwidth_1 = \\displaystyle\\frac{GBP}{gain_1} =346\\quad kHz  \\] \\[ Bandwidth_2 = \\displaystyle\\frac{GBP}{gain_2}= 6\\quad kHz  \\] <p>Using the data generated above, we can plot the frequency response of \\(A_1\\) and \\(A_2\\) in Fig 8.1 and Fig.8.2, respectively.</p> <p> Fig.8.1 Frequency response of \\(A_1\\) </p> <p> Fig.8.2 Frequency response of \\(A_2\\) </p> <p>We can find the \\(f_{cut1} \\approx 340\\) kHz and \\(f_{cut2} \\approx 6\\) kHz according to the graphs, which almost equal to the calculated bandwidth above in acceptable error range.</p> <p>In the distortion limit test, the Fig.9.1 shows the frequency which wave begin to distort, i.e. the full power bandwidth \\(f_{FPBW} = 528.8\\) kHz.</p> <p>Keep increasing the frequency, we recorded the triangle wave beginning frequency shown in Fig.9.2, which frequency is 700.3 kHz.</p> <p> Fig.9.1 The frequency that distort begins </p> <p> Fig.9.2 The frequency that triangle wave begins </p> <p>As the \\(V_{pp} = 11.7\\) V and \\(T\\) = 1.89 \\(\\mu s\\) in Fig.9.1, the slew rate can be calculated using formula (3):</p> \\[ slew \\quad rate = \\displaystyle\\frac{11.7\\quad V}{\\frac{1.89}{2}\\mu s} \\approx 12.38 \\quad V/\\mu s \\] <p>This value is similar to the value in data sheet (Fig.2), which is 13 V/\\(\\mu s\\). </p> <p>Slew rate is defined as the maximum rate of change of the output voltage of an op-amp and is given in unit of volts per microsecond[3]. The large slew rate means the op-amp can respond the change rapidly, which is excellent for amplifier.</p> <p>In the off-set voltage calculation test, the output voltage can be read from Fig.10, i.e. \\(V_{out} = 0.2\\) V. </p> <p> Fig.10 Off-set voltage </p> <p>Using formula (4), the \\(V_{off}\\) can be generate:</p> \\[ V_{off} = \\displaystyle\\frac{R_1}{R_1+R_2}V_o = 0.42\\quad mV \\] <p>During the exploring of the summing amplifier, we got two graphs which record the summing effect in Fig 11. We put the vertical cursor at the no summing op-amp and fix this cursor when increasing the DC input. As Fig.11 shown, the phase of wave shifted after the summing DC input, which shows the summing effect.</p> Fig.11 Effect of summing effect  <p>The summing amplifier can add several weighted signal, which can be applied in summing operation of mathematical calculation. It can also be used as digital to analogue convertor (DAC).</p> <p>For example, a binary weighted ladder can be designed as Fig.12</p> <p> [4]Fig.12 Summing amplifier application in DAC </p> <p>In the difference amplifier experiment, the \\(V_{out}\\) of difference mode and common mode were recorded using multimeter in Fig.13.1 and Fig.13.2. As \\(V_{in}\\) = 1 \\(V_{pp}\\), the gain of common mode and difference mode can be generated directly: \\(A_{DM} = 7.37\\) and \\(A_{CM}\\) = \\(0.5 \\times 10^{-3}\\). Using formula (4) the CMRR can be calculated:</p> \\[ CMRR = 20\\log_{10}{\\displaystyle\\frac{A_{DM}}{A_{CM}}} = 83.37\\quad dB \\] <p>For a good op-amp, a very large change in common-mode voltage should change the output by 1 V, while a relatively much smaller differential voltage should change the output by 1 V. Therefore, a larger value of CMRR corresponds to a better op-amp quality.[5]</p> <p> Fig.13.1 Difference-mode \\(V_{out}\\) </p> <p> Fig.13.2 Common-mode \\(V_{out}\\) </p>"},{"location":"NOTES/Stage_2/analogueReport/#conclusion","title":"Conclusion","text":"<p>This experiment explored and validated the gain of inverting op-amps with two sets of different resistance ratio.</p> <p>Using the data observed from oscilloscope, the frequency response was plotted with the bandwidth and cut-off frequency estimated. The results follow the theoretical rules in acceptable error range.</p> <p>During the distortion test, the calculation of slew rate, full power bandwidth and offset voltage validate the phenomenon of distortion.</p> <p>In the exploration of summing and difference amplifier, the graphed waves of summing effect verified the result of two weighted signal summing, which can be applied in DAC devices. From the difference amplifier, the calculated CMRR shows the importance property of op-amps.</p>"},{"location":"NOTES/Stage_2/analogueReport/#references","title":"References","text":"<p>[1]:R.Prasad, Analog and Digital Electronic Circuits. Springer, 2021, p.678.</p> <p>[2]C.K.Alexander and M.N.O.Sadiku, Fundamentals of electric circuits. New York, Ny: Mcgraw-Hill Education, 2017, p.599. \u200c [3]:R.Prasad, Analog and Digital Electronic Circuits. Springer, 2021, p.690. \u200c [4]C.K.Alexander and M.N.O.Sadiku, Fundamentals of electric circuits. New York, Ny: Mcgraw-Hill Education, 2017, p.652.</p> <p>[5]:R.Prasad, Analog and Digital Electronic Circuits. Springer, 2021, p.691. \u200c</p>"},{"location":"NOTES/Stage_2/automaticControl/","title":"Automatic Control Systems","text":"<ul> <li> <p>Control variables: is the output of system that is measured or controlled.</p> </li> <li> <p>Plant: The plant is tge piece of equipment which performs a particular operation.</p> </li> <li> <p>Dynamics: properties describing the behavior of the system.</p> </li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#1-dynamic-systems-and-control","title":"1: Dynamic Systems and Control","text":""},{"location":"NOTES/Stage_2/automaticControl/#11-system-model","title":"1.1: System model","text":"<ul> <li>The model is derived from the ODE describing the system, which can be obtained by analyzing the physical processes.</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#111-electrical-system","title":"1.1.1: Electrical system","text":""},{"location":"NOTES/Stage_2/automaticControl/#112-mechanical-system","title":"1.1.2: Mechanical System","text":""},{"location":"NOTES/Stage_2/automaticControl/#12-first-order-ode","title":"1.2: First-order ODE","text":""},{"location":"NOTES/Stage_2/automaticControl/#121-analytic-methods","title":"1.2.1: Analytic Methods","text":"<ul> <li>Separating variables:</li> </ul> <ul> <li>Integrating factor:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#122-numerical-solution-using-simulink","title":"1.2.2: Numerical solution (using Simulink)","text":"<ul> <li>For example of \\(Ax' +Bx = u\\):</li> </ul> <ul> <li>Note that the initial condition can be changed in the integrator block.</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#123-first-order-ode-summary","title":"1.2.3: First-order ODE summary","text":"<ul> <li> <p>The system is considered stable if reaches steady state.</p> </li> <li> <p>For sin input, output follows input after transient with changes in magnitude.</p> </li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#13-second-order-ode","title":"1.3: Second order ODE","text":""},{"location":"NOTES/Stage_2/automaticControl/#131-analytical-solution","title":"1.3.1: Analytical solution","text":"<ul> <li>For real and not equal roots:</li> </ul> <ul> <li>For equal roots:</li> </ul> <ul> <li>For complex roots:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#132-undamped-system","title":"1.3.2: Undamped system","text":""},{"location":"NOTES/Stage_2/automaticControl/#133-space-of-roots","title":"1.3.3: Space of roots","text":""},{"location":"NOTES/Stage_2/automaticControl/#134-natural-frequency-damping-frequency-and-damp-factor","title":"1.3.4: Natural frequency, damping frequency and damp factor","text":"<ul> <li>For a second order ODE shown as below:</li> </ul> \\[ x'' + 2\\zeta \\omega_n x' + \\omega_n ^2x = 0 \\] <ul> <li> <p>\\(\\zeta\\) is the damping factor and \\(\\omega_n\\) is the natural frequency of the system.</p> </li> <li> <p>The root can be gained from \\(\\zeta\\) and \\(\\omega_n\\).</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/automaticControl/#135-nonhomogeneous-nh-ode","title":"1.3.5: NonHomogeneous (NH) ODE","text":"<ul> <li>\\(x''+Ax'+Bx = u\\)</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#2-transfer-functions","title":"2: Transfer functions","text":"<ul> <li>Using the Laplace Transform, we can convert the the TF in time-domain to s-domain.</li> </ul> <ul> <li>Formula for differentiation:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#21-characteristic-equation-and-order","title":"2.1: Characteristic Equation and Order","text":"<ul> <li> <p>The Characteristic equation (CE) is the denominator of transfer function.</p> </li> <li> <p>The order of the ODE is the order of the system.</p> </li> <li> <p>In s-domain, it can also be determined by the order of 's'.</p> </li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#22-pole-location-in-s-plane","title":"2.2: Pole location in s-plane","text":"<ul> <li>In \\(G(s) = \\frac{N(s)}{D(s)}\\), the roots of numerator are called zeros and the roots of denominator is called poles.</li> </ul> <ul> <li>MATLAB methods to find roots of polynomial:</li> </ul> <pre><code>num = [1 4];\nden = [1 3 -6];\nroots(num);\n</code></pre> <ul> <li>MATLAB methods to find poles/zeros plot:</li> </ul> <pre><code>num = [1 4];\nden = [1 3 6];\nG = tf(num,den);\npzmap(G);\n[p,z] = pzmap[G];\n</code></pre> <ul> <li>The function 'conv' can be used to combine two terms.</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#23-final-value-theorem","title":"2.3: Final value theorem","text":"<ul> <li>The final-value theorem can be used to determine the ss value.</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#24-block-diagram","title":"2.4: Block diagram","text":"<ul> <li>In matlab,</li> </ul> <pre><code>G = series(g1,g2);\nG = parallel(g1,g2);\n</code></pre>"},{"location":"NOTES/Stage_2/automaticControl/#3-time-domain-characteristic","title":"3: Time domain Characteristic","text":"<ul> <li>The input signals can be one of below:</li> </ul> <ul> <li>To find the step response using matlab:</li> </ul> <p><pre><code>step(num,den,15);\n</code></pre> </p> <ul> <li> <p>The transfer function can be expressed as form of: $$ \\displaystyle\\frac{Y(s)}{X(s)}=\\frac{k}{\\tau s+1} $$</p> </li> <li> <p>\\(\\tau\\) is the time constant.</p> </li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#31-second-order-systems","title":"3.1: Second order systems","text":"<ul> <li>The second order system can be expressed in the form of:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#32-time-domain-characteristic-in-graph","title":"3.2: Time-domain Characteristic in graph","text":""},{"location":"NOTES/Stage_2/automaticControl/#34-extra-poles-and-zeros","title":"3.4: Extra poles and zeros","text":"<ul> <li> <p>If we have only one pole (or pair of complex roots) that is closed to the real-axis then we say this pole is the DOMINANT pole for the system.</p> </li> <li> <p>The dominant poles must be at least five to ten times closer to the imaginary axis than others.</p> </li> <li> <p>If the pole is far away from i-axis, it can be ignored in TF.</p> </li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#4-closed-loop-system","title":"4: Closed loop system","text":"<ul> <li> <p>For the system, with inputs back to system to sees output, this is called Feedback.</p> </li> <li> <p>A system with feedback is called a closed-loop system.</p> </li> </ul> <p></p> <ul> <li>For a general CL system:</li> </ul> <p></p> <ul> <li>Use the MATLAB instruction to calculate feedback CLTF:</li> </ul> <pre><code>gcl = feedback(gol,h);\n</code></pre> <ul> <li>\\(\\omega_n\\) and \\(\\zeta\\) can also be found:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/automaticControl/#41-systems-classification","title":"4.1: Systems classification","text":"<ul> <li>The systems can also can be classified by the number of poles at the origin OL system:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#42-error-constants","title":"4.2: Error constants","text":"<ul> <li>Marginally stable means the poles are in the i-axis, so $ s = j\\omega$:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#5-root-locus","title":"5: Root Locus","text":"<ul> <li>For example of a first-order system:</li> </ul> <ul> <li>For a second-order system:</li> </ul> <ul> <li>Matlab instruction to draw root locus:</li> </ul> <pre><code>rlocus(g1);\n</code></pre>"},{"location":"NOTES/Stage_2/automaticControl/#51-graphical-method","title":"5.1: Graphical method","text":""},{"location":"NOTES/Stage_2/automaticControl/#52-angle-and-magnitude-conditions","title":"5.2: Angle and magnitude conditions","text":"<ul> <li>For the transfer function:</li> </ul> \\[ G_{CL}(s) = \\displaystyle\\frac{G(s)}{1+G(s)H(s)} \\] <ul> <li>To make sure the poles in the roots locus:</li> </ul> \\[ |G(s)H(s)| = -1 \\] <p>and </p> <p></p> <p></p>"},{"location":"NOTES/Stage_2/automaticControl/#53-the-graphical-and-analytic-method-to-justufy-the-root-locus-point","title":"5.3: The graphical and analytic method to justufy the root-locus point","text":"<ul> <li>Graphical methods:</li> </ul> <ul> <li>Analytic methods:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#54-design-summary-of-root-locus","title":"5.4: Design Summary of root locus","text":""},{"location":"NOTES/Stage_2/automaticControl/#6-pid-control","title":"6: PID control","text":"<ul> <li>'P' for proportional, 'I' for integration, 'D' for differentiation.</li> </ul> <ul> <li>For a PID controller:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#61-pid-tuning","title":"6.1: PID tuning","text":"<ul> <li>Ziegler Nichols I:</li> </ul> <ul> <li>Ziegler Nichols II:</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#7-design-based-on-root-locus","title":"7: Design Based on Root Locus","text":""},{"location":"NOTES/Stage_2/automaticControl/#71-lead-control","title":"7.1: Lead Control","text":"<ul> <li>Lead control is similar to PD control. It is used when ss properties of the system is fine but poor performance of response time, i.e. we want to move poles without changing the gain very much.</li> </ul> <ul> <li> <p>The method is add a zero and a pole simultaneously (according to the Argument Criterion, \\(\\sigma \\arg{poles} - \\sigma \\arg{zeros} = \\pi\\)).</p> </li> <li> <p>The pole would be moved left, so that increase the response time.</p> </li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#711-design-strategy","title":"7.1.1: Design Strategy","text":"<ul> <li> <p>Using the desired condition of \\(\\omega_n\\) and \\(\\zeta\\) to find the roots of CLTF.</p> </li> <li> <p>Check if a P-controller is enough.</p> </li> <li> <p>Place the zero at the real-part of the desired pole location (diminished pole and zero argument).</p> </li> <li> <p>Using Magnitude Angle Criterion finding position of compensated pole:</p> </li> </ul> <p></p> <ul> <li>Using Magnitude Criterion (\\(|GH| = 1\\))finding the K.</li> </ul>"},{"location":"NOTES/Stage_2/automaticControl/#712-example-of-lead-control","title":"7.1.2: Example of lead control","text":"<ul> <li> <p>Try P-controller firstly.</p> </li> <li> <p>The CL poles can be found:</p> </li> </ul> <p></p> <ul> <li>Finding the K:</li> </ul> <p></p> <ul> <li>The result not suitable for the desired system:</li> </ul> <p></p> <ul> <li> <p>Try Lead-Controller:</p> </li> <li> <p>The desired roots of poles:</p> </li> </ul> <p></p> <p></p> <ul> <li>Finding compensated pole location:</li> </ul> <p></p> <ul> <li>The system response faster compared to the P-controller:</li> </ul> <p>|---|---| |||</p>"},{"location":"NOTES/Stage_2/automaticControl/#72-lag-control","title":"7.2: Lag Control","text":""},{"location":"NOTES/Stage_2/automaticControl/#721-example-of-lag-control","title":"7.2.1: Example of Lag Control","text":""},{"location":"NOTES/Stage_2/computerSystems/","title":"Computer Systems and Microprocessors","text":""},{"location":"NOTES/Stage_2/computerSystems/#i-background","title":"I: Background","text":""},{"location":"NOTES/Stage_2/computerSystems/#1-fundamentals-of-cmos","title":"1: Fundamentals of CMOS","text":""},{"location":"NOTES/Stage_2/computerSystems/#11-transistor-fundamentals-nmos","title":"1.1: Transistor fundamentals: NMOS","text":"<ul> <li>NMOS, i.e. Negative Metal Oxide Field Efficient Transistor.</li> </ul> <ul> <li> <p>The drain / source area are both doping with electrons (n-type doping), while the substrate is doped with holes.</p> </li> <li> <p>The insulator is filled with oxide.</p> </li> <li> <p>The gate is a switch which controlled by the \\(V_{GS}\\) (voltage between gate and source). The high potential voltage will attracts the minor electrons in substrate so that form the channel.</p> </li> <li> <p>The electrons will move from the source to the drain and inverse for the current.</p> </li> <li> <p>The symbol of NMOS is below (sometimes using 'inlet' arrow ):</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#12-transistor-fundamentals-pmos","title":"1.2: Transistor fundamentals: PMOS","text":"<ul> <li>The same mechanism as NMOS. </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#13-cmos-complementary-mosfet","title":"1.3: CMOS: complementary MOSFET","text":""},{"location":"NOTES/Stage_2/computerSystems/#2-cmos-logic-circuits-inverter","title":"2: CMOS logic Circuits: Inverter","text":"<ul> <li> <p>Note that the positive voltage for gate for NMOS is ON, the negative voltage for PMOS is ON.</p> </li> <li> <p>2 transistors needed.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#3-cmos-logic-circuits-nand","title":"3: CMOS Logic Circuits: NAND","text":"<ul> <li>If we fix one input as '1', this can also be used as an inverter. </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#4-cmos-logic-circuits-nor","title":"4: CMOS Logic Circuits: NOR","text":"<ul> <li>If we fix one of the input as '0', this can be used as an inverter.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#5-d-type-flip-flop-latches","title":"5: D-type flip-flop (Latches)","text":"<ul> <li>'0' for reset and '1' for set when clock is '1'.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#ii-computer-systems","title":"II: Computer Systems","text":""},{"location":"NOTES/Stage_2/computerSystems/#1-modern-computing-systems","title":"1: Modern Computing Systems","text":"<ul> <li> <p>High Performance Computing </p> </li> <li> <p>General Purpose Computing</p> </li> <li> <p>Embedded Computing </p> </li> <li> <p>Ubiquitous Computing </p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#2-computer-architecture","title":"2: Computer Architecture","text":"<ul> <li> <p>Core to the computation is the processors and memory organization.</p> </li> <li> <p>IO devices allow various user-interfaced.</p> </li> <li> <p>Modulation keeps the things simple.</p> </li> <li> <p>Key components of a Microprocessor:</p> <ul> <li>Memories </li> <li>Busses / Interconnects</li> <li>Processors (CPU,etc.)</li> <li>IOs and controllers.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#3-memory","title":"3: Memory","text":"<ul> <li>Provides the temporary or permanent storage needed by the processors/ IOs.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#31-type-of-memory","title":"3.1: Type of Memory","text":"<ul> <li>A. Register:<ul> <li>Small and fast; consists of a number of flip-flops</li> <li>Flashed out when powered off.</li> </ul> </li> <li>B. Cache Memory:<ul> <li>Large but slower memories, usually Static Random Access Memories (SRAMs)</li> <li>Flashed out when powered off.</li> </ul> </li> <li>C. Main Memory:<ul> <li>Even larger and slower.</li> <li>Usually Dynamic Random Access Memories (DRAMs)</li> </ul> </li> <li>D. Secondary Storage:<ul> <li>Larger and even slower.</li> <li>Usually disk drives.</li> </ul> </li> <li>E. Other Memories: Offline/Flash Memories<ul> <li>Used to store offline information.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#32-memory-trade-offs","title":"3.2: Memory Trade-offs","text":""},{"location":"NOTES/Stage_2/computerSystems/#33-memory-hierarchy","title":"3.3: Memory Hierarchy","text":"<ul> <li>The memory elements close to CPU are generally the fastest and costliest.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#34-register","title":"3.4: Register","text":"<ul> <li> <p>A register is a parallel set of N flip-flops, with all clock lines connected with the CPU clock.</p> </li> <li> <p>Size N is equal to the CPU word length. In 32-bits CPU, you can find 32-bits registers.</p> </li> </ul> <p></p> <ul> <li> <p>Registers can be different types:</p> <ul> <li>Accumulators: register that directly stories/retrieves from memory.</li> <li>General purpose: store data during execution.</li> <li>Special purpose: used by the computer systems instead of the user:</li> </ul> </li> <li> <p>Different architectures have different number of registers depend on the Instruction Set Architecture.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#35-cache-memory","title":"3.5: Cache Memory","text":"<ul> <li>Cache memories are usually static random memory (SRAM) (6 transistors)</li> </ul> <ul> <li>SRAMs have three operations:<ul> <li>Hold (WL = 0), Write and Read (WL = 1)</li> </ul> </li> <li>BL: bit line feeds data into the cell.</li> <li> <p>WL: word select line</p> </li> <li> <p>BL/WL basically feed two inverters.</p> </li> <li> <p>Back to back inverters in the red circles.</p> </li> <li> <p>M4 and M5 are access transistors as switches.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#36-cache-memory-sram-basics","title":"3.6: Cache Memory: SRAM basics","text":"<ul> <li>Hold<ul> <li>WL=Low, M5 and M6 (access transistors) are OFF.</li> <li>data held in latch.(back to back inverter)</li> </ul> </li> <li> <p>Write: (BL = High and WL = High, write 1)</p> <ul> <li>M5 and M6 are switched on.</li> <li>M6 allows the current through (High) and feeds the inverter \\(I_2\\).</li> <li>\\(I_2\\) generates Low output; then the output is fed back to \\(I_1\\); \\(I_1\\) generate High output.</li> <li>The high and low loop between the inverters remember the logic (\\(I_1\\) output).</li> </ul> </li> <li> <p>Read: (WL = High select the word line)</p> <ul> <li>M5 and M6 are switched on.</li> <li>If \\(I_1\\) is high - M4 is on, causes current (\\(V_{dd}\\)) to flow through M4 to the BL.</li> <li>The current and its direction is read by a current sense amp (detect logic high).</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#37-cache-memory-operation","title":"3.7: Cache Memory Operation","text":"<ul> <li> <p>Cache exploits the principle of locality: programs tends to execute the same small set of instructions and data repeatedly.</p> </li> <li> <p>When the processor needs data for execution, first checks the cache:</p> <ul> <li>If the data in the cache, it is called a HIT.</li> <li>If else, it is called a MISS.</li> </ul> </li> </ul> <p></p> <ul> <li> <p>Size and Performance trade-offs:</p> <ul> <li>Larger cache may increase HIT ratio, but the overall access time may increase.</li> <li>Smaller cache may increase MISS ratio, which may affect the performance.</li> </ul> </li> <li> <p>The first write is slow and the following writes are faster as you just need to write or update cache.</p> </li> <li>The speed-up factor using cache is almost 10.</li> <li>When the cache becomes full, 'old' entries can be overwritten by randomly chosen.</li> <li>When cache entries are more updated than main memory, the entries marked as dirty entries.<ul> <li>Dirty lines are updated in the main memory soon.</li> <li>The process of ensuring integrity of data is called cache coherence.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#38-cache-size-tradeoff","title":"3.8: Cache Size Tradeoff","text":"<ul> <li>The word 'latency' means the latency time for the computer to read the data.</li> <li>Effective Latency = Hit ratio * Hit Latency + Miss Ratio * Miss Latency (the average time required for memory access)</li> <li>If the caches missed in the L1 Cache, then it will come to L2 cache.</li> </ul> <ul> <li> <p>Note if we treat the miss ratio is fixed in every level as p, then the hit ratio will be 1-p.</p> </li> <li> <p>'Temporal locality' refers to the reuse of the data which are time relatively.</p> </li> <li>'Spatial locality' refers to use of the data within close storage locations. When am instruction or a data is repeated a number of time it manifests spatial locality.</li> </ul> <p></p> <ul> <li>Caches contains several blocks.</li> <li>For the same caches size, larger block size lead to good temporal locality.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#39-main-memory","title":"3.9: Main Memory","text":"<ul> <li>Generally DRAMs:<ul> <li>Dynamic: refreshed needed (the electrons may discharge when time past)</li> <li>Volatile: loses data when power is removed.</li> </ul> </li> <li>Comparison to SRAMs:<ul> <li>Smaller but more expansive.</li> <li>Not fast as SRAMs.(more refreshing circuitry)</li> </ul> </li> <li> <p>Main memory is the primary storage - all changes in registers and caches must be coherent with the mai memory.</p> </li> <li> <p>In theory, when the word line is '0', the electrons in the capacitor may keep. However the electrons may leap, if the original voltage is 1 V, the electrons will not be detected when V = 0.5. So we need a charging after the 0.5 point, which is the freshing.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#391-the-dram-basics","title":"3.9.1: The DRAM basics","text":"<ul> <li>Write:</li> <li>BL = '1' and WL = '1':</li> <li>Access transistor ON, C charge to Vdd (HI).</li> <li>After refresh period, rewrite the data.</li> <li>Read:</li> <li>WL = HI</li> <li>Access transistor is ON, assume C has ~Vdd(HI) charge.</li> <li>Bit line read the voltage across C.</li> <li>Hold:</li> <li>C will retain the charge.</li> <li>The leakage current cause the discharge.</li> <li>Refresh needed.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#392-dram-read-sense-amplifier","title":"3.9.2: DRAM Read: Sense Amplifier","text":"<ul> <li>To read '1':</li> <li>WL = '0', the up and down BL keep 0.5 V.</li> <li>WL = '1', the BL connected with C (HI), the discharging begin.</li> <li>In the side with BL, the voltage increased and other side decreased.</li> <li>Then the signal '1' in BL side can be detected.</li> <li>The voltage will soon charge the C again.</li> <li>To read '0':</li> <li>WL = '0', the up and down keep 0.5 V.</li> <li>WL = '1', the BL connected with C (LOW), the charging begin.</li> <li>In the side with BL, the voltage decreased and other side decreased.</li> <li>Then the signal '0' in BL side can be detected.</li> <li>The voltage will soon discharge the C again.</li> <li>To write dada:</li> <li>The double side pre-charged to 0.5 V.</li> <li>Activate the WL, set BL to '0' or '1'.</li> <li>Data wrote to cell.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#393-dram-array","title":"3.9.3: DRAM Array","text":"<ul> <li>Several memory cell consist the memory array.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#310-the-memory-wall","title":"3.10: The Memory Wall","text":"<ul> <li> <p>Faster and parallel processor reducing CPI (clocks per Instruction).</p> </li> <li> <p>Complicated memory hierarchy is increasing the memory latency.</p> </li> <li> <p>The memory will limit the core efficiency.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#311-other-memories-rom","title":"3.11: Other Memories: ROM","text":"<ul> <li>Read-only Memory<ul> <li>No capability for memory write.</li> <li>Data programmed</li> <li>Stable storage even when power is off</li> </ul> </li> <li>Example: NOR-based ROM <ul> <li>8 bits words</li> <li>Address selects active (HI) row </li> <li>The row selects lines program which line is HI, so teh data stored is fixed.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#312-secondary-storage-magnetic-disks","title":"3.12: Secondary Storage: Magnetic Disks","text":"<ul> <li>Non-volatile memory, large and slower</li> <li>The disc is coated with magnetic material\u3002</li> <li>Data is written serially in CW direction.</li> <li>Magnetise for '1', demagntise for '0'.</li> </ul> <ul> <li>The magnetic disks are consisted of:<ul> <li>Head: the head detector to read the magnetic direction.(hovering)</li> <li>Track: the circle track drawn by head.</li> <li>Cylinder: consist of different surface located in same radium circle, is a cylinder surface.</li> <li>Sector: the different sector area divided by gap.</li> </ul> </li> <li> <p>Total disk capacity = sector size x sector per track x number of tracks per cylinder x number of cylinder.</p> </li> <li> <p>The sector is the actual data container:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#313-off-line-storage-cd-rom-dvd","title":"3.13: Off-line Storage: CD-ROM, DVD","text":"<ul> <li>Optical non-volatile, for long-term storage.</li> <li>Coated in metal with the area reflect light differently.</li> <li>Normal surface called the 'land'.</li> <li>Surface affects by laser is called the 'pit'.</li> <li>The pit and land can be read by weak laser beam.</li> <li>From inside to outside. </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#314-tertiary-storages-flash-memories","title":"3.14: Tertiary Storages: Flash memories","text":"<ul> <li>Non-volatile; can be electronically erased and reprogrammed.<ul> <li>Modern solid-state drives (SSD) for secondary storage.</li> <li>Secure Digital (SD) Cards.</li> </ul> </li> <li>Semiconductor non-volatile, non-rotary devices.<ul> <li>Faster than HDDs.</li> </ul> </li> <li>Flash memories are made of storage cells:<ul> <li>Eg. Single-level cell (SLC)</li> <li>Control Gate is the MOS gate.</li> <li>Floating Gate electrically isolate the channel.</li> <li>Higher threshold  voltage need to charge FG for write.</li> <li>A voltage lower than threshold for reading.</li> <li>For higher electron biasing hot electrons injection needed.</li> </ul> </li> <li> </li> <li> <p>Two charge states:</p> <ul> <li>By default non charge in the float gate means '1'.</li> <li>If the electrons injected to float gate, means '0'.</li> </ul> </li> </ul> <p></p> <ul> <li>Operations (NOR-based flash)<ul> <li>Reading:<ul> <li>For the '0', higher CG bias (\\(V_{T0}&gt;5V\\)) required. (high voltage required to overcome the channel potential and the trapped charged impact)</li> <li>For the '1', lower CG bias (\\(V_{T1}&lt;V_{T0}\\)) required.</li> </ul> </li> <li>Writing:<ul> <li>Need hot electrons injection (HEI)</li> <li>HEI follow the quantum tunnelling.</li> <li>Write '0': HEI applies HI (+ve) across the gate-source to allow FG to be charged negatively with low bit line.</li> <li>Write '1': HEI applies HI (-ve) across gate-source to allow FG data to be erased with low bit line.</li> </ul> </li> <li>Hold:<ul> <li>The FG dictates the hold operation.</li> <li>Negative charge for bit value = 0</li> <li>No FG charge for bit value = 1</li> <li>HEI causes oxide layer damage and this limit the lifetime of flash memories.</li> <li>SLC have ~100k write cycles.</li> </ul> </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#315-nor-multi-level-cells","title":"3.15: NOR Multi-Level Cells","text":"<ul> <li>Multi-level Cell (MLC)<ul> <li>Popular and high packing density</li> <li>Multiple SLC in parallel give multiple logic levels.</li> <li>MLC have typically ~10k cycles</li> </ul> </li> <li>REading <ul> <li>SImilar to the SLC, but with different biasing for different cells and configuration.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#316-emerging-non-volatile-memories-memristors","title":"3.16: Emerging Non-volatile Memories: Memristors","text":"<ul> <li>Also called RRAM or register-RAM.</li> <li> <p>T</p> </li> <li> <p>Two terminal element with variable doping:</p> <ul> <li>The width and resistance of doped region varies with biasing.</li> <li>When biasing makes w=D (device width) it is ON with \\(R_{ON}\\)</li> <li>When biasing makes w=0 it is OFF with \\(R_{OFF}\\).</li> <li>The resistance cannot change without biasing.</li> </ul> </li> <li>Resistive Memory: Meristor</li> <li>Current-Mode In-Memory Circuits: A multiplier<ul> <li></li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#4-interconnects","title":"4: Interconnects","text":""},{"location":"NOTES/Stage_2/computerSystems/#41-computer-interconnect","title":"4.1: Computer Interconnect","text":"<ul> <li>Interconnect is a critical component in modern computer systems as it defines the underlying performance of the systems.</li> <li>Interconnects are used to connect various components in the system.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#42-the-importance-of-interconnects","title":"4.2: The Importance of Interconnects","text":"<ul> <li>Affects performance and energy efficiency</li> <li>Affect the scalability of a system.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#43-managing-interconnects","title":"4.3: Managing Interconnects","text":"<ul> <li>Driving an interconnect is hard for devices, which contain lots of buffers and wiring.</li> </ul> <ul> <li>Every system has an interconnect topology and protocol to manage how to:<ul> <li>accessed:(IO pin counts, and handshakes)</li> <li>shared</li> <li>power managed</li> </ul> </li> <li>Different vendors like different bus architectures and protocols<ul> <li>ARM: AMBA </li> <li>Freescale: VME </li> <li>Intel: QuickPath</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#44-interconnect-skew","title":"4.4: Interconnect Skew","text":"<ul> <li>All interconnects suffer from interconnect or bus skew, because the differences in wire length.</li> <li>Consider the following interconnect:</li> </ul> <ul> <li>Uneven wire lengths between send and receive nodes.</li> <li>Bound to cause skew between them.</li> <li>Designer need to design protocols addressing worst case skew times.</li> <li>Also affects the interconnect clock frequency.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#45-interconnect-types","title":"4.5: Interconnect Types","text":"<p>There are two fundamentally different bus protocols:</p> <ul> <li> <p>Synchronous:</p> <ul> <li>Includes a clock in the control lines.</li> <li>A fixed protocol for communication relative to the clock.</li> <li>Advantage: involves very little logic and can run fast.</li> <li>Disadvantages: every device on the bus must run at the same clock rate to avoid clock skew, it cannot be very long.</li> </ul> </li> <li> <p>Asynchronous:</p> <ul> <li>It is not clocked.</li> <li>It can accommodate a wide range of device.</li> <li>It can be lengthened without worrying about clock skew.</li> <li>It requires a (rather complicated) handshaking protocol with overhands.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#46-synchronous-interconnects","title":"4.6: Synchronous interconnects","text":"<ul> <li>Having a clock line, which drives the interconnect transactions based on cycles.</li> <li>Interconnect cycles = several CPU cycles (typically 4-10)</li> <li>Example timing diagram: CPU reads data from device </li> <li>Slanted line mean the possible change.</li> </ul> <ul> <li>At T0, the CPU sets the address lines and sets the mode bits to \"read\".</li> <li>The clock pulse width (T1-T0) must be long enough to:<ul> <li>accommodate propagation delay (skew)</li> <li>allow the receiver to read the address </li> </ul> </li> <li>The receiver is ready to receive at T1. It sets the data lines.</li> <li>The data is read into the interconnect. At A2, the CPU reads the data.</li> <li>All lines are cleared for a new bus cycles at T3.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#47-asynchronous-interconnects","title":"4.7: Asynchronous interconnects","text":"<ul> <li> <p>Do not have a global/master clock, BUS cycles can have any length, depending upon the master/slave.</p> </li> <li> <p>Transfer is achieved by means of handshaking.</p> </li> <li> <p>Input (i.e.Read) operation:</p> </li> </ul> <p></p> <p></p> <ul> <li> <p>(T5-T0) is one interconnect cycle. At T0, the CPU sets the address and mode lines.</p> </li> <li> <p>The CPU allows until T1 for bus skew. It then sets the Ready signal. The addressed device receives the Ready signal shortly before T2. It sets the data line, and raises the Accept line to acknowledge  receipt.</p> </li> <li> <p>When the CPU sees the Accept, it allows for skew. At T3, it lowers Ready and read the data. After a bus skew delay, the CPU removes the address T4.</p> </li> <li> <p>At T5, the addressed device sees Ready going down. It lowers Accept and removes the data.</p> </li> <li> <p>The bus cycle is then finished.</p> </li> <li> <p>Output (Write) operation form CPU to device</p> </li> </ul> <p></p> <ul> <li>The CPU provides the data, so this is made immediately.</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#48-interconnect-topology","title":"4.8: Interconnect Topology","text":"<ul> <li> <p>Topology: Specifies the way interconnect are wired.</p> </li> <li> <p>Different Topologies:</p> <ul> <li>Shared bus:<ul> <li>Simplest, State-of-the-art </li> <li>Simpler arbitration protocols </li> <li>Scalability issues </li> </ul> </li> <li>Point-to-point<ul> <li>ideal but high cost </li> <li>lots of wires </li> <li>Poor scalability</li> </ul> </li> <li>Cross bar or Network-on-chip <ul> <li>emerging modular architectures</li> <li>Packet switching based</li> </ul> </li> <li>Irregular interconnect <ul> <li>Highly customized for given application </li> <li>not good scalability</li> </ul> </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#49-shared-bus","title":"4.9: Shared Bus","text":"<ul> <li>Simple and Cost effective.</li> <li>Easy to implement coherence.</li> </ul> <ul> <li> <p>A bus transaction or bus cycle includes two parts:</p> <ul> <li>Issuing the command and address.</li> <li>Transferring the data.</li> </ul> </li> <li> <p>The master starts the bus transaction through command &amp; address.</p> </li> <li> <p>The slave is the one who responds to the address by:</p> <ul> <li>Sending data to master upon request.</li> <li>Receiving data from the master.</li> </ul> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#491-shared-bus-example-arm-amba","title":"4.9.1: Shared Bus Example: ARM AMBA","text":"<ul> <li>AMBA: Advanced Microprocessor Bus Architecture\u3002</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#492-ahb-architecture","title":"4.9.2: AHB Architecture","text":"<ul> <li> <p>The red squared area is the bus.</p> </li> <li> <p>The three masters shared the one address bus, one write bus and one read bus.</p> </li> <li> <p>The three masters and slaves shared one bandwidth.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#493-ahb-basic-transfer","title":"4.9.3: AHB Basic Transfer","text":"<ul> <li> <p>The transfer is divided into two parts: Address phase and Data phase.</p> </li> <li> <p>One cycle for address and the other or data (read/write).</p> </li> </ul> <p></p> <ul> <li> <p>However, the slave may have different wait states (the bus skew or have busy state).</p> </li> <li> <p>The first two data phases are meaning waiting time.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#494-ahb-pipelining","title":"4.9.4: AHB Pipelining","text":"<ul> <li>Transaction pipelining increase bus bandwidth.</li> </ul> <ul> <li> <p>As the AHB have different address and data controller, in one cycle time (for example the second cycle in picture), instruction B is getting address while A is doing data writing.</p> </li> <li> <p>During the transactions shown in picture, A,B and C three transactions (instructions) finished, which have 5 cycles. So the CPI (cycles per instruction) is 5/3.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#495-shared-bus-multi-core-dilemma","title":"4.9.5: Shared Bus: Multi-core Dilemma","text":"<ul> <li>Achieving parallelism using a shared global bus is hard with multi-core or multi-masters:</li> </ul> <ul> <li>We use new AXI4 (Advanced exXtensible Interface) AMBA standards feature:<ul> <li>multi-layering, simpler handshaking</li> <li>Higher performance.</li> <li>Each master have own bandwidth which no need to share as AHB.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#496-shared-bus-example-intel-pci","title":"4.9.6: Shared Bus Example: Intel PCI","text":"<ul> <li>PCI: Peripheral component interconnection<ul> <li>High-speed shared bus</li> <li>Intel released PCI in 1990s </li> <li>Bit-width / speed depends on the Peripherals </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#497-pci-arbitration","title":"4.9.7: PCI Arbitration","text":"<ul> <li>PCI uses a centralized, synchronous arbitration scheme.<ul> <li>Each device has its own unique GNT(Grant) &amp; REQ (Request) line.</li> <li>Simple request-grant handshake is used to grant bus access.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#410-usb-universal-serial-bus","title":"4.10: USB: Universal Serial Bus","text":"<ul> <li> <p>Shared bus for low-speed I/O device.</p> </li> <li> <p>Expandable</p> <ul> <li>through other buses </li> <li>up to 127 devices (one for root)</li> <li>serial data-in and data-out </li> <li>Simple design:<ul> <li>Also supplying power</li> <li>Support for real-time device </li> <li>Simple to manufacture </li> </ul> </li> </ul> </li> <li>Cable contain four wires <ul> <li>2 data lines </li> <li>1 power (+5V) and 1 GND </li> </ul> </li> <li>Data transmitted as:<ul> <li>'0' is transmitted as a voltage transition (0 to 1 or 1 to 0).</li> <li>'1' as the absence of transition (keep).</li> <li>Sequence of '0' forms a regular pulse stream.</li> </ul> </li> </ul> <p></p> <ul> <li>Has a root hub connected to the main bus <ul> <li>Following hubs connected to this hub forming a tree-topology.</li> </ul> </li> <li>USB root hub multiplex data from devices and transmits data through regular polling.</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#411-point-to-point","title":"4.11: Point-to-Point","text":"<p>Every node connected to every other.</p> <ul> <li> <p>Lowest contention.</p> </li> <li> <p>Lowest latency </p> </li> <li> <p>Ideal except of the cost.</p> </li> <li> <p>Not scalable.</p> </li> <li> <p>O(\\(n\\)) connection per node</p> </li> <li> <p>O(\\(n^2\\)) links</p> </li> <li> <p>eg. Nvidia GPU </p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#412-crossbar","title":"4.12: Crossbar","text":"<ul> <li> <p>Every node connected to every other busy node.</p> </li> <li> <p>Good for small number of nodes. </p> </li> <li> <p>Low latency and high throughput (data in and out)</p> </li> <li> <p>Expansive and not scalable.</p> <ul> <li>lots of switches to scale up</li> </ul> </li> <li> <p>O(\\(n^2\\)) cost</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#413-network-on-chip","title":"4.13: Network-on-Chip","text":"<ul> <li> <p>Tile-based scalable architecture:</p> <ul> <li>Each core is connected via a network interface, router (switch).</li> </ul> </li> <li> <p>Enable concurrent (parallel) sends to non-conflicting destinations.</p> </li> <li> <p>Low latency and high throughput.</p> </li> <li> <p>Expansive.</p> </li> <li> <p>Scalable.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#4131-noc-router","title":"4.13.1: NoC Router","text":"<ul> <li> <p>The router can receive and send the direction of last and next step (eg. south-in and north-out).</p> </li> <li> <p>There is also buffer in router to store the data in order to read or write in one time to protect the device.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#4132-noc-network-interface","title":"4.13.2: NoC Network Interface","text":"<ul> <li> <p>FIFO means the first-in / first-out controller.</p> </li> <li> <p>Packet is an assemble of data, like the packed mail parcel.</p> </li> <li> <p>The NI add headers for packetising and to remove headers when depacketsing.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#4133-noc-routing","title":"4.13.3: NoC routing","text":"<ul> <li> <p>Affects performance and communication scalability.</p> </li> <li> <p>Example routing algorithm on-chip:</p> <ul> <li>Source routing <ul> <li>Source tile tells the packet specifically how to reach the destination.</li> <li>Simple but not scalable.</li> </ul> </li> <li>XY routing <ul> <li>Go as far close to destination in X direction first, then in Y direction.</li> <li>Adaptive to NoC congestion.</li> </ul> </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#4134-xy-routing","title":"4.13.4: XY routing","text":""},{"location":"NOTES/Stage_2/computerSystems/#4135-fault-tolerant-xy-routing","title":"4.13.5: Fault-tolerant XY routing","text":""},{"location":"NOTES/Stage_2/computerSystems/#4136-a-typical-modern-system-on-chip","title":"4.13.6: A typical modern system-on-chip","text":""},{"location":"NOTES/Stage_2/computerSystems/#5-processors","title":"5: Processors","text":""},{"location":"NOTES/Stage_2/computerSystems/#51-introduction-to-processors","title":"5.1: Introduction to Processors","text":"<ul> <li>Opcode: the binary code of operation.</li> <li>Mode: whether privilege allowed (user or administrator)</li> <li>Address: address denote to the memory as caches.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#52-functional-view","title":"5.2: Functional View","text":""},{"location":"NOTES/Stage_2/computerSystems/#53-structure-of-a-computer-top-level","title":"5.3: Structure of a computer - top level","text":""},{"location":"NOTES/Stage_2/computerSystems/#54-structure-of-cpu","title":"5.4: Structure of CPU","text":""},{"location":"NOTES/Stage_2/computerSystems/#55-revisiting-resisters","title":"5.5: Revisiting Resisters","text":"<ul> <li>Types:<ul> <li>User visible registers<ul> <li>General Purpose registers </li> <li>Data registers</li> <li>Address registers </li> <li>Status and condition code register</li> </ul> </li> <li>Internal (system) registers </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#551-user-visible-registers","title":"5.5.1: User Visible Registers","text":"<ul> <li>General Purpose:<ul> <li>true general purpose</li> <li>occasional use for data or addressing</li> <li>restricted use </li> </ul> </li> <li>Data <ul> <li>Primary data holders </li> <li>Accumulators</li> </ul> </li> <li>Address<ul> <li>segment or address</li> </ul> </li> <li>Condition Codes (Jump register)<ul> <li>used for storing jump labels and address </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#552-general-purpose-register","title":"5.5.2: General Purpose Register","text":"<ul> <li>Typically 8, 16,32 or 128 (Itanium)</li> <li>Fewer \\(\\rightarrow\\) more memory references </li> <li>More \\(\\rightarrow\\) does not reduce memory references (make more complex) and takes up processors space </li> </ul> <p>Each processor needs to be:</p> <ul> <li>Large enough to hold full address</li> <li>Large enough to hold full word</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#553-data-and-address-register","title":"5.5.3: Data and Address Register","text":"<ul> <li> <p>Data registers can hold numeric values such as integer and , in some architecture, floating-point values and other data.</p> <ul> <li>In some older and low-end CPUs, a special data register, known as the accumulator.</li> <li>The number required is determined by cost and architectural aspects, such as parallelism, the number of ALUs, etc.</li> </ul> </li> <li> <p>Address register hold addresses and used by instructions that indirectly access primary memory.</p> <ul> <li>Some processors contain registers that may not only be used to hold an address or only to hold numeric values.</li> <li>The number required is determined by the cost consideration and architecture.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#554-condition-code-registers","title":"5.5.4: Condition Code Registers","text":"<ul> <li> <p>Sets of individual bits.</p> </li> <li> <p>Can be read by programs.</p> </li> <li> <p>Can not be set by program.</p> </li> <li> <p>Two kinds: Control and Status registers:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#555-system-register","title":"5.5.5: System register","text":""},{"location":"NOTES/Stage_2/computerSystems/#56-control-unite-data-flow","title":"5.6: Control Unite: Data Flow","text":""},{"location":"NOTES/Stage_2/computerSystems/#561-cpu-control-steps-data-flow","title":"5.6.1: CPU Control Steps: Data Flow","text":"<ul> <li>Fetch instructions </li> <li>Interpret instructions </li> <li>Fetch data </li> <li>Process data </li> <li>Write data </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#562-cpu-instruction-cycle","title":"5.6.2: CPU Instruction cycle","text":"<ul> <li> <p>PC: (program counters) count the number of memory address number.</p> </li> <li> <p>MAR: (memory access registers) access the address of memory transferred from PC.</p> </li> <li> <p>MDR: (memory data registers) fetch the data or instruction from memory according to the address transferred for MAR.</p> </li> <li> <p>MBR: memory buffer registers</p> </li> <li> <p>IR: instruction register </p> </li> <li> <p>CIR: (current instruction register) decode and execute the instruction or data.</p> </li> <li> <p>CC: Condition code register </p> </li> </ul> <p></p> <ul> <li> <p>Fetching: The next instruction is fetched from the memory address (that is currently stored in the PC), and stored in the instruction register (IR). At theend of the fetch operation, the PC points to the next instruction that will be read in next cycle.</p> </li> <li> <p>Decode: during the cycle the encoded instruction in the IR is interpreted by the decoder.</p> </li> <li> <p>Execute: The CPU and ALU (Arithmetic Logic Unit) receive the signal and PC may be updated to a different address from which the next instruction will be fetched.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#563-data-flow-execute","title":"5.6.3: Data Flow (Execute)","text":"<ul> <li> <p>Fetch and Decode are very common in all CPU architectures, while Execute flow may vary.</p> </li> <li> <p>Execute usually does nit access main memory.</p> </li> <li> <p>May include:</p> <ul> <li>Memory read / write </li> <li>IO</li> <li>Register transfer </li> <li>ALU operation </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#564-data-flow-with-interrupt","title":"5.6.4: Data Flow (with interrupt)","text":"<ul> <li> <p>CPU data flow can be interrupted by IO or others.</p> </li> <li> <p>Current PC saved to allow resumption after interrupt.</p> </li> <li> <p>Data contents of the current instruction copied to MBR/MDR form memory.</p> </li> <li> <p>Instruction address saved in special memory location via MAR.</p> </li> <li> <p>After loaded the current flow then fetch the next instruction.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#564-prefetch","title":"5.6.4: Prefetch","text":"<ul> <li> <p>Some architectures can fetch next instruction during execution of current instruction (pipelining).</p> </li> <li> <p>Prefetch can require accessing main memory.</p> </li> </ul> <p></p> <ul> <li>Prefetch offers good performance as it reduces the latency between CPU and the main memory.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#565-pipelining","title":"5.6.5: Pipelining","text":"<ul> <li> <p>Fetch instruction (memory read)</p> </li> <li> <p>Decode instruction (internal decode)</p> </li> <li> <p>Control operand addresses (internal control)</p> </li> <li> <p>Fetch operand (memory read)</p> </li> <li> <p>Execute instructions (ALU)</p> </li> <li> <p>Write result (write memory)</p> </li> <li> <p>Overlap these operations.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#566-timing-of-pipelining","title":"5.6.6: Timing of Pipelining","text":""},{"location":"NOTES/Stage_2/computerSystems/#567-branch-in-pipelining","title":"5.6.7: Branch in Pipelining","text":""},{"location":"NOTES/Stage_2/computerSystems/#568-branch-prediction","title":"5.6.8: Branch Prediction","text":"<ul> <li> <p>Predict the next jump.</p> </li> <li> <p>Predict never taken (bad condition, pessimistic)</p> <ul> <li>Assume the jump will not happen.</li> <li>Always fetch next instruction.</li> <li>Do not prefetch after branch.</li> </ul> </li> <li> <p>Predict always taken (good condition, optimistic) </p> <ul> <li>Assume the jump will happen during fetch.</li> <li>Next fetch the branch target instruction.</li> <li>Newer processors.</li> </ul> </li> <li> <p>Predict by Opcode:</p> <ul> <li>Some instructions are more likely to jump than others.</li> <li>Can get up to 75% success.</li> </ul> </li> <li> <p>Taken/Not taken switch</p> <ul> <li>Based on a previous history.</li> <li>Good for loops.</li> </ul> </li> <li> <p>Delayed Branch </p> <ul> <li>Do not take jump until you have to.</li> <li>Do all current in sequency until jump instruction.</li> <li>Rearrange instructions.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#569-pipeline-stalls-5-stages-example","title":"5.6.9: Pipeline stalls - 5 stages example","text":"<ul> <li>If the machine have two transfer ports.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#5610-speed-up-equation-for-pipelining","title":"5.6.10: Speed up Equation for Pipelining","text":"<p>Without pipelining, cycles per instruction is equal to the number of stages in Data Flow; assuming each stage requires 1 cycle (=Ideal CPI x Pipeline depth)</p> <p></p> <p>For example:</p> <ul> <li> <p>Machine A: Dual port DRAM system, same clock for both piped and unpipelined.</p> </li> <li> <p>Machine B: single port DRAM system, but it's pipeline implementation has a 1.05 times faster clock rate.</p> </li> <li> <p>Ideal CPI = 1 for both: what are their comparative speed ups when Loads are 40% of the instructions executed?</p> </li> <li> <p>Assume same clock for pipelined system:</p> </li> </ul> <p></p> <ul> <li>Machine A is 1.33 times faster. </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#5611-pipelined-architectures-examples","title":"5.6.11: Pipelined Architectures: Examples","text":""},{"location":"NOTES/Stage_2/computerSystems/#57-control-unit-cpu-types","title":"5.7: Control Unit: CPU Types","text":""},{"location":"NOTES/Stage_2/computerSystems/#571-von-neumann-architecture","title":"5.7.1: Von Neumann architecture","text":"<ul> <li>common store for program and data </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#572-structure-of-a-typical-cpu","title":"5.7.2: Structure of a Typical CPU","text":""},{"location":"NOTES/Stage_2/computerSystems/#58-cisc-and-risc","title":"5.8: CISC and RISC","text":"<ul> <li> <p>CISC: complex instruction set computer </p> </li> <li> <p>RISC: reduced instruction set computer </p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#581-risc-philosophy","title":"5.8.1: RISC philosophy","text":"<ul> <li> <p>Instructions of fixed length executing in a single clock cycle.</p> </li> <li> <p>Pipelines to achieve one-instruction-per-clock-cycle (need to predict branches in program flow in advance)</p> </li> <li> <p>Simple control logic and no micro code.</p> </li> <li> <p>Operations performed on internal registers only; only LOAD and STORE instructions access external memory.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#582-cisc-characteristics","title":"5.8.2: CISC characteristics","text":"<ul> <li> <p>Binary compatibility.</p> </li> <li> <p>Complex control logic.</p> </li> <li> <p>Use of micro code.</p> </li> <li> <p>Variable-length instructions to save program memory.</p> </li> <li> <p>Small internal register sets.</p> </li> <li> <p>Complex addressing modes, operands can reside in external memory or internal registers.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#583-risc-versus-cisc","title":"5.8.3: RISC versus CISC","text":""},{"location":"NOTES/Stage_2/computerSystems/#59-cpu-alus","title":"5.9: CPU: ALUs","text":""},{"location":"NOTES/Stage_2/computerSystems/#591-arithmetic-and-logic-unit-alu","title":"5.9.1: Arithmetic and Logic Unit (ALU)","text":"<ul> <li> <p>Arithmetic: an instruction involving just arithmetic des not involve any communication with the outside, so it is very fast.</p> </li> <li> <p>The ALU can perform a number of operations e.g. AND, NOT, XOR, &gt;&gt;, &lt;&lt;, etc.</p> </li> <li> <p>The operation is selected by a function code F, which is implemented by means of a decoder. This decoder enables one of the functions.</p> </li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#592-building-n-bit-alus","title":"5.9.2: BUilding N-bit ALUs","text":"<ul> <li>To make an N-bit ALU: duplicated the 1-bit ALU N times.</li> </ul>"},{"location":"NOTES/Stage_2/computerSystems/#593-understanding-cpu-operations","title":"5.9.3: Understanding CPU operations","text":"<ul> <li> <p>The decoder determines the nature of the instruction in IR, and passes this on to the PLA.</p> </li> <li> <p>The control Programmable Logic Array takes in information from all the other modules, and generate the data path operations.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#594-example-instruction-fetch","title":"5.9.4: Example: Instruction fetch","text":"<ul> <li> <p>Fetching an arithmetic instruction form memory for example.</p> </li> <li> <p>Loading IR with the contents of the memory location pointed to by by PC.</p> </li> <li> <p>The operation will be like:</p> <ul> <li>Load PC (1) into MAR (2). This require control signals to the PC and MAR. The address will start to propagate over the system bus.</li> <li>Set external control signal to indicate Read (3).</li> <li>The memory retrieves the data, and puts it on the data bus. Wait until completion.</li> <li>Load MDR (4) and enable IR (5) to be decoded. This require control signals to IR and MDR.</li> </ul> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/computerSystems/#595-example-alu-based-execution","title":"5.9.5: Example: ALU-based Execution","text":"<p>Supposed we want R3 to be set to the sum of R2 and R1. </p> <ul> <li> <p>load R2 (1) into A latch (2).</p> </li> <li> <p>load R1 (3) into B latch (4).</p> </li> <li> <p>set ALU to addition mode (5) by Control Path.(PLA output).</p> </li> <li> <p>store accumulator (6) in R3 (7).</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/","title":"Digital Electronics","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#i-logic-design-part-1","title":"I: Logic Design Part-1","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#1-introduction","title":"1: Introduction","text":"<ul> <li> <p>Design based on Boolean algebra using combinatorial logics gates and sequential logic.</p> </li> <li> <p>Computer-aided design used and hence the inclusive of VHDL for hardware description.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#11-building-blocks","title":"1.1: Building blocks","text":"<ul> <li>Basic logic gates and their inverses:</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#12-logic-integration","title":"1.2: Logic Integration","text":"<ul> <li> <p>Discrete elements:</p> <ul> <li>Assemble gates from transistors, diodes, etc.</li> </ul> </li> <li> <p>SSI, MSI - integrated circuits. </p> </li> <li> <p>LSI, VLSI (very large IC)</p> <ul> <li>More gates on a chip </li> </ul> </li> <li> <p>Design style progress:</p> <ul> <li>Programmable, semicustom and custom.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#13-digital-logic-structure","title":"1.3: Digital logic Structure","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#14-cmos-transistors","title":"1.4: CMOS transistors","text":"<ul> <li>MOSFETs are voltage-controlled switches used to make logic gates.</li> </ul> <ul> <li>CMOS Inverter can be built using two transistors.</li> </ul> <ul> <li>CMOS two input NOR Gate:</li> </ul> <ul> <li>CMOS four-input NAND Gate:</li> </ul> <ul> <li> <p>Gates with more than four inputs are rarely implemented directly, which can be composed of multiple gates with fewer inputs.</p> </li> <li> <p>The negative logic gates can used as universal gates.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#2-programmable-logic","title":"2: Programmable logic","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#21-programmable-logic","title":"2.1: Programmable logic","text":"<ul> <li> <p>The generalized logic circuits can lead to a possibility of arbitrary logic, hence the Programmable Logic Array (PLA).</p> </li> <li> <p>Based on the fact that nay Boolean function can be represented as a sum of products.</p> </li> <li> <p>PLD based on a PLA consists of a programmable array of AND gates and a fixed array of OR gates.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#22-sum-of-products","title":"2.2: Sum of products","text":"<ul> <li> <p>Any Boolean function can be represented as a sum of products.</p> </li> <li> <p>And a boolean function can be found through a truth table.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#23-sum-of-products-direct-implementation","title":"2.3: Sum of products direct implementation","text":"<ul> <li>The PLA is divided into the AND plane and OR plane:<ul> <li>The outputs of the AND plane are the product terms.</li> <li>Then these products terms become the inputs of the OR plane.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#24-buffering-implementation","title":"2.4: Buffering implementation","text":"<ul> <li>Each input variable needs to have both positive and negative wires:</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#25-programmable-gates","title":"2.5: Programmable Gates","text":"<p>For example of an AND gate with \\(x_0\\), \\(\\bar{x_1}\\), \\(x_2\\) three inputs:</p> <p></p> <p>if connects to the OR array:</p> <p></p> <p>We can also use the textual description:</p> <p></p> <p>This plane is then defined by this \"bit map\".</p> <p>With n inputs and m outputs, the size of PLA can be calculated as m(2n+q) cells.</p>"},{"location":"NOTES/Stage_2/digitalElectronics/#26-minimization-of-pla-equations","title":"2.6: Minimization of PLA equations","text":"<ul> <li> <p>For special-purpose PLA, their size can be minimized.</p> </li> <li> <p>The target of minimizing are:</p> <ul> <li>The total number of gates and as few gates as possible.</li> <li>Then number of inputs into each gate as small as possible.</li> </ul> </li> <li> <p>For PLA, the following wires going into each gates (n) and number of OR gates (q)</p> </li> <li> <p>The number of AND gates and the inputs into each OR gates can be reduced.</p> </li> </ul> <p>For example, \\(y_0 = r_0\\) and \\(y_1 = r_0 + r_2\\), \\(r_0\\) appears twice in outputs. To minimize, it only needs to be created once.</p> <ul> <li>PLA minimization is finding equivalent formulas to reduce m.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#27-from-truth-table-to-pla-bitmaps","title":"2.7: From truth table to PLA bitmaps","text":"<ul> <li> <p>Using the RHS of truth table forming the OR plane: </p> </li> <li> <p>Using all the value '1' in LHS forming AND plane positive column:</p> </li> </ul> <p></p> <ul> <li>Using all value '0' in LHS forming AND plane negative column:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#28-sum-of-product-sop","title":"2.8: Sum-of-Product SOP","text":"<p>We can deduce the sum-of-product formula from the truth table value:</p> <ul> <li>Firstly, find out the SOP using result '1' lines:</li> </ul> \\[ z = \\bar{a}\\bar{b}c + \\bar{a}bc + a\\bar{b}\\bar{c} + a\\bar{b}c + abc \\] <ul> <li>Next step, rewrite the formula to product-of sum form (POS):</li> </ul> \\[ z = (a+b+c).(a+\\bar{b}+c).(\\bar{a}+\\bar{b}+c) \\]"},{"location":"NOTES/Stage_2/digitalElectronics/#29-basic-rules-of-boolean-algebra","title":"2.9: Basic rules of Boolean algebra","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#210-andor-vs-nandnor-implementation-of-sop-expression","title":"2.10: AND/OR vs NAND/NOR implementation of SOP expression","text":"<ul> <li>Implementing an SOP expression simply requires ORing the outputs of AND gates.</li> </ul> <ul> <li>NAND gates can be used to implement an SOP expression:</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#211-the-karnaugh-map-k-map","title":"2.11: The Karnaugh Map (K-map)","text":"<ul> <li> <p>The Karnaugh map can be used to minimize the Boolean function z(a,b,c).</p> </li> <li> <p>First write down the true table in K map:</p> </li> </ul> <p></p> <ul> <li>Then draw the circle to combine the nearly blocks:</li> </ul> <p></p> <ul> <li> <p>The result will be \\(z = a\\bar{b}+c\\)</p> </li> <li> <p>The same for 4 variable K-map:</p> </li> </ul> <p></p> <ul> <li>The result will be \\(z = a\\bar{b}+a\\bar{c}+\\bar{b}\\bar{c}\\)</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#212-multiple-output-minimization","title":"2.12: Multiple output minimization","text":"<ul> <li> <p>The key point is to find common-product term.</p> </li> <li> <p>Increase the number of AND gates, decrease the number of m.</p> </li> <li> <p>For example of:</p> </li> </ul> <p></p> <ul> <li>The first step is to find all ANDs:</li> </ul> <p></p> <ul> <li>Finally we find that m reduced to 2:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#213-hardware-implementation-of-connection-bitmaps","title":"2.13: Hardware implementation of connection bitmaps","text":"<ul> <li> <p>Hard-wired: NOT programmable.</p> </li> <li> <p>Single-time programmable: WORM (Write once read only).</p> </li> <li> <p>Multiple-time programmable: connections done through transistors switches controlled by external signals.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#214-diagram-review-of-pla","title":"2.14: Diagram review of PLA","text":"<ul> <li>Fuses used for non-programmable and single programmable.</li> </ul> <ul> <li>CMOS (transistors) used in multiple programmable device.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#215-full-programmability","title":"2.15: Full programmability","text":"<ul> <li> <p>Full programmability only requires one of the plane to have programmability:</p> </li> <li> <p>AND gates fixed and programmable OR gates are enough for full programmability.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#216-more-complex-k-maps","title":"2.16: More complex K-maps","text":"<ul> <li>Minimize the 5-variables expression fro example:</li> </ul> <ul> <li> <p>We can go with a 3D presentation of the K-map.</p> </li> <li> <p>\\(z = f(a,b,c,d,e)\\) can be expressed as $ z= f_{e=0}(a,b,c,d) + f_{e=1}(a,b,c,d)$.</p> </li> </ul> <p></p> <ul> <li>For six variables:</li> </ul> <p></p> <p></p> <ul> <li>To solve the problem in example, we can rewrite to:</li> </ul> \\[ G =G_{V=0} + G_{V=1} \\] <p>then </p> \\[ G_{V=0} = X\\bar{Y}\\bar{Z} + WX\\bar{Y}\\bar{Z} \\\\ G_{V=1} = \\bar{Y}\\bar{Z} +\\bar{X}Y\\bar{Z} +WX\\bar{Y}\\bar{Z} \\] <p></p> <ul> <li>The result finally be \\(G = X\\bar{Y}\\bar{Z} + V\\bar{X}\\bar{Z}\\)</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#ii-from-plas-to-fpgas","title":"II: From PLAs to FPGAs","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#1-pla-usage","title":"1: PLA Usage","text":"<ul> <li>General PLA in CPU:</li> </ul> <p>The control PLA takes in information and play a role as the controller.</p> <p>Usually not optimizable, but fully programmable at design-time to accommodate CPU.</p> <ul> <li>General and Custom PLA:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#2-complex-programmable-logic-device-cpld","title":"2: Complex Programmable Logic Device (CPLD)","text":"<ul> <li> <p>Complex devices extend the idea of programmable logic further.</p> </li> <li> <p>A matrix of PLAs and programmable interconnection array (PIA)</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#3-field-programmable-gate-array-fpga","title":"3: Field programmable gate array (FPGA)","text":"<ul> <li> <p>FPGA employs another approach programmable logic (not based on PLA)</p> </li> <li> <p>The three basic elements are configurable logic block (CLB) or logic array block (LAB), the interconnections, and the IO Blocks. </p> </li> </ul> <p></p> <ul> <li> <p>Each CLB is made up of multiple smaller logic modules and a local programmable interconnect used to connect logic modules within CLB.</p> </li> <li> <p>General FPGA cell:</p> </li> </ul> <p></p> <ul> <li> <p>SRAM -Based FPGAs </p> <ul> <li>FPGAs are either non-volatile because they are based on SRAM.</li> </ul> </li> </ul> <p></p> <ul> <li>FPGA Cores:<ul> <li>A hard core is a portion of logic in an FPGA that is put in by the manufacturer to provide a specific function and that cannot be reprogrammed.</li> </ul> </li> </ul> <p></p> <ul> <li>Specific FPGA Devices:<ul> <li>Example FPGA block diagram: Several manufacturer produce FPGAs as well as CPLDs.</li> </ul> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#iii-memories-in-logic-design","title":"III: Memories in logic design","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#1-introduction_1","title":"1: Introduction","text":"<ul> <li> <p>Gate-level memory cells (latches, flip-flops), used in CPU registers.</p> </li> <li> <p>Transistor level volatile memory cell:</p> <ul> <li>SRAM, used in cache memory.</li> <li>DRAM, used in main memory.</li> </ul> </li> <li> <p>Floating-gate memory cells (flash), non-volatile.</p> </li> <li> <p>FRAM, MRAM, Memristors: non-volatile.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#2-sr-latch","title":"2: SR Latch","text":"<ul> <li>Simplest memory elements based on a cross-paired of two input NAND or NOR gates.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#21-gated-sr-latch","title":"2.1: Gated SR Latch","text":"<ul> <li>The enable input E can define whether it is enabled for SR latch to receive signals. (only E = '1')</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#3-gated-d-latch","title":"3: Gated D Latch","text":"<ul> <li>D latch only have one input D in addition to E.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#31-d-flip-flop","title":"3.1: D flip-flop","text":"<ul> <li>Controlled by a periodic control signal, eg. CLK<ul> <li>Memory for single bit.</li> <li>Fast, high power.</li> <li>20 transistors as below design.</li> </ul> </li> </ul> <ul> <li>Operation:</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#4-sram","title":"4: SRAM","text":"<ul> <li>Simple single-bit memory </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#41-6t-sram","title":"4.1: 6T SRAM","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#5-dram","title":"5: DRAM","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#6-floating-gate-memory-cells","title":"6: Floating gate memory cells","text":"<ul> <li>Flash is based on floating gate.<ul> <li>FGMOS transistor </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#iv-arithmetic-logic-adders","title":"IV: Arithmetic Logic-Adders","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#1-digital-arithmetic","title":"1: Digital arithmetic","text":"<ul> <li> <p>Data path in charge of arithmetic operations.</p> </li> <li> <p>Controller defines the sequence of operations.</p> </li> <li> <p>Data path operation include:</p> <ul> <li>addition</li> <li>subtraction </li> <li>multiplication </li> <li>division </li> <li>AND, OR, etc.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#2-the-case-of-addition","title":"2: The case of addition","text":"<ul> <li> <p>Subtraction</p> <ul> <li>implemented by addition through the use of 2's complement.</li> <li>A - B = A + (2's complement of B)</li> </ul> </li> <li> <p>2's complement </p> <ul> <li>A bit string considers two interpretations:<ul> <li>Natural interpretation</li> <li>2's complement </li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li> <p>Multiplication:</p> <ul> <li>Multiplication is repeated addition. </li> </ul> </li> <li> <p>Division:</p> <ul> <li>The division can be divided into comparison and subtraction.</li> </ul> </li> </ul> <p></p> <ul> <li>Integer power and roots:<ul> <li>\\(A^n\\): repeated multiplication / division.</li> <li>\\(\\sqrt[n]{A}\\): successive approximation (monotony functions only)</li> </ul> </li> </ul> <p></p> <ul> <li>Functions not amenable for successive approximation:<ul> <li>Power series and lookup table approach.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#3-n-bit-adder","title":"3: N-bit adder","text":"<p>Simplify the boolean expression of full-adder:</p> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#31-adder-as-a-sum-of-products","title":"3.1: Adder as a Sum of Products","text":"<ul> <li> <p>No common product terms for random logic solution.</p> </li> <li> <p>AND and OR can be made using NAND.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#32-a-more-modular-approach","title":"3.2: A more modular approach","text":"<ul> <li>A half adder adds two operands A and B without taken in carry in \\(C_{in}\\).</li> </ul> <ul> <li>The practical point of the half adder is you can assemble a full adder using two half adders in modular fashion and end with smaller gates.</li> </ul> <ul> <li>Fewer gates, smaller gates but delay more from B to \\(C_{out}\\).</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#33-ripple-carry-adder","title":"3.3: Ripple carry adder","text":"<ul> <li> <p>\\(C_{in}\\) of next bit is \\(C_{out}\\) of current bit.</p> </li> <li> <p>If no \\(C_{in}\\), just wire \\(C_{in}\\) to 0.</p> </li> <li> <p>An n-bit adder can add two n-bits number.</p> </li> </ul> <p></p> <ul> <li>Delay problem:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#34-speeding-up-addition","title":"3.4: Speeding up addition","text":"<ul> <li> <p>For delay, carry is more critical.</p> </li> <li> <p>Fewer inputs gates are faster.</p> </li> <li> <p>Separate out non-carry portion.</p> </li> <li> <p>Composition of two half adders.</p> </li> <li> <p>Delay may different:</p> </li> </ul> <ul> <li>The max fan-in/fan-out = 2:</li> </ul> <p></p> <p>which delay is 2 gates per bit.</p>"},{"location":"NOTES/Stage_2/digitalElectronics/#35-more-focused-analysis","title":"3.5: More focused analysis","text":"<ul> <li>If we rename the signals as k for 1 to n.</li> </ul> <ul> <li>The carry to carry ripple delay is the critical path: \\(2n\\tau\\):</li> </ul> <ul> <li>Reviewing the truth table of adder, we may find the rule of propagate:</li> </ul> <ul> <li> <p>Carry Generate G = 1, then \\(C_{out}=1\\) whatever \\(C_{in}\\) is.</p> </li> <li> <p>Carry Propagate P = 1, then \\(C_{out}=C_{in}\\)</p> </li> <li> <p>As G and P are dependent on A and B nothing to do with \\(C_{in}\\), no need to wait for \\(C_{in}\\) signal.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#36-propagate-and-generate","title":"3.6: Propagate and Generate","text":"<ul> <li>P and G come from A and B and only have single gate delay \\(\\tau\\).</li> </ul> <ul> <li> <p>If we define every C signal as a sum of products of \\(G_k\\), \\(P_k\\) and \\(C_{in}\\) only.</p> </li> <li> <p>We generate the carry path by recursively using the formula: </p> </li> </ul> \\[ \\begin{equation*} \\begin{split}     C_k &amp;= G_k +P_kC_{k-1} \\\\      &amp;= G_k + P_k(G_{k-1}+P_{k-1}C_{k-2}) \\\\ \\end{split}  \\end{equation*} \\] <ul> <li> <p>Recursive until \\(C_{-1}\\) remains on the right side.</p> </li> <li> <p>All carries are evaluated in parallel:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#37-taking-out-the-carry-chain","title":"3.7: Taking out the carry chain","text":"<ul> <li>Combining existing parts to form a CLA adder:</li> </ul> <ul> <li>\\(S_k = P_k \\oplus C_{k-1}\\)</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#38-cla-adder-delay","title":"3.8: CLA adder delay","text":"<ul> <li>CLA adder formulas:</li> </ul> \\[ \\begin{equation*} \\begin{split}     C_k &amp;= G_k +P_kC_{k-1} \\\\      S_k &amp;= P_k \\oplus C_{k-1} \\\\ \\end{split}  \\end{equation*} \\] <ul> <li>The total CLA delay is therefore:</li> </ul> <ul> <li> <p>Remember ripple carry adder delay \\(2n\\tau\\).</p> </li> <li> <p>In this CLA design, the delay reduced from linear to constant.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#39-fan-in-and-fan-out","title":"3.9: Fan-in and Fan-out","text":"<ul> <li>We need to consider fan-in and fan-out for a realistic estimation of performance:<ul> <li>The CLA have fan-in and fan-out increasing with the increasing of bits.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#310-gate-switching","title":"3.10: Gate switching","text":"<ul> <li> <p>Gate switching can be modelled as the charging through resistors.</p> </li> <li> <p>The gate delay is noted as \\(\\tau = RC\\):</p> </li> </ul> <p></p> <ul> <li>For example of a NOR Gate with 2 fan-in and 4 fan-out:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#311-gate-delay","title":"3.11: Gate delay","text":"<ul> <li> <p>The rise and fall times of the voltage at Y in previous NOR gate example depends on the \\(C_{load}\\).</p> </li> <li> <p>\\(C_{load}\\) is proportional to fan-out N(Y), so that the gate delay is proportional to N(Y).</p> </li> <li> <p>Each input adds a pair of transistors to the gate which causing extra capacitance.</p> </li> <li> <p>In general, pull-up and pull-down delays are not equal.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#312-fan-out-delay-cost","title":"3.12: Fan-out delay cost","text":"<ul> <li> <p>Drive m outputs - single gate delay has become \\(m\\tau\\).</p> </li> <li> <p>CLA is even worse than ripple carry in the cost of delay as for a single \\(P_n\\) will be several fan-out.</p> </li> <li> <p>To solve this problem, we use fan-in (out) trees to decrease the number of fan-out by adding levels.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#313-fan-out-fan-in-buffers","title":"3.13: Fan-out / Fan-in buffers","text":"<ul> <li> <p>For this condition, the fan-out (controlled gate) of one gate is only 3.</p> </li> <li> <p>If we note B is the branching ratio and L is the level, the realistic controlled by the input is \\(B^L\\), which is 27 in this condition.</p> </li> <li> <p>As we know, the delay time is proportional to the total value of capacitance.</p> </li> <li> <p>To calculate the equivalent capacitance of fan-out (parallel), we can find that \\(C_{load}=B \\times C_{load_in}\\).</p> </li> <li> <p>As the fan-out is same for each level, if we note 'k' is the proportional constant, the total delay is :</p> </li> </ul> \\[ t_{tot} = L \\times k \\times B \\] <ul> <li> <p>Compare the total delay of this method (9k) and common method (27k), it reduced obviously.</p> </li> <li> <p>As the delay is \\(kBL\\), we can change the value of B or L as long as BL is constant:</p> </li> </ul> <p></p> <ul> <li> <p>The optimal value for B is \\(e \\approx 2.718\\).</p> </li> <li> <p>In custom, the fan-out and fan-in should be limited to 4 for optimal performance.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#314-fan-out-tree-optimization","title":"3.14: Fan-out Tree optimization","text":"<ul> <li>The best possible worst-case delay for a buffer delay is:</li> </ul> \\[ t_{pd} = 4 + B[ns] \\] <ul> <li>If we want a fan-out of 60, for B = 2:</li> </ul> <ul> <li>For B = 3:</li> </ul> <ul> <li>For B = 4:</li> </ul> <ul> <li>For B = 5:</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#315-fan-in-optimization-example","title":"3.15: Fan-in optimization example","text":"<ul> <li> <p>Consider a circuit which used to justify if all bits of a 64-bit word are zero.</p> </li> <li> <p>The easiest way is using the NAND gate or NOR gate with 64 fan-in and 1 fan-out.</p> </li> <li> <p>To reduce the delay, we can use the circuit below which combine the NOR gate and NAND gate:</p> </li> </ul> <p></p> <ul> <li>The delay formula is given as:</li> </ul> \\[ t = 2+ (1\\times B_{in}) + (2 \\times B_{out})[ns] \\] <ul> <li>And we can change the number of fan-in as well as the level (layer) of the gate:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#4-large-adders","title":"4: Large Adders","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#41-adder-size-limits","title":"4.1: Adder size limits","text":"<ul> <li>For a 4-bit adder delays:</li> </ul> <ul> <li> <p>CLA has better performance, but the max fan-out delay grows with adder size.</p> </li> <li> <p>CLA adder size therefore cannot be more bits and 4-bits is almost the optimizable choice.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#42-large-adder-design","title":"4.2: Large adder design","text":"<ul> <li>Two ways to extend the size of these adders, whilst keeping the fan-in an fan-out problem in check:<ul> <li>Ripple carry</li> <li>Block carry</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#421-ripple-carrying-cla-blocks","title":"4.2.1: Ripple carrying CLA blocks","text":"<ul> <li>Ripple carry with constant max fan-in and fan-out unrelated to the size of adder, can be applied between CLA adder blocks.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#422-block-carry-of-cla","title":"4.2.2: Block carry of CLA","text":"<ul> <li> <p>We use the same CLA method to a 4-bit CLA. Instead of using the \\(C_3\\) as the output, the block carry needs to output G and P, which can also be noted as \\(G'\\) and \\(P'\\).</p> </li> <li> <p>Block carry generate G':</p> <ul> <li>G' = 1 when carry is generated without regard to \\(C_{in}\\).</li> </ul> </li> <li> <p>Block carry propagate P':</p> <ul> <li>P' = 1 when block carry output depends on block carry input.</li> </ul> </li> <li> <p>The 4-bit adder carry output is redefined as:</p> </li> </ul> <p></p> <ul> <li>The output of normal of CLA is \\(C_{n-1}\\)</li> </ul> <p></p> <ul> <li>The output of the block CLA is \\(G\\) and \\(P\\).</li> </ul> <p></p> <ul> <li> <p>Example of 16 bits CLA:</p> <ul> <li>Delay to form G, P is 1 \\(\\tau\\)</li> <li>Delay to form final sum is 1 \\(\\tau\\)</li> <li>Delay to do the first carry calculation C0, C1, C2 is  2 \\(\\tau\\)</li> <li>Delay to do other carry calculation (in parallel) is 2 \\(\\tau\\)</li> <li>Delay to do CLA is 2 \\(\\tau\\)</li> </ul> </li> <li> <p>Each level multiply the size by 4, only adds a constant of \\(4\\tau\\):</p> </li> </ul> <p></p> <ul> <li>We can find that O(n) to O(log(n)) in this method.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#5-multiplication-basics","title":"5: Multiplication Basics","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#51-binary-multiplication","title":"5.1: Binary multiplication","text":"<ul> <li>Long multiplication example as 13 \\(\\times\\) 11:</li> </ul> <ul> <li>This requires 3 or n-bit adder.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#52-parallel-multiplier","title":"5.2: Parallel Multiplier","text":"<ul> <li>We don't need to complete each partial product before starting the next.</li> </ul> <ul> <li> <p>Before you can add in \\(r_0d_2\\), the previous row's addition needs to have processed to column 2.</p> </li> <li> <p>The addition order is a kind of wavefront form \\(r_0d_0\\), \\(r_0d_1\\),\\(r_0d_2\\) to \\(r_0d_3\\), as the red line in below:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#521-delay-analysis","title":"5.2.1: Delay analysis","text":"<ul> <li> <p>Using the previous method:</p> <ul> <li>Single \\(\\tau\\) for one-bit multiplication (using AND gate, fully parallel)</li> <li>Addition step has a delay which is approx to \\(\\tau\\log n\\) if we use the CLA adder.</li> </ul> </li> <li> <p>To reduce the delay, we find that the adding starts from the right-side, so some bit-wise multiplication in the left is not required:</p> </li> </ul> <p></p> <ul> <li>So we can use the only calculate what we need (Note that the figure may not correct)</li> </ul> <p></p> <ul> <li>Using the delay analysis of Ripple Carry Adder, we can find the delay of:</li> </ul> <ul> <li>If we set \\(n\\) is the partial product number, so the total delay can be expressed as:</li> </ul> \\[ 1\\tau (n-1) + 3\\tau (n-1) + 2\\tau (n-1) = 6n\\tau - 6\\tau \\] <ul> <li>Compared to the previous method delay of \\(\\tau + k_1.(n-1).\\log{n}.\\tau\\), the parallel method is only \\(k_2.(n-1).\\tau\\)</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#522-scope-for-further-speedup","title":"5.2.2: Scope for further speedup","text":"<ul> <li> <p>The last-row ripple-carry adder cannot be replaced by CLA cause the feed-in are not parallel.</p> </li> <li> <p>The carry chain still exist on downward path.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#523-carry-save-scheme","title":"5.2.3: Carry-save scheme","text":"<ul> <li> <p>We may change the algorithm so that the final product remains but each row have different partial product, which means the final result of each row appearing at the same time.</p> </li> <li> <p>If we want to add two A + B block, the carry number need to be passed leftward:</p> </li> </ul> <p></p> <ul> <li>But if we add three A + B block, the addition order can be changed as right (carry-save) or left (previous):</li> </ul> <ul> <li> <p>This doesn't work if there is only one adder row.</p> </li> <li> <p>The final row needs special attention to catch all carries saved from the previous row, we use CLA here.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#524-16-x-16-multiplier-example","title":"5.2.4: 16 x 16 Multiplier Example","text":"<ul> <li> <p>As there is no more leftward carry in the first row, so the full-adders can be replaced by half-adders (HA).</p> </li> <li> <p>The delay depth per row is now a single instead of two.</p> </li> <li> <p>One more row because of carry save.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#525-per-row-delay-reduction","title":"5.2.5: Per-row delay reduction","text":"<ul> <li>The previous ripple carry delay per-row is \\(4\\tau\\), which only happen  at the right-most diagonal:</li> </ul> <ul> <li>The total delay is only \\(2\\tau\\) in the carry save condition:</li> </ul> <ul> <li> <p>Passing to the next row avoids the sequential propagation (the waiting for the previous signals) within single row.</p> </li> <li> <p>The total delay consist of:</p> <ul> <li>One A, B to S delay (\\(2\\tau\\)) for n-1 row.</li> <li>Last row is block CLA adder (log delay)</li> </ul> </li> <li> <p>Assuming a 4-bits CLA adders in the final row, the delay is:</p> </li> </ul> \\[ D = 2(n-1)\\tau + 4\\tau \\log_{4}{n} + \\tau \\] <ul> <li>If we use ripple-carry adder in the last line, the delay will be:</li> </ul> \\[ D = 4(n-1)\\tau + 2(n-2)\\tau + \\tau \\]"},{"location":"NOTES/Stage_2/digitalElectronics/#526-further-speedup-methods","title":"5.2.6: Further Speedup Methods","text":"<ul> <li> <p>Wallace / Dadda trees</p> <ul> <li>Reduce the middle layer of partial product.</li> <li>The total time is O(log(n))</li> </ul> </li> <li> <p>Approximate computing</p> <ul> <li>Full precision is not needed most of time.</li> <li>Eg. if we use a OR gate as a single-bit adder, the accuracy is 75%.</li> </ul> </li> <li> <p>Analogue Multiplier</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#53-serial-multiplier","title":"5.3: Serial Multiplier","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#531-serial-arithmetic","title":"5.3.1: Serial arithmetic","text":"<ul> <li> <p>Parallel Multiplier featuren large hardware size.</p> </li> <li> <p>The block CLA multiplier makes the addition happens in 1 step, each step is the same, so we don't need n-1 n-bit block CLA adders.</p> </li> <li> <p>If we reuse the same CLA repeatedly n-1 times, this is method of serial operation.</p> </li> <li> <p>The carry-save multiplier is parallel at the level of individual cell, which can also be serialized.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#532-serial-multiplication","title":"5.3.2: Serial Multiplication","text":"<ul> <li> <p>If the multiplication / AND step is also serialized, we need \\(2n\\) AND gates.</p> </li> <li> <p>A single adder (block CLA for speed)</p> </li> <li> <p>Some memory to store partial products between steps.</p> </li> <li> <p>Significant reduction of silicon compared to the parallel version.</p> </li> <li> <p>The simpler version of serial multiplier:</p> <ul> <li>Repeatedly using a single adder row and a single row of ANDs.</li> </ul> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#533-the-algorithm-of-serial-multiplication","title":"5.3.3: The algorithm of serial multiplication","text":"<ul> <li>The sequence of the operations should be:<ul> <li>Load R and D, and reset P to 0.</li> <li>Add the partial product \\(r_0\\) AND D to P.</li> <li>Shift R right 1 bit; Shift D left 1 bit.</li> <li>Repeat from step 2 for 4 times.</li> </ul> </li> </ul> <ul> <li> <p>Multiplying two n-digit numbers the result may be up to 2n digit wide.</p> </li> <li> <p>Adding two n-digit numbers the result may be up to n+1 digits wide.</p> </li> <li> <p>Shifting the R Register right makes it possible to AND the correct \\(r_i\\).</p> </li> <li> <p>Shifting the D register left can ensure the last-digit on the left is zero in partial product register.</p> </li> <li> <p>Time control signals for the registers:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#534-improvement-of-serial-multiplication","title":"5.3.4: Improvement of Serial multiplication","text":"<ul> <li> <p>Half of the bits in the adder have 0 in each addition steps.</p> <ul> <li>Only half of the adder is ever used at a time.</li> <li>We can do this with a n-bit adder instead of 2n-bit adder.</li> </ul> </li> <li> <p>It may save registers and AND gates as well.</p> </li> <li> <p>So if we apply a smaller version, the size an be reduced if the output register shifts.</p> </li> <li> <p>For example of 13 x 11 (1101 x 1011):</p> </li> </ul> <p></p> <ul> <li> <p>In each calculation, we can right-shift the register instead of the D or R.</p> </li> <li> <p>Move one of the partial product when doing the adding:</p> </li> </ul> <p></p> <ul> <li> <p>As we are doing the right-shift for the R register, it is gradually empty from left to right.</p> </li> <li> <p>The right-hand cell storing the right-shifted value can be replaced by Multiplier R:</p> </li> </ul> <p></p> <ul> <li>The carry bit is not necessory if the adder drops the result to the right by one bit (combine add with shift).</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#535-delay-calculation","title":"5.3.5: Delay Calculation","text":"<ul> <li> <p>After initialization, the multiplier takes n CLK cycle to multiply two n-bits numbers:</p> </li> <li> <p>Each addition takes one n-bit adder delay, which should be accomodate with the CLK cycle.</p> </li> <li> <p>Assuming using the CLA adder, the delay should be \\(n(4\\tau\\log_{4}{n})\\) (the max of CLA block is 4).</p> </li> <li> <p>So it is O(n x log(n))</p> </li> <li> <p>For n = 16, the delay is 128\\(\\tau\\).</p> </li> <li> <p>CLA serial multiplier is slower, and the size also grow with n because of CLA trees.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#536-carry-save-in-serial-multiplier","title":"5.3.6: Carry-save in serial multiplier","text":"<ul> <li>Carry-save in serial multipliers:<ul> <li>Carry-bits must be stored in a register between steps; If D is shifted, the partial product are accumulated at the same position and the carry is shifted to the left at each clock., which requires 2n single-bit adder.</li> </ul> </li> </ul> <ul> <li> <p>Combining shift with add:</p> <ul> <li>if the product register P is shifted and D remains the same, thesum outputs must be shifted right each clock and the carries remain at the same position, which requires n single-bit adders.</li> </ul> </li> <li> <p>As the steps are controlled by clocks, we cannot exploit the tolerance for late \\(C_{in}\\) to produce \\(C_{out}\\). S and \\(C_{out}\\) must be ready at the clock edge.</p> </li> </ul> <p></p> <ul> <li>However, the space savings from serialization, we can make the single-bit adders a bit bigger and use the sum-of-product truth table design which has two layers of gates for a delayed of \\(2\\tau\\)</li> </ul> <p></p> <ul> <li> <p>Carry-save allows the parallelization of carries, and the remaining carries must be added at the last step.</p> <ul> <li>n-1 CLK steps needed, with D held at 0, to sort out the final carries (like ripple-carry scheme)</li> </ul> </li> <li> <p>Delay at each step is now only 1 adder delay (\\(2\\tau\\)):</p> <ul> <li>\\(t_{total} = (n+(n-1))\\times 2\\tau\\)</li> </ul> </li> <li> <p>The time-complexity is O(n).</p> </li> <li> <p>For example, for n =16, the delay is 62 \\(\\tau\\) without AND gates.</p> </li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#v-sequential-logic-control-and-fsm","title":"V: Sequential Logic: Control and FSM","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#1-basic-control","title":"1: Basic control","text":"<ul> <li>Data path needs to be put under control, which could determine when the previous step ends and next step starts.</li> </ul>"},{"location":"NOTES/Stage_2/digitalElectronics/#11-hazard","title":"1.1: Hazard","text":"<ul> <li> <p>For different signals reach the same port at different time, it may cause an unexpected pause.</p> </li> <li> <p>Hazards do not necessarily lead to errors.</p> </li> <li> <p>To avoid hazards:</p> <ul> <li>Adding extra gates / delays</li> <li>Synchronous design </li> </ul> </li> <li> <p>For example of a D-FF with one enable output:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#2-finite-state-machine-fsm-types","title":"2: Finite State Machine (FSM) Types","text":"<ul> <li> <p>Two main FSM types:</p> <ul> <li>Sync:  State changes only on the CLK pulse.</li> <li>Async: State changes when input changes </li> </ul> </li> <li> <p>In sync-FSM, there are:</p> <ul> <li>Mealy:  output is valid at the CLK' event. Output depends on state and inputs.</li> <li>Moore: output valid during entire CLK period.</li> </ul> </li> <li> <p>For Mealy model FSM:</p> </li> </ul> <p></p> <ul> <li>For Moore model FSM:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#3-sync-fsm-minimization","title":"3: Sync-FSM minimization","text":""},{"location":"NOTES/Stage_2/digitalElectronics/#31-y-map-k-map-reduction","title":"3.1: Y-map / K-map reduction","text":"<ul> <li>From the state-graph shown above, we can convert it to Y-map:</li> </ul> <ul> <li> <p>If we using binary code '0' and '1' for two state S0 and S1, the map can be shown as above. For more states such as 4 states, '00','01','11', '10' can be applied.</p> </li> <li> <p>To find the relation of Y(x,y) and Z(x,y), K-map for each function can be deduced:</p> </li> </ul> <p></p> <ul> <li>For more complicated condition:</li> </ul> <p></p> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#32-finding-equivalence-redundancies","title":"3.2: Finding equivalence / redundancies","text":"<ul> <li> <p>Rows are equivalent if their outputs are the same and their next states are equivalent or identical.</p> </li> <li> <p>If we can find two different states have at least one input sequence to make the output different, it is called the distinguishable.</p> </li> <li> <p>If not distinguishable, the two states are called 'equivalence'.</p> </li> <li> <p>As the example below, we can use the implication table to check equal and reduce the states numbers:</p> </li> </ul> <p></p> <p></p> <ul> <li>Finally:</li> </ul> <p></p> <p></p> <ul> <li>So the new table can be expressed as:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#4-async-fsm-minimization","title":"4: Async-FSM minimization","text":"<ul> <li> <p>To reduce cost, async-FSM can be applied.</p> </li> <li> <p>State changed immediately on an input change.</p> </li> </ul> <p></p> <ul> <li> <p>In async-FSM, we use Fundamental Mode iff:</p> <ul> <li>Only one input is allowed at a time.</li> <li>The input changes only when y is stable.</li> </ul> </li> <li> <p>We use primitive flow tables to describe the transition:</p> </li> </ul> <p></p> <ul> <li> <p>The steady state is circled, such as in state-1, when input is 00, the next-state is still state-1.</p> </li> <li> <p>Two-bits changing is not allowed:</p> </li> </ul> <p></p> <ul> <li>To minimize the PFT, y-map can be used:</li> </ul> <p></p> <p></p> <p></p> <p></p> <ul> <li>However, one ringed stable state can only on one 'group' (connected with '='):</li> </ul> <ul> <li>The final result can be expressed as:</li> </ul> <p></p> <ul> <li>Merge the don't care term:</li> </ul> <p></p> <ul> <li>Encode the states to '0' and '1', then minimizing:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/digitalElectronics/#5-race-condition","title":"5: Race condition","text":"<ul> <li>The transition changing two-bits will cause race:</li> </ul> <ul> <li>The using of cycles can reduce race using empty cell:</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/","title":"Microprocessors","text":""},{"location":"NOTES/Stage_2/microProcessors/#i-introduction","title":"I: Introduction","text":""},{"location":"NOTES/Stage_2/microProcessors/#1-microprocessor-and-micro-controller","title":"1: Microprocessor and micro-controller","text":"<p>A basic computer consists of IO unit, arithmetic unit, memory, control unit and a bus connect the components above.</p> <p></p> <p>If we combine the arithmetic unit, bus and control unit to one chip, it is called the Microprocessors:</p> <p></p> <p>To more integrated, the microprocessors, IOs and memory can be combined to form micro-controller:</p> <p></p>"},{"location":"NOTES/Stage_2/microProcessors/#2-generation-of-computers","title":"2: Generation of computers","text":""},{"location":"NOTES/Stage_2/microProcessors/#21-1st-generation","title":"2.1: 1st Generation","text":"<p>The gen 1 computer using valves to doing computation.</p> <p>eg: ENIAC by US Army (no memory) and EDSAC by Cambridge Uni (have memory).</p>"},{"location":"NOTES/Stage_2/microProcessors/#22-2nd-generation","title":"2.2: 2nd Generation","text":"<p>Using Transistors, PCBs, core memory and disks.</p> <p>eg: IBM 7090, using independent IOs.</p>"},{"location":"NOTES/Stage_2/microProcessors/#23-3rd-generation","title":"2.3: 3rd Generation","text":"<p>Using integrated circuits.</p> <p>eg: Cray 1, IBM S/360 (commercialized)</p>"},{"location":"NOTES/Stage_2/microProcessors/#24-4th-generation","title":"2.4: 4th Generation","text":"<p>Using LSI, VLSI.</p>"},{"location":"NOTES/Stage_2/microProcessors/#25-the-microprocessors","title":"2.5: The Microprocessors","text":"<p>Intel 8080 (8 bits), Motorola 68000 (16-bits), Intel Core 2 Duo (64-bits), TI TMS320C50 </p>"},{"location":"NOTES/Stage_2/microProcessors/#ii-assembly-language","title":"II: Assembly language","text":""},{"location":"NOTES/Stage_2/microProcessors/#1-high-level-language-machine-language-and-assembly-language","title":"1: High level language, Machine language and Assembly language","text":"<ul> <li> <p>High-level language: The programming language easily to understand for human, such as C, which can be compiled to machine language by complier.</p> </li> <li> <p>Machine Language: The language can be understood by computer, normally in hexadecimal.</p> </li> <li> <p>Assembly Language: The language which is low level but can be understood by human, can be transferred to machine language by Assembler.</p> </li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#2-example-of-read-and-print-in-assembly-language","title":"2: Example of READ and PRINT in assembly language","text":"<ul> <li> <p>We assume that each instruction has 16 bits (2 bytes).</p> </li> <li> <p>At the beginning, we input a '3' at IO unit.</p> </li> <li> <p>In assembly language, we use:</p> </li> </ul> <pre><code>move io,reg\n</code></pre> <p>which move the io input to register. Then the '3' is stored in ALU register.</p> <pre><code>move reg,D\n</code></pre> <p>which store the value in register to memory location 'D'.</p> <p><pre><code>move C.reg \n</code></pre> 'C' is an location stored a constant '2'.</p> <pre><code>add D,reg\n</code></pre> <p>this instruction add the value in D to register.</p> <ul> <li>Finally:</li> </ul> <p><pre><code>move reg,io\nstop \n</code></pre> - If we defined that two = 2 in constant:</p> <p><pre><code>two defc 2\n</code></pre> moving the result to output again and stop the instruction.</p> <p></p> <ul> <li>To make the program simple, we use symbolic name 'x' for position 'D' and another name for position '2':</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/microProcessors/#3-example-of-branch-and-flags-in-assembly-language","title":"3: Example of branch and flags in assembly language","text":"<ul> <li>In assembly language Motorola 68000, we use branch to express conditional cases:</li> </ul> <p><pre><code>initial:\n            move #$10000, d0 ; # for constant, $ for hexadecimal\ndelay:      \n            sub  #1,d0\n            bne  delay ; if d0 is not zero, go back to the beginning of delay\n</code></pre> - 'bne' means \"branch if the previous instruction is not equal to zero\", same as the function of 'bz'</p> <ul> <li> <p>We can also use 'bne' for not zero, 'bra' for jump directly.</p> </li> <li> <p>Apart form the 'z', the zero flag, we can also use the negative flag 'N':</p> </li> </ul> <p><pre><code>bmi loop1  ; branch if minus, N flag is '1'\nbpl loop2  ; branch if positive, N flag is '0'\n</code></pre> - For the bit that gets pushed out at left-hand side (MSB), it will be moved to 'C' flag for carrying:</p> <pre><code>bcs     loop1       ; branch if carry set (true)\nbcc     loop2       ; branch if carry is not set (false)\n</code></pre>"},{"location":"NOTES/Stage_2/microProcessors/#4-other-instructions-in-assembly-language","title":"4: Other instructions in assembly language","text":"<ul> <li>The way to define storage and constant:</li> </ul> <pre><code>name ds 1       ; define a 16-bit storage with length 1\nname dc 1       ; define a constant with contents 1\n</code></pre> <ul> <li>Logic shift left, which moves every bits one place to the left and add '0' to the right. The MSB will be set to flag 'C':</li> </ul> <p> <pre><code>lsl     #1,d0\n</code></pre> - If a binary value is shifted left one place, it is multiplied by 2, and divided by 2 if shifted right. For signed , then this may not work because the most significant bit (the far left-hand bit), which represents the sign, will have problems. Therefore use the arithmetic shift instruction, which maintains the sign bit whilst shifting all the other bits.</p> <pre><code>asl     #1,d0\n</code></pre>"},{"location":"NOTES/Stage_2/microProcessors/#iii-internal-micro-processor-structure","title":"III: Internal micro-processor structure","text":"<ul> <li> <p>Initialization: </p> <ul> <li>Memory contains the machine codes, one byte per address.</li> <li>Program Counter (PC) shows address of first instruction.</li> </ul> </li> <li> <p>Fetching:</p> <ul> <li>Control unit sends value of PC to memory, and instructs memory to read out bytes from this address to bus.</li> <li>Control unit writes this byte to the IR (instruction register).</li> </ul> </li> <li> <p>Next instruction:</p> <ul> <li>PC increments to 0001 from 0000.</li> <li>After the fetch of IR (machine code of current instruction), execute the instruction (read or write).</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#iii-bus","title":"III: Bus","text":"<ul> <li>\\(\\bar{RD}\\) for read ('not gate' should be noted)</li> <li>\\(\\bar{WR}\\) for write </li> <li>OE for 'output enable' to enable data reading form memory.</li> <li>WE for 'write enable' to enable data writing to memory.</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#1-sequential-graph-before-the-rw","title":"1: Sequential graph before the R/W","text":"<ul> <li> <p>The shadow in A0-A15 means 'we don't know'.</p> </li> <li> <p>RD and WR are all in 'LOW'.</p> </li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#2-sequential-graph-in-read-from-memory","title":"2: Sequential graph in read-from-memory","text":"<ul> <li> <p>The crossing A0-A15 means data connection among MPU - Address bus - memory.</p> </li> <li> <p>Address of the instruction is been sent to memory.</p> </li> </ul> <p></p> <ul> <li>Put up the RD, than D0-D7 can read the data from memory to MPU.</li> </ul> <p></p> <ul> <li>Finish the reading.</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#3-sequential-graph-in-reading-from-memory","title":"3: Sequential graph in reading-from-memory","text":"<ul> <li> <p>After the cross of A0-A15, the address of instruction has been sent to memory. Then the data connection has been created. </p> </li> <li> <p>After a period of delay, WR has been put up so that data has been moved from MPU to memory.</p> </li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#iv-three-state-logic","title":"IV: Three-State Logic","text":""},{"location":"NOTES/Stage_2/microProcessors/#1-single-direction-transmission","title":"1: Single direction transmission","text":"<ul> <li>Two CMOS inverters at both sides, which could send '0' or '1'.</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#2-bi-direction-transmission","title":"2: Bi-direction transmission","text":"<ul> <li>The VDD in memory may connect to the VSS in MPU directly, which causing bus contention in circuit.</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#3-three-state-switch","title":"3: Three-state switch","text":"<ul> <li>if we put a MOS gate between the input and output of each side:</li> </ul> <ul> <li> <p>Switch on the switch ( PMOS = 0, NMOS = 1) on sender side (keep the other switch off), the input '1' can be inverted to '0' in bus, and sent to memory side in '1' without any short-circuit. </p> </li> <li> <p>This switch is integrated in chip as OE (output enable).</p> </li> <li> <p>For the transmission from memory to MPU:</p> </li> </ul> <p></p> <ul> <li>If both the OE in MPU and memory is off, then the bus is called 'floating' or 'High-Z', which may be influenced by other wires.</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/microProcessors/#v-address-mapping-and-decoding","title":"V: Address Mapping and Decoding","text":"<ul> <li>If the address sent by MPU is 3 bits and received by memory in 2 bits, than we should decode the address as above.</li> </ul> <ul> <li> <p>With the different A2, if A2 = 0, the address will be in Memory 0, if A2 = 1, go to memory 1.</p> </li> <li> <p>Using a inverter shown in the middle, the signal from A2 as '1' could enable the \\(\\bar{CE}\\) in memory in and disable the other. A2 as '0' would enable \\(\\bar{CE}\\) in memory 0.</p> </li> </ul> <p></p> <ul> <li>For MPU A0-A15 (16 bits)n to A0-A12 in memory, we use two bits A13-A14 as decoding value:</li> </ul> <p></p> <ul> <li>According to different A13/14, the multiplexer will send the data to one of four 8 k RAM.</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#vi-clock-calculation","title":"VI: Clock Calculation","text":"<ul> <li>From the frequency of CLK we can find the period of CLK is:</li> </ul> <ul> <li>Using the instruction time, we can find the speed of operation:</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#vii-input-output","title":"VII: Input &amp; Output","text":""},{"location":"NOTES/Stage_2/microProcessors/#1-unconditioned-io","title":"1: Unconditioned I/O","text":"<ul> <li>Only one device (FF) use the bus and memory, so the I/O happens unconditionally.</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#2-polling","title":"2: Polling","text":"<ul> <li>We use PIO, short for parallel I/O to control different I/o confections. Assuming the data is transmit form disk (memory) to MPU via bus.</li> </ul> <ul> <li>When the DATA and RDY are not selected, the status register is '0', so PIO just wait in loop for the RDY signal.</li> </ul> <ul> <li>After the select of RDY, the status register is set to '1', so the value of DATA come to DATA register.</li> </ul> <ul> <li>The value in DATA register then be sent to MPU R2, the ACK signal set to memory, polling finished.</li> </ul>"},{"location":"NOTES/Stage_2/microProcessors/#3-interrupt","title":"3: Interrupt","text":"<ul> <li>Using interrupt, the multitask can be operated as below:</li> </ul> <ul> <li> <p>The task running in absence of any IO process us called background task, the tasks using interrupt routine is called foreground task.</p> </li> <li> <p>For example, assuming we want to store the data from I/O when waiting for ACK finished:</p> </li> </ul> <p></p> <ul> <li>After reading the data into data register, we need the IRS to store the data into memory during waiting. So we store the current PC '1008' into 4000:</li> </ul> <p></p> <ul> <li>Save the register ISR used and transfer the data from data register to address '5000' via R0. Then restore the R0:</li> </ul> <p></p> <ul> <li>Return the status reg back to '1008', so that the next operation in 1008 could continue:</li> </ul> <p></p> <p></p>"},{"location":"NOTES/Stage_2/semiconductor/","title":"Semiconductors Devices","text":""},{"location":"NOTES/Stage_2/semiconductor/#i-introduction","title":"I: Introduction","text":""},{"location":"NOTES/Stage_2/semiconductor/#1-silicon-electronic-devices","title":"1: Silicon Electronic Devices","text":"<ul> <li>Si is the workhorse technology. (-99% of the market)</li> <li>Cheap.</li> <li>High Performance. </li> <li>Challenges ahead,</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#2-transistors-the-building-block","title":"2: Transistors-- the building block","text":"<ul> <li>2 types:<ul> <li>Bipolar (NPN, PNP), 20% of the market </li> <li>MOSFET (CMOS), 80% of the market </li> </ul> </li> <li>Used for:<ul> <li>Analog - eg. Amplification </li> <li>Digital: ON or OFF</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#ii-electrical-conduction-in-solid","title":"II: Electrical Conduction in Solid","text":""},{"location":"NOTES/Stage_2/semiconductor/#1-conduction-in-solid","title":"1: Conduction in Solid","text":""},{"location":"NOTES/Stage_2/semiconductor/#11-bond-and-band-models","title":"1.1: Bond and Band Models","text":"<ul> <li>In the bond model, atoms is connected with bonds (electron pairs). Conduction is possible when sufficient energy is given to break the bond and free the electrons to holes.</li> </ul> <ul> <li>In the band model, the bonding electrons are in the valence band. Conduction will be possible when moving electrons to into the conduction band.</li> <li>To cross the energy band (forbidden gap) between conduction band and valence band, the efficient energy \\(E_G=E_C-E_V\\) should be given (same to the Si-Si bond energy), which is called the bandgap energy.</li> </ul> <ul> <li> <p>The band-gap Energy is 0 for metals, but it is very large for insulators.</p> </li> <li> <p>Assume in the thermal equilibrium condition,the numbers of hole is equal to the electrons (omit the impurity), this semiconductor is called the intrinsic semiconductor. </p> </li> <li> <p>To calculate the electron concentration per unit volume, we can do the integration of Density of states x Probability of occupation of state:</p> </li> </ul> \\[ \\displaystyle n = \\int_{E_c}^{\\infty}D(E)f(E){\\rm d}E \\] <ul> <li>The Probability of occupation of state is provided by \\(f(E)\\), which is also called The Fermi-Dirac distribution:</li> </ul> <p></p> <ul> <li> <p>$E_F is Fermi-level, which is the band energy when probability of occupation of state is 50%.</p> </li> <li> <p>Simplifying the carrier density below, the formula could be:</p> </li> </ul> \\[ n \\displaystyle\\approx N_C\\exp{\\frac{E_F-E_C}{k_B T}} \\\\  \\quad \\\\ p \\displaystyle\\approx N_V\\exp{\\frac{E_V-E_F}{k_B T}} \\] <ul> <li>For the number of intrinsic semiconductor, The intrinsic number of electrons can be found using the formula below:</li> </ul> \\[     n_i^2 = N_cN_v\\exp{\\frac{-E_g}{k_B T}} \\] <ul> <li>\\(N_c\\), \\(N_v\\) is the effective density of states in conduction Band / valence band.</li> <li>\\(k_B\\) is the Boltzmann Constant.</li> <li>\\(E_g\\) is the energy gap.</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#12-doping","title":"1.2: Doping","text":"<ul> <li>The conduction properties of semiconductors can be influenced by n-type or p-type doping.</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#2-electrical-conduction","title":"2: Electrical Conduction","text":""},{"location":"NOTES/Stage_2/semiconductor/#21-drift-current-ohms-law","title":"2.1: Drift Current: Ohm's Law","text":"<ul> <li>The drift current occurs because of the charge carriers in solid experience a force from the external E-field so that have a tendency of drifting in one direction.</li> <li>The Ohm's Law defined for drift current per unit volume can be written as:</li> </ul> \\[ J=\\sigma E \\] <ul> <li> <p>\\(J\\) is the drift current per unit volume, \\(\\sigma\\) is the conductivity (S/cm) and \\(E\\) is the electric field.</p> </li> <li> <p>According to the \\(I=nesv\\) in general current, we can define the drift current as:</p> </li> </ul> \\[ J=env \\] <ul> <li> <p>\\(n\\) is the carrier density per unit volume and \\(v\\) is the electron velocity.</p> </li> <li> <p>The carrier velocity can also be defined as:</p> </li> </ul> \\[ v = \\mu E \\] <ul> <li>\\(\\nu\\) is the drift mobility</li> </ul> <p>So we can get:</p> \\[ J= en\\mu E \\] <p>We also found the relation below:</p> \\[ \\sigma = ne\\mu  \\] <p>Which can be finally written as:</p> \\[ J = \\sigma E \\] <p>If we consider the minor carriers in semiconductors:</p> \\[ \\sigma = e(n\\mu_n+p\\mu _p) \\]"},{"location":"NOTES/Stage_2/semiconductor/#22-diffusion-current","title":"2.2: Diffusion Current","text":"<ul> <li> <p>Diffusion current only exit in semiconductors due to the uneven distribution of carriers (electrons or holes).</p> </li> <li> <p>The carriers will diffuse from the high concentration side to another.</p> </li> </ul> <p></p> <ul> <li>That diffusion depends on the concentration] gradient \\(-dn/dx\\), the electronic charge \\(e\\) and the diffusion coefficient \\(D\\):</li> </ul> \\[ J = -eD_n(-\\frac{dn}{dx}) \\] <p>or </p> \\[ J = eD_n(\\frac{dn}{dx}) \\] <ul> <li>Both the diffusion processes (D) and the collision limit the \\(\\mu\\), this is called the Einstein Relation:</li> </ul> \\[ \\mu = D\\frac{e}{k_BT} \\]"},{"location":"NOTES/Stage_2/semiconductor/#23-drift-diffusion-current","title":"2.3: Drift-Diffusion Current","text":"<p>Drift and diffusion current both exist in semiconductors:</p> \\[ \\begin{align*} J_n &amp;= e\\mu _n En +e D_n \\frac{dn}{dx} \\\\ J_p &amp;= e\\mu _p En -e D_p \\frac{dn}{dx} \\end{align*} \\] <p></p> <ul> <li>The drift current direction is only related to the external voltage direction.</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#24-mechanism-of-drift-diffusion-current","title":"2.4: Mechanism of drift-diffusion current","text":"<ul> <li> <p>There is a Fermi Level between the conduction and valence band, which is a energy level have 50% to be fulled with electrons, the energy of it called \\(E_F\\).</p> </li> <li> <p>Cause the Fermi level is the level of electrons, in n-type semiconductors the \\(E_F\\) will be higher than p-type, which means closer to the conduction band.</p> </li> </ul> <p></p> <ul> <li>The diffusion and drift current will reach a balance for a p-n junction.</li> </ul> <p></p> <ul> <li>If drift current &lt; diffusion, it will be  Forward Biased:</li> </ul> <p> * If drift current &gt; diffusion, it will be Reverse Biased:</p> <p></p>"},{"location":"NOTES/Stage_2/semiconductor/#25-the-size-of-drift-and-diffusion-current-for-p-n-junction","title":"2.5: The size of drift and diffusion current for p-n junction","text":"<ul> <li>Use the equation below, we can calculate the size of the electric potential form the drift current:</li> </ul> \\[ \\phi _b = \\frac{E_g}{e}+\\frac{kT}{e}\\ln{(\\frac{N_d N_a}{N_c N_v})} \\] <ul> <li>\\(N_d\\) for density of donor and \\(N_a\\) for the accepter.</li> </ul> <ul> <li>The depletion width can also be calculated using:</li> </ul> \\[ W=\\sqrt{\\frac{2\\varepsilon _0 \\varepsilon _r \\phi _b}{e}(\\frac{N_d N_a}{N_c N_v})} \\] <ul> <li>Then the electric field \\(E\\) can be estimated. </li> <li>The \\(\\phi\\) is the build-in voltage generated in the depletion area.</li> <li> <p>The build-in electric field can be : \\(E = \\frac{\\phi }{W}\\)</p> </li> <li> <p>In real condition, we assume that the drift and diffusion currents are almost equal but opposite for P-N junctions even under forward or reverse bias.</p> </li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#iii-p-n-junction","title":"III: P-N Junction","text":""},{"location":"NOTES/Stage_2/semiconductor/#1-relation-between-carrier-concentration-and-potential-difference","title":"1: Relation between carrier concentration and potential difference","text":"<p>The drift and diffusion current are almost equal and opposite for a p-n junction, so the current of the junction for electrons will be:</p> \\[ J_n \\approx en\\mu _n E_n + eD_n\\frac{dn}{dx} = 0 \\] <p>Using the Einstein Relation \\(\\mu _n = D_n \\frac{e}{k_B T}\\):</p> \\[ -\\frac{e}{k_B T}n E_n = \\frac{dn}{dx} \\] <p>Since \\(E=-\\frac{dV}{dx}\\) ('-' as for electrons), we can get:</p> \\[ \\frac{e}{k_B T}(\\frac{dV}{dx}) = \\frac{1}{n}(\\frac{dn}{dx}) \\] <p>If we integrate over all of the junction:</p> \\[ \\begin{align*} \\int{\\frac{e}{k_B T}\\frac{dV}{dx}}{\\rm d}x &amp;= \\int{\\frac{1}{n}\\frac{dn}{dx}}{\\rm d}x \\\\ \\int_{V(x_1)}^{V(x_2)}{\\frac{e}{k_B T}}{\\rm d}V &amp;= \\int_{n(x_1)}^{n(x_2)}{\\frac{1}{n}}{\\rm d}n  \\end{align*} \\] <ul> <li>The left picture is the voltage drop across the junction.</li> <li>The right one is the carrier concentration varies from p-side to n-side at the zero bias.</li> </ul> <p>if no applied voltage (the difference of voltage will be initial \\(\\phi _{bi}\\)):</p> \\[ \\int_{n(x_1)}^{n(x_2)}{\\frac{1}{n}}{\\rm d}n = \\frac{e}{k_B T}\\phi_{bi} \\] <p>So we can get: </p> \\[ \\frac{e}{k_B T}\\phi_{bi} = \\ln{\\frac{n_{no}}{n_{po}}} \\] <ul> <li>\\(n_{po}\\) and \\(n_{no}\\) means the initial concentration of electrons in p-side and n-side.</li> </ul> <p>So that we can get:</p> \\[ \\frac{n_{no}}{n_{po}} = \\exp{(\\frac{e\\phi _{bi}}{k_B T})} \\] <p>Same for the holes:</p> \\[ \\frac{p_{po}}{p_{no}} = \\exp{(\\frac{e \\phi_{bi}}{k_B T})} \\] <p>We can combine the result and get:</p> \\[ \\frac{n_{no}}{n_{po}} = \\frac{p_{po}}{p_{no}} \\] <ul> <li>Now if we apply an external bias on the p-n junction:</li> </ul> \\[ \\begin{align*} \\frac{n_n}{n_p} &amp;= \\exp(\\frac{e}{k_B T}(\\phi _{bi} -V_A)) \\\\ \\frac{p_p}{p_n} &amp;= \\exp(\\frac{e}{k_B T}(\\phi _{bi}-V_A)) \\end{align*} \\] <ul> <li>Even the carrier concentration changed, in fact we can omit the change:</li> </ul> \\[ n_{no} \\approx n_n \\quad p_{po} \\approx p_p \\] <p>so that:</p> \\[ \\begin{align*} \\frac{n_{no}}{n_p} &amp;= \\exp(\\frac{e}{k_B T}(\\phi _{bi} -V_A)) \\\\ \\frac{p_{po}}{p_n} &amp;= \\exp(\\frac{e}{k_B T}(\\phi _{bi}-V_A)) \\end{align*} \\] <p>Using the previous formula, we got:</p> \\[ \\begin{align*} \\frac{n_p}{n_{po}} &amp;= \\exp(\\frac{e}{k_B T}V_A) \\\\ \\frac{p_n}{p_{no}} &amp;= \\exp(\\frac{e}{k_B T}V_A) \\end{align*} \\] <p></p> <ul> <li>This graph shows the condition of the reverse bias and forward bias.</li> </ul> <p>Combine the formula above, we can get:</p> \\[ np=n_i^2 = N_cN_v \\exp(\\frac{-E_g}{k_BT}) \\] <ul> <li>While 'n' ,'p' can be both n-side or p-side, \\(n_i\\) is the concentration of the intrinsic semiconductor.</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#2-current-flow-in-p-n-junctions","title":"2: Current flow in p-n junctions","text":"<p>If we neglect the effects of recombination, the electrons current in the n-side is equal to that in the p-side and for holes are the same.</p> <p>There are two possible types of current flow:</p> <ul> <li>Drift: \\(e\\mu _n En\\)</li> <li> <p>Diffusion: \\(eD_n\\frac{dn}{dx}\\)</p> </li> <li> <p>For electrons, according to the calculation result, the minority carrier diffusion current control the conduction mechanism.</p> </li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#3-current-voltage-relationship","title":"3: Current-Voltage Relationship","text":"<p>Hole diffusion in the p-type is given:</p> \\[ \\begin{align*} I_p &amp;= AeD_p \\frac{dp}{dx} \\\\ &amp;= AeD_p (\\frac{p_n-p_{no}}{l_p}) \\end{align*} \\] <p>And same for n-type:</p> \\[ \\begin{align*} I_n &amp;= AeD_n \\frac{dn}{dx} \\\\ &amp;= AeD_n (\\frac{n_p-n_{po}}{l_n}) \\end{align*} \\] <p>So that we can get:</p> \\[ \\frac{n_p}{n_{po}} = \\exp{(\\frac{e}{k_B T}V_A)} \\] <p>If we add the \\(I_n\\) and \\(I_p\\), the Shockley's Equation will be got:</p> \\[ I = I_o(\\exp{(\\frac{eV_A}{nk_B T})}-1) \\] <p>\\(n\\) is a non-ideal fiddle factor.</p> <p></p> <p>This analysis is valid only for thin p and n bulk regions. Or else (bulk length &gt; diffusion length) the length of layers has to be replaced by \\(l=\\sqrt{D\\tau}\\).(The \\(\\tau\\) is called the carrier lifetime)</p> <p>If the PN-junction without external voltage, the \\(\\frac{dn}{dx}\\) can only consider the minority carrier to '0'. Note that the saturation current should be sum of p-type and n-type.</p>"},{"location":"NOTES/Stage_2/semiconductor/#4-junction-breakdown","title":"4: Junction Breakdown","text":"<p>When the sufficient high field is applied to a p-n junction, the junction may break down and conducts a very large current.</p>"},{"location":"NOTES/Stage_2/semiconductor/#41-thermal-instability","title":"4.1: Thermal Instability","text":"<p>At high reverse bias the reverse current cause considerable heat dissipation. The effect is known as thermal instability and occurs at the turn over voltage \\(V_n\\).</p>"},{"location":"NOTES/Stage_2/semiconductor/#42-tunneling-zener-breakdown","title":"4.2: Tunneling (Zener Breakdown)","text":"<p>For a p-n junction under reverse bias:</p> <p></p> <p>both electrons and holes need significant barrier so the current is low.</p> <p>At sufficiently large applied bias, the picture changes:</p> <p></p> <p>The electrons may tunnel from valence band to conduction band if the junction is heavily doped.</p> <p>The band gap in Si and GaAs decreases with increasing temperatures, the negative temp coefficient can be used to recognize this mechanism.</p>"},{"location":"NOTES/Stage_2/semiconductor/#43-avalanche-multiplication-impact-ionization","title":"4.3: Avalanche Multiplication (Impact Ionization)","text":"<p>If the electric field in the depletion region is high enough, current gain enough energy to ionize collisions which create electron-hole pairs.</p> <p>The avalanche breakdown voltage imposes an upper limit on reverse bias for diodes, collector voltage of BJT and drain voltage for MOSFET.</p> <p>Avalanche breakdown has a positive temp coefficient.</p>"},{"location":"NOTES/Stage_2/semiconductor/#iv-bipolar-transistor","title":"IV: Bipolar Transistor","text":""},{"location":"NOTES/Stage_2/semiconductor/#1-bipolar-transistors","title":"1: Bipolar Transistors","text":"<ul> <li>PNP and NPN depend on the base material.</li> </ul> <ul> <li> <p>The majority of the emitter current flows through to the collector, rather than the base (\\(I_B\\)), so we have a small base current.</p> </li> <li> <p>\\(\\displaystyle\\frac{I_C}{I_E}\\) Common Base DC Current Gain \\(\\alpha \\approx 1\\)</p> </li> <li> <p>\\(\\displaystyle\\frac{I_C}{I_B}\\) Common Emitter DC Current Gain \\(\\beta \\approx 50\\)</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/semiconductor/#2-bjt-principle-of-operation","title":"2: BJT: Principle of Operation","text":"<p>For a NPN device, the majority carrier will be: emitter heavily doping (with e), base moderate doping and collector low doping.</p> <p>For the minority carrier densities will be:</p> <p></p> <p>(\\(n_{pe}\\) the 'e' means the emitter side)</p> <p>If we forward bias the emitter-base junction and apply no bias to the collector-base junction (short circuit):</p> <p></p> <p>which we can get:</p> \\[ \\frac{n_p}{n_{po}} = \\frac{p_n}{p_{no}}=\\displaystyle\\exp{(\\frac{eV_{EB}}{k_B T})} \\] <ul> <li> <p>Under the forward bias, the electrons in the emitter moving to the base according to the diffusion (large concentration gradient).</p> </li> <li> <p>As the base wide is thin, only little electrons will come to base (this electron-current can be ignored), most of the \\(I_e\\) will come and become \\(I_c\\).</p> </li> <li> <p>Ignore the recombination, the holes in base will move to emitter according to diffusion.This hole current due to \\(p_{ne}\\) is the only base current cause holes cannot pass the reverse c-b junction. So by controlling the doping ratio \\(\\displaystyle\\frac{N_e}{N_b}\\) we can control the current gain \\(\\beta = \\displaystyle\\frac{I_C}{I_B}\\approx \\frac{I_E}{I_B}\\). (the most effective situation is all the electrons from emitter move to the collector)</p> </li> </ul> <p>For the collector current, we can get: (Same as the diffusion current) $$ I_C = AeD_n(\\frac{n_{pe}-n_{po}}{W}) $$</p> <p>\\(n_{pe}\\) is the electron from emitter finally reach the collector bypassing the base, while \\(n_{po}\\) is the original electrons in base. Note that the \\(W\\) means the diffusion distance of the concentration gradient, so it is the length of base. (which should be minimize)</p> <ul> <li>We can find that electrons concentration gradient in base determine the \\(I_C\\).</li> </ul> <p>For the base current: $$ I_B = AeD_p(\\displaystyle\\frac{p_{ne}-p_{no}}{l_e}) $$</p> <ul> <li>The concentration gradient determine the size of \\(I_B\\).</li> </ul> <p>The emitter efficiency \\(\\gamma\\) can be defined as:</p> \\[ \\displaystyle\\frac{Electron\\quad Current\\quad in\\quad Emitter}{Total\\quad Emitter\\quad Current} = \\displaystyle\\frac{I_{En}}{I_{En}+I_{Ep}}=\\gamma \\] <p>\\(I_{En}\\) is the \\(I_C\\) and \\(I_{Ep} = I_B\\)</p> <p>Note that for no-recombination \\(\\alpha = \\gamma\\).</p> <p>Now if we apply a reverse bias to the C-B junction:</p> <p></p> <p>The minority carrier concentration should be decreased under the reverse bias (the input from other side will reduced according to voltage)</p> <p>In addition, the majority carrier may be limited by the reverse bias, while the minority carrier form the current due to the bias, which is defined as:</p> \\[ I_{SC}(\\exp(\\frac{eV_{CB}}{k_B T})-1)  \\] <p>The total collector current can be expressed as: </p> \\[ -I_C = I_{SC}(\\exp(\\frac{eV_{CB}}{k_B T})-1)-\\alpha I_{SE}(\\exp(\\frac{e V_{EB}}{k_B T})-1) \\] <p></p> <p>Note that the sign convention follow the \\(V_{CB}\\).</p>"},{"location":"NOTES/Stage_2/semiconductor/#2-dc-characteristic","title":"2: DC Characteristic","text":"<p>For the \\(I_E = 0\\), we got a diode characteristic:</p> <p></p> <p>If \\(I_E\\) is not 0 but defined by \\(\\alpha I_E\\). \\(I_{SC}\\) is called the collector cut-off current.(for the cut-off current or saturation current of C-B, the increasing of inverse bias will not increase the current)</p> <p>The straight line parts (active region) have a small gradient due to the base narrowing effect.</p> <p>As \\(V_{CE} = V_{CB} + V_{BE}\\), we can get the \\(V_{CE}\\) graph:</p> <p></p> <p>For the equation of collector current:</p> \\[ -I_C = I_{SC}(\\exp(\\frac{eV_{CB}}{k_B T})-1)-\\alpha I_{SE} (\\exp(\\frac{eV_{EB}}{k_B T})-1) \\] <p>For the reverse version:</p> \\[ -I_E = I_{SE}(\\exp(\\frac{eV_{EB}}{k_B T})-1)-\\alpha I_{SC} (\\exp(\\frac{eV_{CB}}{k_B T})-1) \\] <ul> <li>These equations are called Ebers Moll equations which are useful to derive the DC circuits.</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#v-mosfet","title":"V: MOSFET","text":""},{"location":"NOTES/Stage_2/semiconductor/#1-inversion-layer","title":"1: Inversion Layer","text":"<ul> <li>The electron energy is \\(-ve\\), so a -ve voltage is shown as a \\(+ve\\) shift on energy.</li> <li>The depletion region is shown as a region where \\(E_C-E_F\\) is larger than the bulk.</li> <li>If we put a positive bias on the n type, the electrons will be attracted so the conduction band will be up :</li> </ul> <ul> <li>If we put a negative voltage, the result will be:</li> </ul> <ul> <li> <p>The surface region is called an accumulation layer, which is more complicated than the depletion width as we consider the free carriers.</p> </li> <li> <p>As we increase the voltage:</p> </li> </ul> <p></p> <p></p> <ul> <li>The Fermi level is more closer to valence band than conduction band, so we call it is more p-type than n-type. This surface is called an inversion layer.</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#2-metal-oxide-semiconductor-field-effect-transistor-mosfet","title":"2: Metal-Oxide-Semiconductor Field Effect Transistor (MOSFET)","text":"<ul> <li>The MOSFET have 4 terminals, source, gate , drain and substrate (earthed).</li> <li>The idea is to modulate the current flow between source and drain by changing the bias voltage on the gate.</li> <li>The \\(n^+\\) regions are highly doped to give ohmic contacts to metal.</li> <li>The substantial current will only flow between source and drain if there is a n-ype layer (surface inversion layer) connecting them.</li> <li>The oxide layer prevents the electrons in the inversion layer crossing the gate. The conduction band and valence band in the oxide are linear, so no change in E.</li> <li>To create the inversion layer, the gate voltage must be \\(+ve\\) relative to the source (earthed), while the p-type must be \\(-ve\\) between source and drain, so that the p-n junction will be reverse biased and only leakage current will flow when no inversion layer is present.</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#3-mode-of-operation","title":"3: Mode of Operation","text":"<ul> <li> <p>For an enhancement mode device, i.e. no drain current for \\(V_{GS} = 0\\), the current flows when the \\(+v\\) applied.</p> </li> <li> <p>The drain current increases (drift current) when increasing the \\(V_{DS}\\)  but the potential between the drain and gate decreases.</p> </li> <li> <p>This reduce the electrons in drain side and finally the inversion layer lost and the channel is said to be 'pinch off'. For higher \\(V_{DS}\\) the drain current saturates (remain constant).</p> </li> <li>There is just sufficient channel beyond pinch off to allow the saturation current.</li> </ul> <p></p> <ul> <li>The minimum gate voltage \\(V_{GS}\\) at which a channel current can be sustained is called the threshold voltage \\(V_T\\).</li> <li> <p>Thus the pinch off will begin when \\(V_{DS} = V_{GS}-V_T\\).</p> </li> <li> <p>The DC characteristic for a MOSFET will be:</p> </li> </ul> <p></p> <ul> <li> <p>When \\(V_T\\) is '+' and a '+' gate voltage enhances the channel the device is called the enhancement mode. But MOSFET cannot be designed to have \\(V_T\\) negative. Then a negative gate voltage depletes the channel of electrons and the devices switches off. And these are depletion mode devices.</p> </li> <li> <p>P-channel enhancement an depletion devices is possible.</p> </li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#31-analysis-of-operation-n-channel-device","title":"3.1: Analysis of Operation (n-channel device)","text":"<ul> <li>We assume long gate and channel.</li> </ul> <ul> <li> <p>The channel-oxide-gate forms a capacitor with \\(C_{ox}\\) per unit area. \\(Q = CV\\) followed.</p> </li> <li> <p>Note that the formula of capacitance \\(C=\\frac{\\varepsilon_r \\epsilon _0 A}{d}=\\frac{\\varepsilon A}{d}\\) can be applied. \\(\\varepsilon\\) is the dielectric constant.</p> </li> <li> <p>For a small length of channel dy:</p> <ul> <li>\\(Q_y\\) = Capacitance x (Voltage across the oxide in excess of \\(V_T\\))</li> <li>\\(Q_y = -C_{ox}Wdy(V_{GS}-V_y-V_T)\\)</li> </ul> </li> <li> <p>Where \\(Q_y\\) is the volume density of charge in the channel, \\(W\\) is the gate length and \\(V_y\\) is the channel voltage at position \\(y\\) along the channel.</p> </li> <li>The electron charge density in the channel is:</li> </ul> \\[ en = \\frac{Q_y}{Wddy} \\] <ul> <li>Where \\(d\\) is the depth of the inversion layer:</li> </ul> \\[ en = \\frac{C_{ox}}{d}(V_{GS}-V_y-V_T) \\] <ul> <li>Assuming drift current, the current density in y-direction:</li> </ul> \\[ \\begin{aligned} J &amp;= en\\mu _n E_y \\\\ J &amp;= -\\frac{\\mu _n C_{ox}}{d}(V_{GS}-V_y-V_T)E_y \\end{aligned} \\] <p>As \\(E_y = -\\frac{dV}{dy}\\):</p> \\[ \\begin{aligned}     I_{SD} &amp;= \\displaystyle\\int{J}{\\rm} ds\\\\     &amp;= JWd \\\\     &amp;= \\mu _n [-\\displaystyle\\frac{C_{ox}}{d}(V_{GS}-V_y-V_T)][-\\displaystyle\\frac{dV}{dy}Wd] \\\\     &amp;= W\\mu _n C_{ox}(V_{GS}-V_y-V_T)\\frac{dV}{dy} \\end{aligned} \\] <p>The gradual channel approximation allows us to sum along the whole channel. \\(I_{SD}\\) is a constant at each point:</p> \\[ I_{SD}L = W\\mu _n C_{ox}\\int_0^{V_{DS}}(V_{GS}-V_y-V_T){\\rm d}V \\] <p>or</p> \\[ I_{SD} = \\beta [(V_{GS}-V_T)V_{DS}-\\frac{V_{DS}^2}{2}] \\] <p>where \\(\\beta = \\frac{W\\mu _n C_{ox}}{L}\\)</p> <ul> <li>\\(\\beta\\) is the gain factor and is determined by \\(\\frac{W}{L}\\) and the gate capacitance \\(C_{ox}\\). This equation is valid for \\(V_{DS} &lt;&lt; V_{GS}-V_T\\), i.e. the region below pinch off. For higher values of \\(V_{DS}\\).</li> <li>For higher values of \\(V_{DS}\\) \\(I_{SD}\\) saturates. So we set \\(V_{DS} = V_{GS}-V_T\\). and obtain:</li> </ul> \\[ I_{SD}=\\frac{\\beta}{2}(V_{GS}-V_T)^2 \\] <ul> <li>In real device, increasing \\(V_{DS}\\) above pinch off actually reduces the effective channel length, by increasing the depletion region around the drain and so there is a slight increase in \\(I_{SD}\\).</li> </ul>"},{"location":"NOTES/Stage_2/semiconductor/#32-transistor-delay-time","title":"3.2: Transistor Delay Time","text":"<p>This can be estimated form the time taken for 1 transistor to supply sufficient current to change the gate on the next, as \\(Q=It\\) and \\(Q=CV\\): $$ t = \\frac{CV}{I} = \\frac{C_{GS}}{g_m} $$</p> <ul> <li>\\(g_m\\) is the transconductance.</li> </ul> <p>The capacitance us \\(C_{ox}WL\\), at saturation, this can be estimated:</p> \\[ g_m = \\frac{dI_{DS}}{dV_{GS}} = \\beta V_{DS} = \\frac{W}{L}\\mu _N C_{ox}(V_{GS}-V_T) \\] <p>So \\(t = \\displaystyle\\frac{L^2}{\\mu_n (V_{GS}-V_T)}\\)</p> <p>This is related to the transistor cut off frequency, \\(f_t\\), </p> \\[ t = \\frac{C_{GS}}{g_m} = \\frac{1}{w} = \\frac{1}{2\\pi f_t} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/","title":"Signals and Communications","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#i-introduction-to-a-communication-system","title":"I: Introduction to a Communication System","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-communication-systems","title":"1: Communication Systems","text":"<ul> <li>Noise in the systems: external noise and circuits noise reduces the quality of the output. </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-general-digital-communication-system-model","title":"2: General Digital Communication System Model","text":"<ul> <li>Source coding: compressing the signals </li> <li>Error control coding: add extra bits (randoms)</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#21-coderdecoder-codec","title":"2.1: Coder/Decoder (CODEC)","text":"<ul> <li>Sampling: signals at the particular time </li> <li>Quantitation: reducing the binary code </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#22-modulatordemodulator-modem","title":"2.2: Modulator/Demodulator (MODEM)","text":"<ul> <li>Made of modulator and demodulator </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-radio-transmission","title":"3: Radio Transmission","text":"<ul> <li>Aerial dimensions are of the same order as the wavelength \\(\\lambda\\) of the signal.</li> <li>\\(\\lambda = \\frac{c}{f}\\), for \\(c=3\\times 10^8\\) m/s in free space. </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-modulation","title":"4: Modulation","text":"<ul> <li>A message information contains the control parameters of a carrier signal, so as to impress the information onto the carrier.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#41-the-message","title":"4.1: The Message","text":"<ul> <li>The message can be digital, analogue or multiple.</li> <li>Analogue message, demoted by m(t).</li> <li>Digital message, denoted by \\(d(t)\\).</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#42-the-carrier","title":"4.2: The Carrier","text":"<ul> <li>The carrier can be a 'sin' or a 'pulse train'.</li> <li>If we use a 'cosine' carrier:</li> </ul> \\[ v_s(t) = V_c\\cos{(2\\pi f_c t+\\phi _c)} \\] <ul> <li>The message can varies in amplitude, frequency and  phase, i.e the AM, FM and PM.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#ii-amplitude-modulation","title":"II: Amplitude Modulation","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-schematic-diagram-of-am","title":"1: Schematic Diagram of AM","text":"<ul> <li>\\(v_s(t)=(V_{DC}+m(t))\\cos {(2\\pi f_c t)}\\)</li> <li>\\(V_{DC}\\) is a variable voltage, which can be 0 to infinite volts.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-equations-for-dsb-am","title":"2: Equations for DSB-AM","text":"<ul> <li> <p>Double Sideband Amplitude Modulation - DSBAM:</p> </li> <li> <p>If we note the message: \\(m(t)=V_m\\cos{(2\\pi f_m t)}\\).</p> </li> <li>The trigonometric way can be usd to expand:</li> </ul> <p>\\(v_s(t)=V_{DC}\\cos{(2\\pi f_c t)}+\\frac{V_m}{2}\\cos{(2\\pi (f_c+f_m)t)}+\\frac{V_m}{2}\\cos{(2\\pi (f_c-f_m)t)}\\)</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-spectrum-and-waveforms","title":"3: Spectrum and Waveforms","text":"<ul> <li>It can be found that the message is stored twice in the double envelope.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-modulation-depth","title":"4: Modulation Depth","text":"<ul> <li>The \\(\\frac{V_{m}}{V_{DC}}\\) is defined as the modulation depth.</li> <li>Modulation Depth \\(m=\\frac{Message}{Carrier}\\).</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#5-double-sideband-modulation-types","title":"5: Double Sideband Modulation Types","text":"<ul> <li> <p>Double Sideband Amplitude Modulation, DSB-AM, with carrier </p> </li> <li> <p>Double Sideband Diminished (Pilot) Carrier, DSB-DimC (\\(V_{DC}\\) is small)</p> </li> <li> <p>Double Sideband Suppressed Carrier, DSB-SC (no \\(V_{DC}\\), no carrier).</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#6-graphical-representation-of-modulation-depth-and-modulation-types","title":"6: Graphical Representation of Modulation Depth and Modulation Types","text":"<ul> <li>The phase shift may exist, while the information is stored.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#7-trapezoid-method-of-measuring-modulation-depth","title":"7: Trapezoid Method of Measuring Modulation Depth","text":"<ul> <li>For the multiple message signals instead of only one 'sin' single tone, it is difficult to determine the modulation depth.</li> <li>So we use the X-Y mode in the oscilloscope, connecting the message signals to the x-input and AM signals to y-input.</li> <li>The trapezoid can be used to justify the modulation depth.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#71-trapezoid-when-m-1","title":"7.1: Trapezoid when m &lt; 1","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#72-trapezoid-when-m-1","title":"7.2: Trapezoid when m = 1","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#73-trapezoid-when-m-1","title":"7.3: Trapezoid when m &gt; 1","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#8-dsb-sc-from-a-balanced-modulator-used-in-am-experiment","title":"8: DSB-SC from a Balanced Modulator (Used in AM experiment)","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#9-bandwidth-requirement-for-dsb-am","title":"9: Bandwidth Requirement for DSB-AM","text":"<ul> <li>The message signals \\(m(t)\\) will not be a single sine, but a band of frequencies extending up to \\(B\\) Hz as shown.</li> </ul> <ul> <li>Bandwidth is two times of the highest frequency in the message.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#10-power-considerations-in-dsb-am","title":"10: Power Considerations in DSB-AM","text":"<ul> <li>For the AM: </li> </ul> \\[ v_s(t)=V_{DC}\\cos{(2\\pi f_c t)}+\\frac{V_m}{2}\\cos{(2\\pi (f_c+f_m)t)}+\\frac{V_m}{2}\\cos{(2\\pi (f_c-f_m)t)} \\] <ul> <li> <p>Noted that the \\(P_{RMS}=(\\frac{V}{\\sqrt{2}})^2\\times \\frac{1}{R_L}\\) is only suitable for sin (cos) functions.</p> </li> <li> <p>\\(P_T=\\frac{V_{DC}^2}{R_L}(1+\\frac{m^2}{2})\\)</p> </li> <li> <p>If we note \\(P_C=\\frac{v_{DC}^2}{2R_L}\\)</p> </li> </ul> \\[ \\frac{P_{USB}}{P_T}=\\frac{P_c\\frac{m^2}{4}}{P_c(1+\\frac{m^2}{2})}=\\frac{m^2}{4+2m} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#11-single-sideband-amplitude-modulation","title":"11: Single Sideband Amplitude Modulation","text":"<ul> <li>We use BPF to filter one of the sideband.</li> </ul> <ul> <li>After the BPF:</li> </ul> <ul> <li>The BPF filter removes the LSB then the SSB-AM will be:</li> </ul> \\[ v_s(t)=V_{DC}\\cos{(2\\pi f_ct)}+\\frac{V_m}{2}\\cos{(2\\pi (f_c+f_m)t)} \\] <ul> <li>For SSB-SC, output signal will be:</li> </ul> \\[ v_s(t)=\\frac{V_m}{2}\\cos{(2\\pi (f_c+f_m)t)} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#12-bandwidth-requirement-for-ssb-am","title":"12: Bandwidth Requirement for SSB-AM","text":"<p>For the SSB-SC the bandwidth is reduced since there is no carrier component.</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#13-power-in-ssb","title":"13: Power in SSB","text":"<p>For the SSB signal \\(v_s(t)=V_{DC}\\cos{(2\\pi f_c t)}+\\frac{V_m}{2}\\cos {(2\\pi (f_m +f_c))t}\\) </p> <p>the power is:</p> \\[ P_{SSB}=\\frac{v_{DC}^2}{2R_L}+\\frac{V_m ^2}{8R_L} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#14-demodulation-of-am-signals","title":"14: Demodulation of AM Signals","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#141-envelope-or-non-coherent-detection","title":"14.1: Envelope or Non-coherent Detection","text":"<ul> <li>The capacitor charges rapidly and thereby follows the applied voltages up to the positive peak when the diode is conducting, so: </li> </ul> \\[ R_sC &lt;&lt; 1/f_c \\] <ul> <li>After the positive peak, the voltage reduced so that the diode switched off and the capacitor begin to discharging in \\(R_L\\). The discharging continue slowly between the positives peaks of the carrier voltage but no longer than the message period.</li> </ul> \\[ \\frac{1}{f_c} &lt;&lt; R_L C &lt;&lt; \\frac{1}{W} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#142-synchronous-or-coherent-demodulation","title":"14.2: Synchronous or Coherent Demodulation","text":"<ul> <li>The local oscillator must be coherent in both frequency and phrase with the carrier wave.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#1421-coherent-local-oscillator","title":"14.2.1: Coherent Local Oscillator","text":"<p>If DSB-AM input = \\((V_{DC}+m(t))\\cos{(2\\pi f_ct)}\\)</p> \\[ \\begin{align*} V_x &amp;= (V_{DC}+m(t))\\cos{(2\\pi f_ct)}\\cos{(2\\pi f_ct)} \\\\ &amp;= \\frac{V_{DC}}{2}+\\frac{V_{DC}}{2}\\cos{(4\\pi f_C t)}+\\frac{m(t)}{2}+\\frac{m(t)}{2}\\cos{(4\\pi f_ct)} \\end{align*} \\] <p></p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#1422-frequency-and-phrase-errors-in-synchronous-demodulation-dsb-sc","title":"14.2.2: Frequency and Phrase Errors in Synchronous Demodulation: DSB-SC","text":"<p>The equation for DSB-SC:</p> <p>\\(v_s(t)=m(t)\\cos{(2\\pi f_ct)}\\), where \\(V_{DC}=0\\)</p> <p>LPF remove the \\(2f_c\\) component. </p> <p>\\(V_{out}=\\frac{m(t)}{2}\\cos{(2\\pi \\Delta ft+ \\Delta \\phi)}\\)</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#1423-frequency-and-phrase-errors-in-synchronous-demodulation-ssb-sc","title":"14.2.3: Frequency and Phrase Errors in Synchronous Demodulation: SSB-SC","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#15-comparison-of-dsb-and-ssb","title":"15: Comparison of DSB and SSB","text":"<ul> <li>DSB-AM signals can be demodulated with envelope detector simply.</li> <li>DSB-SC and SSB-SC require much less power than DSB-AM and SSB-AM, but more complicated receiver.</li> <li>SSB-AM use half the bandwidth of DSB-AM.</li> <li>SSB-SC can cope better with small changes in frequencies and phases caused by local oscillator.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#iii-frequency-modulation-and-demodulation","title":"III: Frequency Modulation and Demodulation","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-angle-modulation-fm","title":"1: Angle Modulation - FM","text":"<ul> <li> <p>Consider the general carrier \\(v_s(t) = V_c\\cos{(2\\pi f_c t + \\phi _c)}\\)</p> </li> <li> <p>\\(2\\pi f_c t + \\phi _C\\) is the angle of the carrier.</p> </li> <li> <p>Frequency Modulation by varying \\(f_c\\), or phase modulation by varying \\(\\varphi _c\\).</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-frequency-modulation","title":"2: Frequency Modulation","text":"<ul> <li>In FM, if we note the carrier as </li> </ul> \\[ v_s (t) = V_c\\cos{(2\\pi f)} \\] <ul> <li>A frequency modulated carrier can be expressed as:</li> </ul> \\[ v_s(t)=V_c\\cos{(2\\pi (f_c+ frequency \\quad deviation)t)} \\] <p>where the frequency deviation depend on the m(t).</p> <ul> <li>As the carrier frequency may change so a instantaneous carrier signal is needed. We note:</li> </ul> \\[ V_c\\cos{(2\\pi f_i t)} = V_c\\cos{(\\varphi_i)} \\] <p>where \\(\\varphi _i\\) is the instantaneous angle which is \\(2\\pi f_i t\\) and \\(f_i\\) is the instantaneous frequency, \\(f_i = f_c + frequency \\quad deviation\\).</p> <ul> <li> <p>Now we need some re-arranges of the angle \\(\\varphi\\). </p> </li> <li> <p>As \\(\\varphi _i= 2\\pi f_i t\\), the \\(\\varphi_i\\) is a instantaneous value, so we can get \\(\\frac{d\\varphi _i}{dt}=2\\pi f_i\\), or \\(f_i = \\frac{1}{2\\pi}\\frac{d\\varphi _i}{dt}\\)</p> </li> </ul> <p>We can find that frequency is proportional to the rate of change of angle.</p> <ul> <li>If we note the \\(f_c\\) is the unmodulated carrier and \\(f_m\\) is the modulating frequency, then we may deduce:</li> </ul> \\[ \\begin{align*} f_i &amp;=f_c +frequency\\quad deviation \\\\  &amp;= f_c +\\Delta f_c\\cos{(2\\pi f_m t)}  \\\\  &amp;= f_c +f_i \\\\  &amp;= \\frac{1}{2\\pi}\\frac{d\\varphi _i}{dt}   \\end{align*} \\] <p>Where the \\(\\Delta f_c\\) called the peak deviation of the carrier.</p> <ul> <li>Then we can get the equation:</li> </ul> \\[ \\displaystyle\\frac{d\\varphi_i}{dt} = 2\\pi f_c + 2\\pi \\Delta f_c\\cos{(2\\pi f_m t)} \\] <ul> <li>Integrate the both side:</li> </ul> \\[ \\int{\\frac{d\\varphi _i}{dt}}{\\rm d}t = \\int{[2\\pi f_c + 2\\pi \\Delta f_c\\cos{(2\\pi f_m t)}]}{\\rm d}t \\] <ul> <li>Therefore:</li> </ul> \\[ \\varphi _i = 2\\pi f_c t + \\displaystyle\\frac{2\\pi \\Delta f_c\\sin{2\\pi f_m t}}{2\\pi f_m} \\] <ul> <li>Get back to the carrier signal:</li> </ul> \\[ v_s (t) = V_c \\cos{(2\\pi f_c t+\\displaystyle\\frac{\\Delta f_c\\sin{2\\pi f_m t}}{f_m})} \\] <ul> <li>The ratio \\(\\displaystyle\\frac{\\Delta f_c}{f_m}\\) is called the Modulation Index denoted \\(\\beta\\).</li> </ul> \\[ \\beta = \\displaystyle\\frac{Peak\\quad frequency\\quad Deviation}{Modulating\\quad frequency} \\] <ul> <li>\\(m(t)\\) is usually considered as 'a single tone modulating signal of the form:</li> </ul> \\[ m(t) = V_m \\cos{(2\\pi f_m t)} \\] <ul> <li>The equation of \\(v_s(t)\\) can be expressed as a Bessel Series\uff1a</li> </ul> \\[ v_s(t) = V_c\\int \\displaystyle\\Sigma_{-\\infty}^{\\infty}J_n(\\beta)\\cos{(2\\pi (f_c+nf_m)t)} \\] <ul> <li>\\(J(\\beta)\\) are the Bessel Function of the first kind.</li> </ul> <p>The expand of the equations can be:</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-fm-signal-spectrum","title":"3: FM Signal Spectrum","text":"<p>The Spectrum should be like:</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-bessel-coefficient","title":"4: Bessel coefficient","text":"<ul> <li>For n = 0, the curve is the carrier component.</li> <li>The frequency varies in amplitude with different \\(\\beta\\).</li> <li>The carrier component suppressed at \\(\\beta =2.4\\).(coefficient is 0, no carrier amplitude)</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#5-bessel-function-table","title":"5: Bessel Function Table","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#6-band-limited-fm-signals","title":"6: Band-Limited FM Signals","text":"<ul> <li> <p>The common FM signal contain an infinite number of sidebands, which is not suitable for transfer.</p> </li> <li> <p>Thus we have to fit the signal spectrum into available channel bandwidth.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#7-significant-sidebands","title":"7: Significant Sidebands","text":"<ul> <li> <p>In FM the sidebands are considered to be significant if \\(J_n(\\beta) \\ge 0.01\\).</p> </li> <li> <p>We deemed the components which \\(J_n(\\beta)\\) is less than 0.01.</p> </li> <li> <p>For example, for \\(\\beta =1\\), the spectrum is finite:</p> </li> </ul> <p></p> <ul> <li>The bandwidth is the length between the highest and lowest frequency.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#8-carsons-rule-for-fm-bandwidth","title":"8: Carson's Rule for FM bandwidth","text":"<ul> <li>An approximation for the bandwidth of the FM signal is given by:</li> </ul> \\[ Bandwidth \\approx 2(\\Delta f_c+f_m) \\] <ul> <li>This is based on the fact that at least 98% of the total power in FM will be in this bandwidth.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#9-narrowband-and-wideband-fm","title":"9: Narrowband and Wideband FM","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#91-norrowband-fm-nbfm","title":"9.1: Norrowband FM (NBFM)","text":"<p>For small \\(\\beta\\) (\\(\\beta\\) \\(\\le 0.3\\)), which are referred as narrowband FM.</p> <p>There are only carrier and 2 significant sidebands, i.e. BW=2\\(f_m\\).</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#92-wideband-fm-wbfm","title":"9.2: Wideband FM (WBFM)","text":"<p>For \\(\\beta &gt;0.3\\) there are more than 2 significant sidebands. This is referred as wideband FM.</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#10-generation-of-fm-signals-frequency-modulation","title":"10: Generation of FM Signals - Frequency modulation","text":"<p>An FM modulator is:</p> <ul> <li>a voltage-to-frequency converter V/f</li> <li>a voltage controlled oscillator VCO </li> </ul> <p>In these device (V/F or VCO), the output frequency is dependant on the input voltage.</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#101-vf-characteristics","title":"10.1: V/F Characteristics","text":"<ul> <li>Apply \\(V_{IN}\\) and measure the frequency output, it is found that V/F characteristic is a straight line.</li> </ul> <ul> <li> <p>\\(f_c\\), the frequency output when the input is zero is called the undeviated or norminal carrier frequency.</p> </li> <li> <p>The gradient of \\(\\displaystyle\\frac{\\Delta f}{\\Delta V}\\) is called the Frequency Conversion Factor,denoted by \\(\\alpha\\), with unit hertz per volt.</p> </li> <li> <p>If an analogue message input, \\(m(t)=V_m\\cos{(2\\pi f_m t)}\\)</p> </li> <li>As the input \\(m(t)\\) varies from \\(+V_m \\rightarrow 0 \\rightarrow - V_m\\), the output frequency will vary from a maximum frequency, through \\(f_c\\) to a minimum frequency.</li> </ul> <p></p> <ul> <li>For a straight line we may say:</li> </ul> \\[ f_{OUT} = f_c+\\alpha V_{IN} \\] <p>When \\(V_{IN}=m(t)\\), \\(f_{OUT}=f_c +\\alpha m(t)\\),i.e. the deviation depend on \\(m(t)\\).</p> <ul> <li>We can find the max and min of the frequency:</li> </ul> \\[ \\begin{align*} f_{max} &amp;= f_c +\\alpha V_m \\\\ f_{min} &amp;= f_c -\\alpha V_m  \\end{align*} \\] <ul> <li>According to the definition of Peak Deviation, \\(\\Delta f_c = \\alpha V_m\\), hence the modulation index \\(\\beta = \\displaystyle\\frac{\\Delta f_c}{f_m}=\\displaystyle\\frac{\\alpha V_m}{f_m}\\).</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#11-power-in-fm-signals","title":"11: Power in FM Signals","text":"<ul> <li>\\(v_s(t) = V_c\\displaystyle\\int_{n=-\\infty}^{\\infty}{J_n(\\beta)\\cos{(2\\pi (f_c + nf_m)t)}}\\), the peak value is \\(V_cJ_n(\\beta)\\).</li> <li>we use RMS value to determine the average power:</li> </ul> \\[ V_{RMS} = \\displaystyle\\frac{V_{pk}}{\\sqrt{2}} \\] <ul> <li>The power in sideband \\(P_{SB}\\):</li> </ul> \\[ P_{SB} = \\displaystyle\\frac{1}{R_L}(\\displaystyle\\frac{V_cJ_n(\\beta)}{\\sqrt{2}})^2= \\displaystyle\\frac{(V_cJ_n(\\beta))^2}{2R_L} \\] <ul> <li>The total power \\(P_T\\) is the integration of infinite components:</li> </ul> \\[ P_T = \\displaystyle\\frac{1}{R_L}(\\frac{V_c}{\\sqrt{2}})^2 =\\displaystyle\\int_{n=-\\infty}^{\\infty}{\\displaystyle\\frac{(V_cJ_n(\\beta))^2}{2R_L}} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#12-distortion-in-fm-signals","title":"12: Distortion in FM Signals","text":"<ul> <li>The distortion can be defined as:</li> </ul> \\[ D = \\displaystyle\\frac{P_T-P_{BL}}{P_T} = 1-\\displaystyle\\frac{P_{BL}}{P_T} \\] <ul> <li>For a band-limited FM, let \\(a\\) = the number of sideband pairs:</li> </ul> \\[ P_{BL} = \\displaystyle\\frac{1}{R_L}\\displaystyle\\int_{n=-a}^{a}\\displaystyle\\frac{(V_cJ_n(\\beta))^2}{2} \\] <p>which is the carrier power + significant sideband power.</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#13-fm-demodulation-general-principles","title":"13: FM Demodulation - General Principles","text":"<ul> <li>An FM demodulator is essentially a frequency to voltage converter (F/V).</li> </ul> <ul> <li>We define \\(V_o\\) as the output when \\(f_{IN}=f_c\\), the nominal input frequency.</li> </ul> <ul> <li>The gradient \\(\\frac{\\Delta V}{\\Delta f}\\) is called the voltage factor, \\(K\\) V/Hz:</li> </ul> \\[ V_{OUT} = V_0 + K\\alpha V_{IN} \\] <p>where \\(V_0\\) represents a DC offset in \\(V_{OUT}\\).</p> <ul> <li>This DC offset may be removed by level-shifting or AC coupling.</li> </ul> <p></p> <p>Often but bot always, a system is designed so that \\(K\\alpha =1\\).</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#14-slope-detection","title":"14: Slope Detection","text":"<ul> <li>One method is to use the slope of a tuned circuit in conjunction with an envelope detector, known as a slope detector.</li> </ul> <p>Tuned to a higher frequency than the carrier frequency.</p> <ul> <li>The tuned circuit is tuned so \\(f_c\\) is on th e slope of the frequency response, not at the peak.</li> <li>As the FM signal deviate about \\(f_c\\) on the tuned circuit slope, the amplitude of the output varies linearly to the deviation from \\(f_c\\).</li> <li>Thus the FM signal is effectively converted to AM. Then the envelope detector recover the message signal.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#141-frequency-response-of-the-slope-detector","title":"14.1: Frequency Response of the Slope detector","text":"<ul> <li>The linear region on slope of the frequency response is small.</li> <li>This means FM signal with larger peak deviations \\(\\Delta f_c\\) and larger modulation index \\(\\beta\\), will extend beyond the linear region, which result in distortion of the demodulated signals.</li> <li>Hence the slope detector can only be used for NBFM.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#15-balanced-discriminator","title":"15: Balanced Discriminator","text":"<ul> <li>The balanced discriminator is split into two halves, tuned into \\(f_1\\) and \\(f_2\\) which are either side of the \\(f_c\\).</li> <li>The linearity region of the frequency response provides that the difference between \\(f_1\\) and \\(f_2\\) is large.</li> <li>When the instantaneous frequency of the FM is \\(f_c\\), both diodes conduct which cancel each out resulting in no output.</li> <li>However, when the frequency of FM signal moves away from \\(f_c\\), one diode conducts more than the other resulting in one of the resistors having a larger voltage.</li> <li>The output is then the modulating signal.</li> </ul> <ul> <li>Balanced discriminator have a characteristic 'S-shaped' frequency response.</li> <li>This method will provide larger linear region to demodulate the narrow-band and wide-band signals. </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#iv-digital-modulation","title":"IV: Digital Modulation","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-introduction","title":"1: Introduction","text":"<ul> <li> <p>Digital modulation is the mapping of binary data to sin carrier signals.</p> </li> <li> <p>The digital message can vary the amplitude, frequency and phase of the carrier.</p> <ul> <li>Amplitude Shift keying.</li> <li>Frequency Shift Keying.</li> <li>Phase shift Keying</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-digital-modulator","title":"2: Digital Modulator","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-amplitude-shift-keying-ask","title":"3: Amplitude Shift Keying (ASK)","text":"<ul> <li>We generate the ASK from the DSB-AM modulator and the input \\(d(t)\\) is encoded signal.</li> </ul> \\[ v_s(t) = (V_{DC}\\pm V)\\cos{(2\\pi f_c t)} \\] <ul> <li>If \\(V_{DC}&gt; V\\), then the carrier will have two amplitude, \\(V_1 = V_{DC}+V\\) and \\(V_0 = V_{DC} -V\\).</li> </ul> \\[ v_s(t) = \\begin{cases}     V_1\\cos{(2\\pi f_c t)},&amp; for\\quad 1 \\\\     V_0\\cos{(2\\pi f_c t)}, &amp; for\\quad 0  \\end{cases} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#31-on-off-keying","title":"3.1: On-off Keying","text":"<ul> <li>Use a DSB-SC to generate the OOK.(make sure \\(V = V_{DC}\\)).</li> </ul> \\[ v_s(t) = \\begin{cases}    (2V)\\cos{(2\\pi f_c t)},&amp; bit\\quad 1 \\\\    0,&amp; bit\\quad 0  \\end{cases}  \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-phase-shift-keying","title":"4: Phase Shift Keying","text":"<ul> <li>Using a DSB-SC modulator:</li> </ul> <ul> <li>More easier way:</li> </ul> \\[ v_s(t) = \\begin{cases}     V\\cos{(2\\pi f_c t)},&amp; 1 \\\\     -V\\cos{(2\\pi f_c t)},&amp; 0 \\end{cases} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#5-frequency-shift-keying","title":"5: Frequency Shift Keying","text":"<ul> <li>An FSK signal can be generated using an FM modulator:</li> </ul> <ul> <li>Or:</li> </ul> \\[ v_s(t) = \\begin{cases}     V_c \\cos{(2\\pi f_1 t)}, for 1 \\quad,f_1 = f_c +\\Delta f_c \\\\     V_c \\cos{(2\\pi f_0 t)}, for 0 \\quad,f_0 = f_c -\\Delta f_c  \\end{cases} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#6-ask-and-psk-demodulation","title":"6: ASK and PSK Demodulation","text":"<ul> <li>The result after the I&amp;D will be:</li> </ul> \\[ \\bar{V} = \\displaystyle\\frac{V_{DC}+V}{2T}(T+\\displaystyle\\frac{\\sin{(4\\pi f_c T)}}{4\\pi f_c T}) \\] <p>As \\(f = \\frac{1}{T}\\), if we choose 'n'(integer) times f is \\(f_c\\):</p> \\[ f_c = \\frac{n}{T} \\] <p>So \\(\\bar{V} = \\frac{V_{DC}+V}{2}\\) is for the signal '1', while \\(\\bar{V} = \\frac{V_{DC}-V}{2}\\) for the signal '0'.</p> <p>If the ASK signal the demo received as below:</p> <p></p> <p>The signal is then mixed with the local oscillator set at the same frequency as the carrier.</p> <p></p> <p>For the PSK signal, it is also mixed with the local oscillator as the same frequency.</p> <p></p> <p>The result will be below:</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#7-fsk-demodulator","title":"7: FSK Demodulator","text":"<p>The mixed signals are integrated over \\(T\\) resulting in two average \\(r_0\\) and \\(r_1\\), which is known as correlation demodulator.</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#71-minimum-shift-keying-msk","title":"7.1: Minimum Shift Keying (MSK)","text":"<p>If \\(f_1 - f_0 = \\frac{n}{T}\\) and \\(f_1 +f_0 = \\frac{m}{T}\\), m and n are all integers, we call \\(f_1\\) and \\(f_0\\) are orthogonal to each other.</p> <p>Then the final result of \\(f_0\\) will be 0.</p> <p>When \\(f_1-f_0 = \\frac{1}{2\\pi}\\), the sin() become 0, so it is called the minium shift keying (MSK).</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#8-theoretical-performance","title":"8: Theoretical Performance","text":"<ul> <li>We can define the bit-error rate performance as a function of a signal-to-noise ratio.</li> <li>It is assumed that the modulated signal is corrupted with the addition of noise, the white Gaussian distributed, which is known as Additive White Gaussian Noise (AWGN) channel.</li> </ul> <ul> <li>Bit-error rate \"BER\" \\(P_b\\) is defined as: </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#81-probability-density-function","title":"8.1: Probability Density Function","text":"<ul> <li> <p>The most common one in engineering - The Gaussian Distribution (normal distribution)</p> </li> <li> <p>The equation is given by:</p> </li> </ul> \\[ p(x) = \\displaystyle\\frac{1}{\\sqrt{2\\pi \\sigma ^2}} e^{-\\frac{(x-\\mu)^2}{2\\sigma ^2}} \\] <ul> <li>The \\(\\mu\\) is the mean and the \\(\\sigma ^2\\) is the variance.</li> </ul> <p></p> <ul> <li>Cause we cannot integrate directly, we express it into the error function \\(erf(x)\\).</li> </ul> \\[ erf(x) = \\displaystyle\\frac{2}{\\sqrt{\\pi}}\\int _0 ^x e^{-t^2}{\\rm d}t \\] <ul> <li>We also use the complimentary function \\(erfc(X)\\):</li> </ul> \\[ erfc(x) = 1-erf(x) \\] <p></p> <ul> <li>We can use the substitution to make the target p(x) to erf(x), for example:</li> </ul> <p>For the function:</p> \\[ P(0\\le x \\le g) = \\displaystyle\\frac{1}{\\sqrt{{2\\pi \\sigma ^2}}}\\displaystyle\\int _{0} ^g {e^{-\\frac{x^2}{2\\sigma ^2}{\\rm d}x}} \\] <ul> <li>Q function is the positive side of the standard normal distribution, which is used sometimes.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#82-psk-on-the-awgn-channel","title":"8.2: PSK on the AWGN Channel","text":"<ul> <li>If x was transmitted then received symbol will be \\(r = x + n\\), where \\(n\\) is AWGN with zero mean and variance \\(\\sigma ^2\\).</li> <li>If \\(r&gt;0\\) then the receiver will make the decision that \\(x = \\sqrt{E_b}\\) was transmitted, else if \\(r&lt;0\\) then the receiver will decide that \\(x = -\\sqrt{E_b}\\) was transmitted.</li> </ul> <ul> <li>If we transmitted \\(x = \\sqrt{E_b}\\):</li> </ul> \\[ P(e|x = \\sqrt{E_b}) = \\displaystyle\\int _0^{\\infty}{p(r|x = \\sqrt{E_b}){\\rm d}r} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#83-ook-on-the-awgn-channel","title":"8.3: OOK on the AWGN Channel","text":"<ul> <li>Now if \\(r&gt;\\frac{\\sqrt{E_b}}{2}\\) then the OOK demodulator will make the decision that \\(x=\\sqrt{E_b}\\).</li> <li>Else if \\(r&lt;\\frac{\\sqrt{E_b}}{2}\\), then the demodulator decides that \\(x=0\\) was transmitted: $$ P(e|x=\\sqrt{E_b}) = \\displaystyle\\int _{-\\infty} ^{\\frac{\\sqrt{E_b}}{2}}{p(r|x=\\sqrt{E_b}){\\rm d}r} $$</li> </ul> <p>Similarly $$ P(e|x=-\\sqrt{E_b})=\\frac{1}{2}erfc((\\sqrt{\\frac{E_b}{4N_0}})) $$</p> <p>(\\(N_0\\) is \\(2 \\sigma ^2\\))</p> <ul> <li>So the average BER is: $$ P_b = \\displaystyle\\frac{P(e|x=-\\sqrt{E_b})+P(e|x=\\sqrt{E_b})}{2}=\\displaystyle\\frac{1}{2}erfc(\\sqrt{\\displaystyle\\frac{E_b}{4N_0}}) $$</li> <li> <p>Compare this with the PSK BER: $$  P_b = \\displaystyle\\frac{1}{2}erfc(\\frac{E_b}{N_0}) $$</p> </li> <li> <p>The OOK perform worse than PSK.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#84-fsk-on-the-awgn-channel","title":"8.4: FSK on the AWGN Channel","text":"<ul> <li>We first assume the separation between the two frequencies \\(f_0\\) and \\(f_1\\) is sufficient so that both FSK signals are orthogonal. The constellation diagram for orthogonal FSK is shown below.</li> </ul> <ul> <li>The FSK demodulator output compares two received values, \\(r_0\\) and \\(r_1\\).</li> <li>Assume that noise samples \\(n_0\\) and \\(n_1\\), which are both Gaussian distributed with zero mean and variance \\(\\sigma ^2\\). The two received output will be: </li> </ul> <p>\\(r_0 = \\sqrt{E_b}+n_0\\) and \\(r_1 = \\sqrt{E_b}+n_1\\)</p> <ul> <li>If assumes that we transmitted \\(x_1\\). The output at the FSK demodulator will be:</li> </ul> <p>\\(r_1 = \\sqrt{E_b}+n_1\\) and \\(r_0 = n_0\\)</p> <ul> <li>An error occurs if the FSK demodulator decides that \\(r_0&gt;r_1\\), or \\(n_0&gt;\\sqrt{E_b}+n_1\\):</li> </ul> <p></p> <ul> <li>The average BER for orthogonal FSK is then:</li> </ul> \\[ P_b = \\displaystyle\\frac{1}{2}erfc((\\sqrt{\\frac{E_b}{2N_0}})) \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#85-performance-comparison-of-ook-psk-and-fsk-on-awgn-channel","title":"8.5: Performance Comparison of OOK, PSK and FSK on AWGN channel","text":"<p>The Notation of dB</p> <ul> <li>For a value of 'x' is its original unit, 'x' in dB will be \\(10\\lg{x}\\).</li> <li>For a value in dB, its original value will be \\(10^{\\frac{x}{10}}\\)</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#v-information-theory","title":"V: Information Theory","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-introduction-to-information-theory","title":"1: Introduction to Information Theory","text":"<ul> <li>Information theory was presented by Claude Shannon in 1948.</li> <li>Using information theory we can determine how much we can compress a signal and the max transmission rate over a noise channel to achieve reliable communication.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-binary-symmetric-channel","title":"2: Binary Symmetric Channel","text":"<ul> <li> <p>The binary symmetric channel (BSC) is an example of a discrete memoryless source. This means that each received bit is independent of other bits.</p> </li> <li> <p>The BSC is commonly used as a simplified model of a communication system.</p> </li> </ul> <p></p> <p></p> <ul> <li>Using Bayes's theorem we can also calculate the conditional possibility as \\(P(X|Y)\\):</li> </ul> \\[ P(X|Y) = \\displaystyle\\frac{P(X)P(Y|X)}{P(Y)} \\] <ul> <li>The joint probabilities P(X,Y) of BSC can be:</li> </ul> \\[ P(X,Y) = P(Y)P(X|Y) = P(X)P(Y|X) \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-binary-erasure-channel","title":"3: Binary Erasure Channel","text":"<ul> <li> <p>An erasure e, is a bit has been labelled as unreliable (i.e.not certain about '0' or '1')</p> </li> <li> <p>The Binary Erasure Channel (BEC) can be used to model many systems, such as compact disc players and the transmission packets over a wireless network.</p> </li> <li> <p></p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-information","title":"4: Information","text":"<ul> <li>A source outputs messages comprising symbols that occurs varying probabilities.</li> <li> <p>If we assume the symbols outputted are statically independent, then the source is called discrete memoryless source (DMS).</p> </li> <li> <p>Shannon defined a measure of information in a symbol \\(X\\), as:</p> </li> </ul> \\[ I(X_i) = \\log_{2}{\\frac{1}{P(X_i)}} \\] <ul> <li> <p>The unit of \\(I\\) is bit.</p> </li> <li> <p>We can see if \\(P(X_i)\\) then \\(I(X_i)=0\\) bits, there is no information received =. This is because we already know the symbol and no uncertainty.</p> </li> <li> <p>Information has the following properties:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#5-entropy","title":"5: Entropy","text":"<ul> <li>Entropy is the average amount of information carried by a message \\(X\\) defined by \\(M\\), \\(X_1,X_2,X_M\\).</li> </ul> <ul> <li>The entropy of a binary source \\(H(p)\\) is plotted below:</li> </ul> <ul> <li>The entropy of a source \\(H(X)\\) is the average of uncertainty about the source input before the output is observed.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#51-conditional-entropy","title":"5.1: Conditional Entropy","text":"<ul> <li>The conditional entropy of a source input selected from an alphabet \\(X\\) given that we observed an output symbol \\(Y\\) is given by:</li> </ul> \\[ H(X|Y=y_i) =\\displaystyle \\Sigma_{j=1}^N{P(x_j|y_i)\\log_{2}{\\frac{1}{P(x_j|y_i)}}} \\] <ul> <li>Since \\(H(X|Y=y_i)\\) can values from \\(y_1\\) to \\(y_M\\), then the mean conditional entropy is:</li> </ul> \\[ \\begin{aligned}     H(X|Y) &amp;= \\displaystyle \\Sigma_{i=1}^N {P(Y_i)H(X|Y=y_i)} \\\\     &amp;= \\displaystyle\\Sigma_{i=1}^N \\Sigma_{j=1} ^M P(y_i)P(x_j|y_i)\\log_{2}{\\frac{1}{P(x_j|y_i)}} \\end{aligned} \\] <ul> <li>From Bayes's theorem, \\(P(y_i)P(x_i|y_i) = P(x_j,y_i)\\)</li> </ul> <p>So the conditional entropy can be:</p> \\[ H(X|Y) = \\displaystyle \\Sigma_{i=1}^N\\Sigma _{j=1} ^M P(X_j,Y_i)\\log_{2}{\\frac{1}{P(x_j|y_i)}} \\] <ul> <li> <p>H(X|Y) represents the uncertainty of the source input after the output is observed.</p> </li> <li> <p>Since \\(H(X)\\) is the uncertainty of the source input before observed and \\(H(X|Y)\\) is the after one, then the difference between them must be the average amount of information about \\(X\\) after observing \\(Y\\).</p> </li> <li> <p>This is called the mutual information.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#6-mutual-information","title":"6: Mutual Information","text":"<ul> <li>The difference between the H(X) and H(X|Y) is called the average mutual information I(X,Y).</li> </ul> \\[ I(X,Y) = H(X)- H(X|Y) \\] <ul> <li>The relation between entropy, conditional entropy and mutual information can be expressed:</li> </ul> <ul> <li> <p>Mutual information indicates how much the output Y can tell us about the input X. It is a measure of the quality of the channel.</p> </li> <li> <p>The formula of I(X,Y) will be:</p> </li> </ul> <p></p> <ul> <li>Mutual information has the following properties:</li> <li>I(X,Y) = H(X) - H(X|Y)</li> <li>I(Y,X) = H(Y) - H(Y|X)</li> <li>I(X,Y) = I(Y,X)</li> <li> <p>I(X,Y) \\(\\le\\) 0</p> </li> <li> <p>Note that if we know the \\(H(X|Y)\\), we can get: \\(H(Y|X) = H(X|Y)-H(X)+H(Y)\\)</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#7-capacity","title":"7\uff1a Capacity","text":"<ul> <li>The capacity of a channel is the max rate at which information can be transmitted error free and is measured in bits per second (bps).</li> <li>The average mutual information is dependent on the input probability distribution and the channel.</li> <li>We define the channel capacity, C, of a discrete memoryless channel as the max average mutual information, where the max is over all possible input probabilities:</li> </ul> <ul> <li>We will now determine the capacity of two simple channels: the binary symmetric channel and the binary erasure channel.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#71-capacity-of-the-binary-symmetric-channel","title":"7.1: Capacity of the Binary Symmetric Channel","text":"<ul> <li>To calculate the capacity of the binary symmetric channel we need to determine the mutual information.</li> </ul> <p>To maximize \\(I(X,Y)\\) we set \\(\\alpha =1/2\\) and the capacity of the BSC is:</p> <p></p> <p></p> <ul> <li>So the capacity of the BSC is \\(C = 1-H(p)\\)</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#72-capacity-of-the-binary-erasure-channel","title":"7.2: Capacity of the Binary Erasure Channel","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#73-comparison-of-bsc-and-bec-channel-capacity","title":"7.3: Comparison of BSC and BEC Channel Capacity","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#74-capacity-of-a-gaussian-channel","title":"7.4: Capacity of a Gaussian Channel","text":"<ul> <li> <p>The capacity of a channel affected by Gaussian noise is dependant on the channel bandwidth \\(B\\) and the signal-to-noise ratio \\(S/N\\), where \\(S\\)is average signal power and \\(N\\) is average noise power.</p> </li> <li> <p>In this case the input alphabet is still discrete, but the output is analogue.</p> </li> <li> <p>The capacity of the binary input Gaussian channel is given by the Shannon-Hartley channel capacity theorem.</p> </li> </ul> \\[ C = B\\log_{2}{(1+\\frac{S}{N})},bps \\] <ul> <li>We can express \\(S\\) in terms of bit energy by \\(S=E_b C\\) and \\(N=N_0 B\\), where \\(N_0\\) is the noise power spectral density, W/Hz. </li> <li>Then we define the bandwidth efficiency in terms of the bit-energy-to-noise power spectral density ratio:</li> </ul> \\[ \\frac{C}{B} = \\log_{2}{(1+\\frac{E_b}{N_0}\\frac{C}{B})} \\] <p></p> <ul> <li>The bandwidth shows that as bandwidth \\(B\\rightarrow \\infty\\), \\(E_b/N_0\\rightarrow -1.6dB\\). This is the minimum value of the signal-to-noise ratio \\(E_b/N_0\\) where it is possible to ensure error free transmission.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#8-source-coding","title":"8: Source Coding","text":"<ul> <li> <p>Sourcing coding involves representing each symbol in an alphabet as unique binary codewords.</p> </li> <li> <p>The aim is to minimize the average length of the binary codewords.</p> </li> <li> <p>Usually, some symbols are more likely to occur. In this case, those symbols that occurs less often are assigned longer words.</p> </li> <li> <p>Mores code is an example of a source code where the length of codeword where the length of codeword depends on the frequency of the letters.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#9-code-efficiency","title":"9: Code efficiency","text":"<ul> <li> <p>A discrete memoryless source generates \\(N\\) symbols, \\(s_1\\) to \\(s_N\\) with corresponding probability \\(P(s_1)\\) to \\(P(s_N)\\). The source encoder then assigns a binary codeword to each symbol with lengths \\(l_1\\) to \\(l_N\\) (The length could be fixed or variable)</p> </li> <li> <p>Therefore the average length of the codewords is:</p> </li> </ul> \\[ \\bar{L} = \\displaystyle\\Sigma_{i=1}^N P(s_i)l_i \\] <ul> <li>We define a ratio called code efficiency \\(\\eta\\) as:</li> </ul> \\[ \\eta = \\frac{L_{min}}{\\bar{L}} \\] <p>where \\(L_{min}\\) is the minimum average length of the codewords.</p> <ul> <li> <p>The value of \\(L_{min}\\) id given in Shannon's source-coding theorem.</p> </li> <li> <p>Given a discrete memoryless source of entropy \\(H(X)\\), the average codeword length is bounded as:</p> </li> </ul> \\[ \\bar{L} \\le H(X) \\] <ul> <li>The code efficiency can vary between 0 and 1. Ideally we would like the efficiency to be 1.</li> </ul> <p></p> <p></p> <ul> <li>In order to increase the source efficiency, we need to reduce the average length of the source codewords.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#91-variable-length","title":"9.1: Variable Length","text":"<p>We must ensure that the code can be decoded. The following code I cannot be uniquely, as the '00' have the same prefix as '0'.</p> <p></p> <p>Code II do not have same prefix so that can be used. This is known as a prefix code.</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#10-huffman-coding","title":"10: Huffman Coding","text":"<ul> <li> <p>Huffman codes are variable length codes.</p> </li> <li> <p>The Huffman coding assign each symbol a binary codeword that is approximately equal to the amount of information given by the symbol.</p> </li> <li> <p>Huffman coding algorithm:</p> <ul> <li>List the symbol in descending order of probability (highest at the top)</li> <li>Take two smallest probabilities, add them to forma new probability and reorder the probabilities.</li> <li>Repeat this process at each stage until only two probabilities remain.</li> <li>Assign 0 and 1 to the two final symbols. With each successive split, add another 0 and 1 on the end of the previous codeword to form another codeword.</li> </ul> </li> <li> <p>For example:</p> </li> </ul> <p></p> <p>then:</p> <p></p> <p>Note that the one who is successfully split will be add '0' at the front, the fixed (no split) will be  added '1'.</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#vi-introduction-to-signals","title":"VI: Introduction to Signals","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-continuous-time-signals","title":"1: Continuous-Time Signals","text":"<ul> <li>A continuous signal is defined over all values of time.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-discrete-time-signals","title":"2: Discrete-Time Signals","text":"<ul> <li>Discrete-time signal is defined at specific values of time. </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-amplification","title":"3: Amplification","text":"<ul> <li>Amplification means form \\(v(t)\\) to \\(Av(t)\\) and keep the time unchanged.</li> <li>i.e. multiply a value at y-axis</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-time-shifting","title":"4: Time Shifting","text":"<ul> <li>Time shifting is moving the signal function in the time (x) axis.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#5-time-scaling","title":"5: Time Scaling","text":"<ul> <li>From \\(v(t)\\) to \\(v(at)\\).</li> <li>For \\(a&gt;1\\), the signal compressed; for \\(a&lt;1\\), the function stretched.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#6-common-functions-used-in-signal-processing","title":"6: Common Functions used in Signal Processing","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#61-impulse-function","title":"6.1: Impulse function","text":"\\[  \\delta (t) = \\begin{cases}     1,\\quad t=0 \\\\     0, \\quad otherwise  \\end{cases} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#62-step-function","title":"6.2: Step function","text":"\\[ u(t) = \\begin{cases}     1,\\quad t \\ge 0 \\\\     0,\\quad t &lt; 0 \\end{cases} \\] <ul> <li>Describe a process form '0' to '1'.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#63-unit-ramp-function","title":"6.3: Unit Ramp function","text":"\\[ R(t) = \\begin{cases}     t,\\quad t\\ge 0 \\\\     0,\\quad t&lt;0 \\end{cases} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#7-mean-value-of-a-signal","title":"7: Mean Value of a Signal","text":"<ul> <li>The mean value of a signal is defined as:</li> </ul> \\[ \\bar{v} = \\frac{1}{(t_2-t_1)}\\int _{t_1}^{t_2} v(t){\\rm d}t \\] <ul> <li>For a periodic signals the mean value is defined over the period \\(T\\):</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#8-root-mean-square-value","title":"8: Root Mean Square Value","text":"<ul> <li>The Mean Square Value of a signal between two points \\(t_1\\) and \\(t_2\\):</li> </ul> \\[ \\bar{v^2} = \\displaystyle\\frac{1}{(t_2-t_1)}\\int _{t_1} ^{t_2}{v^2(t)}{\\rm d}t \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#9-energy-of-a-signal","title":"9: Energy of a Signal","text":"<ul> <li>The energy, \\(E\\), of a continuous-time signal is the area under the signal squared, i.e.:</li> </ul> \\[ E = \\displaystyle\\int _{-\\infty} ^{\\infty} {|v(t)|^2}{\\rm d}t \\] <ul> <li>The energy of a signal can be finite or infinite. The energy of a periodic signal is infinite.</li> <li> <p>A signal with finite energy is called an energy signal.</p> </li> <li> <p>The energy of a discrete-time signal is the sum of the discrete values squared.</p> </li> </ul> \\[ E = \\Sigma _{n = -\\infty} ^{\\infty}{|v(n)|^2} \\] <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#10-average-signal-power","title":"10: Average Signal Power","text":"<ul> <li>The average power of a continuous-time signal is the time average of its energy calculated over a long time interval.</li> </ul> \\[ P_{av} = \\lim_{T_0\\to \\infty}\\frac{1}{T_0}\\int _{-T_0/2} ^{T_0/2}{|v(t)|^2}{\\rm d}t \\] <ul> <li>For a periodic continuous-time signal, the average power is calculated over one period \\(T\\):</li> </ul> \\[ P_{av} = \\frac{1}{T}\\int _{-T/2} ^{T/2}{|v(t)|^2}{\\rm d}t \\] <ul> <li>The average power of a discrete-time signal is:</li> </ul> \\[ P_{av} = \\lim_{B\\to \\infty} \\frac{1}{2N+1}\\Sigma _{n=-N} ^{N}{|v(n)|^2} \\] <ul> <li>If the average power of a signal is finite then it said to be a power signal.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#11-signals-in-the-frequency-domain","title":"11: Signals in the Frequency Domain","text":"<ul> <li> <p>All signals in the time domain can be represented in the frequency domain.</p> </li> <li> <p>A single sine or cosine function has one frequency, which can be expressed as a shifted delta function.</p> </li> </ul> <p></p> <ul> <li>Time domain signals with more frequencies can be expressed as the sum of shifted delta functions:</li> </ul> <p></p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#12-negative-frequency","title":"12: Negative Frequency","text":"<ul> <li>The sine and cosine function can be written as the complex exponentials:</li> </ul> <p>\\(e^{j2\\pi f_0 t} = \\cos{(2\\pi f_0 t)}+j\\sin{(2\\pi f_0 t)}\\)</p> <p>and </p> <p>\\(e^{-j2\\pi f_0 t} = \\cos{(2\\pi f_0 t)}-j\\sin{(2\\pi f_0 t)}\\)</p> <ul> <li>Add both we can get:</li> </ul> <p></p> <p></p> <ul> <li> <p>Negative frequencies only occur when in complex exponential form.</p> </li> <li> <p>In physical waveforms we see the combination of both negative and positive frequencies pairs to from single positive frequencies.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#13-analogue-to-digital-ad-conversion","title":"13: Analogue-to-Digital (A/D) Conversion","text":"<ul> <li> <p>The sampler converts the analogue signals \\(v(t)\\) to discrete-time signals.</p> </li> <li> <p>The quantiser maps the sampled values to a smaller set of discrete values.</p> </li> <li> <p>The coder takes each discrete values and represents it as binary values.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#131-sampling","title":"13.1: Sampling","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#132-discrete-time-signals","title":"13.2: Discrete-Time Signals","text":"<ul> <li>A discrete-time signal with period \\(N\\), where N &gt; 0:</li> </ul> \\[ x(n+N) = x(n) \\] <ul> <li> <p>The smallest value of N is known as fundamental period</p> </li> <li> <p>So \\(\\sin{(2\\pi f_d (N+n))}=\\sin{(2\\pi f_d n)}\\).</p> </li> </ul> <p>This will be true if \\(2\\pi f_d N = 2\\pi k\\).</p> <ul> <li>As \\(f_d = \\frac{k}{N}\\), if k and N are relatively prime then the fundamental period will be n</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#133-frequency-of-discrete-time-signals","title":"13.3: Frequency of discrete-time signals","text":"<ul> <li> <p>The frequency of a discrete-time signal \\(f_d\\) is measured in cycles per sample.</p> </li> <li> <p>If the \\(-\\frac{1}{2}\\le f_d \\le \\frac{1}{2}\\), the it is unique.</p> </li> </ul> <p></p> <ul> <li>For discrete-time signals, all frequencies satisfy \\(|f_d|&gt;\\frac{1}{2}\\) are known as aliases.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#134-relationship-between-analogue-and-discrete-time-signals","title":"13.4: Relationship between Analogue and Discrete-time signals","text":"<ul> <li> <p>Take an analogue signal \\(v(t) = \\cos{(2\\pi f_a t)}\\).</p> </li> <li> <p>If the signal sampled every \\(T_s\\) seconds (or rate \\(f_s\\)), we get:</p> </li> </ul> \\[ v(t) = \\cos{(2\\pi f_a n T_s)} = \\cos{\\frac{2\\pi f_a n}{f_s}} \\] <ul> <li> <p>The discrete-time signal has a frequency of \\(\\frac{f_a}{f_s}\\) cycles/samples. </p> </li> <li> <p>Therefore, we can find the expression of the \\(f_d\\) related to the analogue frequency:</p> </li> </ul> \\[ f_d = \\frac{f_a}{f_s} \\] <ul> <li>As the range of an analogue signal is infinite, the range of \\(f_d\\) should be:</li> </ul> \\[ -\\frac{1}{2}\\le f_a \\le \\frac{1}{2} \\] <ul> <li>The frequency of the analogue signal when sampled every \\(T_s\\) seconds, or \\(f_s= \\frac{1}{T_s}\\), so:</li> </ul> \\[ -\\frac{f_s}{2}\\le f_a \\le \\frac{f_s}{2} \\] <ul> <li>Therefore, the highest frequencies of an analogue signal \\(f_a\\) that is unique when sampled with sampling rate \\(f_s\\) is:</li> </ul> \\[ f_a = \\frac{1}{2T_s} = \\frac{f_s}{2} \\] <ul> <li>The result of alias will be:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#135-sampling-theorem","title":"13.5: Sampling Theorem","text":"<ul> <li> <p>In general, analogue signals are made up of many different sin signals summed together.</p> </li> <li> <p>Therefore, any analogue signal must be sampled at a rate \\(f_{max}\\le \\frac{f_s}{2}\\), where \\(f_{max}\\) is the highest frequency in the analogue signal, to ensure the analogue signal can be recovered from the discrete time signal.</p> </li> <li> <p>The minimum sampling rate required to recover the analogue signal from the discrete-time signal is called the Niquist Rate, \\(f_N\\) and defined as:</p> </li> </ul> \\[ f_N = 2f_{max} \\] <ul> <li>For example, \\(v(t) = \\cos{(2\\pi \\times 100t)}\\), if sampled at a rate of \\(f_s = 150\\). As \\(t = nT_s\\), \\(T_s = \\frac{1}{f_s}\\):</li> </ul> \\[ f(n) = \\cos{(2\\pi \\times 100 \\times \\frac{n}{150})} \\] <ul> <li> <p>We can find the sampling frequency is larger than 1/2.</p> </li> <li> <p>As \\(n = 150t\\), \\(v(t) = \\cos{(2\\pi \\times 50t)}\\), which is not same as original signal.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#14-linear-time-invariant-lti-systems","title":"14: Linear Time Invariant (LTI) Systems","text":"<ul> <li>If systems has inputs \\(x_1(t)\\) and \\(x_2(t)\\) and corresponding output \\(y_1(t)\\) and \\(y_2(t)\\) then it is linear if the sum of the weighted message \\(ax_1(t) + bx_2(t)\\) generates the output \\(ay_1(t)+by_2(t)\\).</li> </ul> <ul> <li>A system is time invariant if a time shift \\(\\tau\\) in the input causes the same time shift in the output:</li> </ul> <ul> <li>Hence this system is a Linear Time Invariant System.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#141-impulse-response","title":"14.1: Impulse Response","text":"<ul> <li>The impulse response \\(h(n)\\) of a system shows the behavior of the system when the input is impulse function \\(\\delta (n)\\).</li> </ul> <ul> <li>Knowing the impulse response of LTI means we can determine the response to any sampled input.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#142-finite-impulse-response-fir-system","title":"14.2: Finite Impulse Response (FIR) System","text":"<ul> <li> <p>The output of a FIR system depends only on the current input and past input value.</p> </li> <li> <p>If the input of an impulse then the number samples at the output is finite and equal to the number of memory elements plus one.</p> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>So the impulse response of the FIR filter is \\(h(n) = {1,0.5,0,0,...}\\)</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#143-infinite-impulse-response-iir-systems","title":"14.3: Infinite Impulse Response (IIR) Systems","text":"<ul> <li> <p>The output of an infinite impulse response system depends on the input and also output values, which are fed back and added to the input.</p> </li> <li> <p>The feedback structure causes IIR system to generate an infinite number of samples at the output when the input is an impluse.</p> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#144-application-of-an-iir-system","title":"14.4: Application of an IIR system","text":"<ul> <li>The square root of a positive number A can be determined by recursive equation:</li> </ul> \\[ y(n) = \\frac{1}{2}[y(n-1)+\\frac{x(n)}{y(n-1)}] \\] <ul> <li>We initialize the memory element with y(-1), which is estimate of the square root of A. The input is a step response with amplitude A, i.e. x(n) = Au(n)</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#145-causal-and-non-causal-systems","title":"14.5: Causal and Non-Causal Systems","text":"<ul> <li> <p>A system is causal if the output signal depends only on present and past inputs, but does not on future inputs.</p> </li> <li> <p>Or else it is non-causal.</p> </li> <li> <p>For a real-time signal processing, a non-causal system cannot be used as it is not possible to get the future values.</p> </li> <li> <p>However, if the signal we wish to process has been recorded the non-causal system can be used</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#15-introduction-to-digital-filters","title":"15: Introduction to Digital Filters","text":"<ul> <li> <p>There are three types of filter: low-pass, band-pass and high-pass.</p> </li> <li> <p>The low-pass filter allows low frequency signals to pass up to a cut-off frequency \\(f_c\\).</p> </li> <li> <p>The band-pass filter allows a range of frequency signals to pass.</p> </li> <li> <p>The high-pass filter allows high frequencies signals to pass.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#151-fir-low-pass-filter","title":"15.1: FIR Low-Pass Filter","text":"<ul> <li>Discrete-time low-pass filters can also be realized using an FIR system.</li> </ul> <ul> <li>This low-pass filter has been designed to have a discrete-time cut-off frequency of 1/3 cycles/sample.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#152-digital-low-pass-filtering-of-a-distorted-sin-signal","title":"15.2: Digital Low-Pass Filtering of a distorted sin signal","text":"<ul> <li>The sampled values from the distorted sin are fed into the digital low-pass filter. We assume that the signal is zero for negative 'n'.</li> </ul> <ul> <li> <p>The output of the filter shows that the filter has smoothed the distorted sin signal. There is still a small amount of distortion in the signal, but this can be removed by increasing the length of the filter.</p> </li> <li> <p>Notice that the filtered signal is delayed by 4 samples compared with the original due to 4 memory elements.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#16-convolution","title":"16: Convolution","text":"<ul> <li>Determine the response of a digital filter caused by input signal is one application of an important math operation called convolution. If we know the impulse response h(n) of a system then the convolution of input x(n) and h(n) to obtain y(n):</li> </ul> \\[ y(n) = \\Sigma _{k=-\\infty}^{\\infty}{x(k)h(n-k)} \\] <ul> <li> <p>For simplicity the convolution of two function \\(x(n)\\) and \\(h(n)\\) is denoted as \\(x(n)*h(n)\\).</p> </li> <li> <p>The convolution operation involves of four parts:</p> <ul> <li>Flipping: Reflect \\(h(k)\\) in the y-axis to obtain \\(h(-k)\\)</li> <li>Shifting: Shift \\(h(-k)\\) by n places to the right to obtain \\(h(n-k)\\).</li> <li>Multiplying: Multiplying x(k) by h(n-k).</li> <li>Summing: Add all values from the product x(k)h(n-k) to obtain y(n).</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#161-convolution-example","title":"16.1: Convolution Example","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#162-multiple-fading-channel","title":"16.2: Multiple Fading Channel","text":"<ul> <li>One application of the convolution operation is to model the effects of a multipath fading channel on a transmitted signal.</li> </ul> <ul> <li> <p>At the receiver multiple copies of the signal arrive at different times and add constructively or destructively depending on the phase shift of each signal.</p> </li> <li> <p>The multipath fading channel can be modelled as a low-pass FIR filter.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#vii-laplace-transform","title":"VII: Laplace Transform","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-introduction-to-laplace-transform","title":"1: Introduction to Laplace Transform","text":"<ul> <li> <p>Laplace transforms used to solve linear differential equations with constant coefficient.</p> </li> <li> <p>Produce the transfer functions of different systems to see how different parts of a system interact.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-definition-of-laplace-transform","title":"2: Definition of Laplace Transform","text":"<ul> <li> <p>The laplace transform takes a function in time domain and transform it to the \\(s\\) domain.</p> </li> <li> <p>\\(s\\) domain is a complex frequency variable, where \\(s = \\sigma +j\\omega\\).</p> </li> <li> <p>The laplace transform is defined as:</p> </li> </ul> \\[ F(s) = \\int _0 ^{\\infty} e^{-st}f(t){\\rm d}t \\] <ul> <li> <p>We denote the laplace transform of \\(f(t)\\) as \\(\\mathcal{L}\\{f(t)\\}\\).</p> </li> <li> <p>Lower case letters denotes function in the time domain, and upper case letters denotes function in the s domain.</p> </li> </ul> <p></p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-laplace-transform-properties","title":"3: Laplace Transform Properties","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#31-linearity","title":"3.1: linearity","text":"\\[ \\begin{aligned}     \\mathcal{L}\\{f(t)+g(t)\\} &amp;= \\mathcal{L}\\{f(t)\\} + \\mathcal{L}\\{g(t)\\} \\\\     \\mathcal{L}\\{\\alpha f(t)\\} &amp;= \\alpha \\mathcal{L}\\{f(t)\\} \\\\ \\end{aligned} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#32-first-shift-theorem","title":"3.2: First Shift Theorem","text":"<ul> <li>If \\(\\mathcal{L}\\{f(t)\\}=F(s)\\), then \\(\\mathcal{L}\\{e^{-at}f(t)\\}=F(s+a)\\)</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#33-second-shift-theorem","title":"3.3: Second Shift Theorem","text":"<ul> <li> <p>If \\(\\mathcal{L}\\{f(t)\\}=F(s)\\), then \\(\\mathcal{L}\\{u(t-d)f(t-d)\\} = e^{-sd}F(s)\\).</p> </li> <li> <p>'u' is the step function.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#34-region-of-convergence","title":"3.4: Region of Convergence","text":"<ul> <li> <p>It was mentioned that 's' can be defined as a complex frequency, defined as \\(s=\\sigma +j\\omega\\).</p> </li> <li> <p>The real part of \\(s\\), \\(\\sigma\\), must have restrictions placed on it so that the Laplace integral converges.</p> </li> </ul> \\[ F(s) = \\int _0 ^{\\infty} f(t).e^{-st}{\\rm d}t = \\int_0^{\\infty}e^{-\\sigma t}e^{-j\\omega t}{\\rm d}t \\] <p></p> <ul> <li> <p>The term \\(e^{-\\sigma t}\\) diverges of converges depending on whether \\(\\sigma &lt;0\\) or \\(\\sigma &gt;0\\).</p> </li> <li> <p>The integral will converge if \\(\\sigma &gt;0\\), or \\(\\mathfrak{R}{s}&gt;0\\), where \\(\\mathfrak{\\{R\\}}{s}\\) is the real part of \\(s\\).</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#35-inverse-laplace-transform","title":"3.5: Inverse Laplace Transform","text":"<ul> <li> <p>The inverse laplace transform, \\(\\mathcal{L}^{-1}\\{F(s)\\}\\), can convert from the s-domain back to time domain.</p> </li> <li> <p>This can be achieved by using the common Laplace Transform.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#36-finding-inverse-laplace-transform-using-partial-fraction","title":"3.6: Finding inverse laplace transform using Partial Fraction","text":"<ul> <li>When finding the inverse Laplace transform, we regularly need to write our expression in the s-domain in terms of partial fractions:</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#37-laplace-transform-of-derivative-and-integrals","title":"3.7: Laplace Transform of Derivative and Integrals","text":"<ul> <li>\\(\\mathcal{L}\\{f'\\} = sF(s)-f(0)\\)</li> <li> <p>\\(\\mathcal{L}\\{f''\\} = s^2F(s)-sf(0)-f'(0)\\)</p> </li> <li> <p>\\(\\mathcal{L}\\{\\int _0 ^t f(t){\\rm d}t\\} = \\frac{1}{s}F(s)\\)</p> </li> </ul> <p></p> <ul> <li>This method can be used to solve the differential equations with the invert laplace transform.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#38-example-1-capacitor-discharging","title":"3.8: Example 1: Capacitor Discharging","text":"<ul> <li> <p>At t = 0, the voltage across the capacitor is \\(v_c (0) = V\\). Close the switch, the capacitor will discharge.</p> </li> <li> <p>As \\(v_c + v_R = 0\\), \\(i = C\\frac{dv_c}{dt}\\).</p> </li> <li> <p>The first-order differential equation is \\(EC\\frac{dv_c}{dt} + v_C = 0\\)</p> </li> <li> <p>\\(v_c (t) = Ve^{-\\frac{t}{RC}}\\).</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#39-example-2-rlc-circuit","title":"3.9: Example 2: RLC Circuit","text":"<ul> <li> <p>We will determine the current when the input \\(v(t)\\) is a delta function \\(\\delta (t)\\).</p> </li> <li> <p>\\(v(t) = v_C +v_L +v_R\\)</p> </li> <li> <p>As \\(i(t) = C\\frac{dv_C}{dt}\\), integrating both sides, \\(v_c = \\frac{1}{C}\\int _0^t i(t){\\rm d}t\\)</p> </li> <li> <p>So \\(v(t) = \\frac{1}{C}\\int _0 ^t i(t){\\rm d}t + L\\frac{di(t)}{dt} + i(t)R\\)</p> </li> <li> <p>With initial condition \\(i(0) = 0\\), the value of \\(i(t)\\) can be found.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#310-transfer-function","title":"3.10: Transfer Function","text":"<ul> <li>The transfer function, \\(H(s)\\) of a system is the laplace transform of the output, \\(Y(s)\\), divided by the Laplace transform of the input, \\(X(s)\\).</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3101-example-1","title":"3.10.1: Example 1","text":"<ul> <li>The low-pass filter can be expressed as the differential equation:</li> </ul> \\[ v_{IN} (t) = RC\\frac{dV_{OUT(t)}}{dt} + v_{OUT}(t) \\] <ul> <li>Take the Laplace Transform:</li> </ul> \\[ \\frac{V_{OUT}(s)}{V_{IN}(s)} = \\frac{1}{1+sRC} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3102-transfer-functions-in-series","title":"3.10.2: Transfer Functions in Series","text":"<ul> <li>If two systems with transfer function \\(H_1(s)\\) and \\(H_2(s)\\) are in series.</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3103-eliminating-a-negative-feedback-loop","title":"3.10.3: Eliminating a Negative Feedback Loop","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#3104-example-2","title":"3.10.4: Example 2","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#311-poles-and-zeros","title":"3.11: Poles and Zeros","text":"<ul> <li> <p>We can express most transfer functions in the form of \\(H(s) = \\frac{Y(s)}{X(s)}\\).</p> </li> <li> <p>If the highest power in \\(Y(s)\\) is \\(m\\) and the highest power in \\(X(s)\\) is \\(n\\), where \\(m &lt; n\\):</p> </li> </ul> <p></p> <ul> <li> <p>The values of s that make H(s) = 0 called zeros (z).</p> </li> <li> <p>The values of s that make H(s) = \\(\\infty\\) called poles</p> </li> <li> <p>It is useful to plot zeros and poles on the s-plane diagram to understand the system.</p> </li> <li> <p>Let \\(X(s) = \\frac{1}{s-p}\\) where \\(p\\) is a complex pole \\(p = a+jb\\).</p> </li> <li> <p>The inverse Laplace transform of \\(X(s)\\):</p> </li> </ul> \\[ x(t) = e^{pt} = e^{(a+jb)t} = e^{at}e^{jbt}= e^{at}(\\cos{(bt)}+j\\sin{(bt)}) \\] <ul> <li> <p>There is an exponential term \\(e^{at}\\) and a sin (oscillating) term \\(e^{jbt}\\)</p> </li> <li> <p>The effect of the poles is called a transient response because it decreased with time.</p> </li> <li> <p>The real part of a pole must be negative for the response caused by that to declay with time.</p> </li> <li> <p>If a pole is further to the left one the x-axis of the s-plane, then the transient response will decay quicker.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#the-instruction-of-lab-report","title":"The Instruction of Lab report","text":"<ul> <li>Abstract:<ul> <li>short summary (experiment and findings)</li> <li>one paragraph (not a large report)</li> <li>what you find and the lab about </li> <li>Minimize the information</li> <li>DO NOT INCLUDE REFERENCE IN ABSTRACT !!!</li> <li>A separated part</li> </ul> </li> <li>Introduction:<ul> <li>Background of FM (brief)</li> <li>Experiment</li> </ul> </li> <li>Aims <ul> <li>General statements of what you achieved,</li> <li>Specific the tasks what you have done to achieve the aims (bullet points)</li> </ul> </li> <li>Procedure:<ul> <li>Demonstrate you understand the reasons per instruction (why)</li> <li>Method + Demonstration</li> <li>Explain the steps of the methods   </li> </ul> </li> <li>Result:<ul> <li>Ensure the demonstration and the figure in the same page and using the figure number.</li> <li>Describe the results with figures.</li> </ul> </li> <li>Discussion:<ul> <li>Explain the results - why do they look like that.</li> <li>Connect with the FM theory (validate the result)</li> </ul> </li> <li> <p>Conclution:</p> <ul> <li>Summary of the experiment and result</li> <li>Passive voice needed</li> </ul> </li> <li> <p>Reference:</p> <ul> <li>IEEE format </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#viii-fourier-transforms","title":"VIII: Fourier Transforms","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-introduction_1","title":"1: Introduction","text":"<ul> <li> <p>The most periodic signals could be represented as the sum of sin signals by Fourier Series.</p> </li> <li> <p>Generally most signals will not be periodic and finite. These are called the transient signals.</p> </li> <li> <p>To analyses the transient signals in frequencies domain, we an use the Fourier Transforms.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-harmonics","title":"2: Harmonics","text":"<ul> <li> <p>Consider the signal \\(v(t) = \\cos{(2\\pi n f t)}\\) with the frequency \\(nf\\).</p> </li> <li> <p>When \\(n=1\\), this is called the first harmonic or fundamental frequency of \\(v(t)\\).</p> </li> </ul> <p></p> <ul> <li>All sinusoids with frequencies that are harmonics of the fundamental frequencies: \\(2f,3f,4f\\), etc.</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-gibbs-phenomenon","title":"3: Gibb's Phenomenon","text":"<ul> <li> <p>If periodic signal has discontinuities over a period then the Fourier series representation overshoots.</p> </li> <li> <p>This is known as Gibb's Phenomenon.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-fourier-series","title":"4: Fourier Series","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#5-definition-of-the-fourier-transform","title":"5: Definition of the Fourier Transform","text":"<ul> <li>The Fourier transform of a signal \\(f(t)\\) is defined as:</li> </ul> \\[ \\mathcal{F}\\{f(t)\\} = F(\\omega) = \\displaystyle\\int_{-\\infty}^{\\infty} f(t)e^{-j\\omega t}{\\rm d}t  \\] <ul> <li> <p>The Fourier transform integral looks similar to the Laplace transform integral with \\(s=j\\omega\\) and the limits between \\(\\pm \\infty\\).</p> </li> <li> <p>The inverse transform of the signal \\(F(\\omega)\\) is:</p> </li> </ul> \\[ \\mathcal{F}\\{F(\\omega)\\} = f(t) = \\frac{1}{2\\pi }\\displaystyle\\int _{-\\infty} ^{\\infty} F(\\omega) e^{j\\omega t}{\\rm d}\\omega \\] <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#6-common-fourier-transfrom","title":"6: Common Fourier Transfrom","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#7-properties-of-the-fourier-transform","title":"7: Properties of the Fourier Transform","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#71-linearity","title":"7.1: Linearity","text":"\\[ \\mathcal{F}\\{f(t)+g(t)\\} = \\mathcal{F}\\{f(t)\\} + \\mathcal{F}\\{g(t)\\} \\\\ \\mathcal{F}\\{\\alpha f(t)\\} = \\alpha \\mathcal{F}\\{f(t)\\} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#72-first-shift-theorem","title":"7.2: First shift Theorem","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#72-second-shift-theorem","title":"7.2: Second shift Theorem","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#8-similarity-with-laplace-transform","title":"8: Similarity with Laplace Transform","text":"<ul> <li>the integral of the Laplace and Fourier transform look similar:</li> </ul> <ul> <li>We observe that the Laplace integral differs with the Fourier Transform due to the presence of delaying term \\(e^{=\\alpha t}\\)</li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#9-frequency-spectra","title":"9: Frequency Spectra","text":"<ul> <li> <p>Most periodic functions had a Fourier series, which could be used to plot the frequency spectrum of the function.</p> </li> <li> <p>For periodic functions, the frequency spectrum is discrete, such as the components with frequencies \\(f,2f,3,f,etc\\).</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#10-the-time-frequency-principles","title":"10: The time-frequency Principles","text":"<p>In the inverse Fourier transform integrals, we can treat \\(\\omega\\) as a dummy variable and replace it with \\(z\\):</p> \\[ f(t) = \\displaystyle\\frac{1}{2\\pi} \\int _{-\\infty}^{\\infty} F(z)e^{jzt}{\\rm d}z \\] \\[ f(-\\omega) = \\frac{1}{2\\pi}\\mathcal{F}\\{f(t)\\} \\] <ul> <li> <p>This is known as the \\(t-\\omega\\) duality principle and allows us to find the Fourier Transform of other functions.</p> </li> <li> <p>The time-frequency relationship will be:</p> </li> </ul> \\[ \\mathcal{F}\\{F(t)\\} = 2\\pi f(-\\omega) \\] <p></p> <p></p> <ul> <li> <p>Find the same equation in the frequencies domain.</p> </li> <li> <p>Multiply with \\(2\\pi\\) and change 't' to the '-\\(\\omega\\)'.</p> </li> <li> <p>Change the minus \\(\\omega\\) back to positive using the type of the function.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#ix-z-transforms","title":"IX: Z transforms","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#1-introduction-to-z-transfrom","title":"1: Introduction to Z transfrom","text":"<ul> <li> <p>The Z transform can be considered as the discrete-time equivalent of the Laplace Transform.</p> </li> <li> <p>It can be used to characterize systems with the transfer function and solve difference equations with non-zero initial conditions.</p> </li> <li> <p>A difference equation is the discrete equivalent of a differential equation, such as:</p> </li> </ul> \\[ y[k] = 2x[k]-x[k-1] \\] <p>is a first-order difference equation.</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#2-definition-of-z-transform","title":"2: Definition of Z Transform","text":"<p>For a sequence \\(f[k]\\), the Z transform is defined as:</p> \\[ F(z) = \\mathcal{Z}\\{f[k]\\} = \\displaystyle\\sum_{k=0}^{\\infty} f[k]z^{-k} \\] <p>which is an infinite series that we expand as:</p> \\[ \\mathcal{Z}\\{f[k]\\} = \\frac{f[0] }{z^0} + \\frac{f[1]}{z^1} + ... \\] <p>In most case, it will be possible to express these infinite series in s closed form. </p> <p>The closed form exist when the values of z are within the region of convergence.</p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#21-example-1","title":"2.1: Example 1","text":"<p>For example, find the Z transform of \\(x[k] = a^k\\):</p> <p>Apply the definition then:</p> \\[ \\mathcal{Z}\\{a^k\\} = \\frac{1}{1-\\frac{a}{2}} = a^0 + \\frac{a^1}{z^1} + \\frac{a^2}{z^2}+... \\] <p>This is an infinite geometric series with common ratio of \\(\\frac{a}{z}\\), whose converge to:</p> \\[ \\displaystyle\\frac{1}{1-\\frac{a}{z}} \\] <p>So:</p> \\[ \\mathcal{Z}\\{a^k\\} = \\frac{1}{1-\\frac{a}{z}} \\] <p>Therefore the z transform converges when |z| &gt; |a|, which that range can be expressed as the shadow area:</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#22-example-2","title":"2.2: Example 2","text":"<p>Find the z transform of unit step function in discrete form:</p> \\[ f[k] = \\begin{cases}     1, \\quad k\\ge 0 \\\\     0, \\quad k &lt; 0 \\end{cases} \\] <p>Use the definition of z transform:</p> \\[ F(z) = \\mathcal{Z}\\{f[k]\\} = \\sum_{k=0}^{\\infty} f[k]z^{-k} \\] <p>We find that:</p> \\[ F(z) = 1+ \\frac{1}{z^1} + \\frac{1}{z^2} + \\frac{1}{z^3} + ... = \\displaystyle\\frac{1}{1-\\frac{1}{z}} = \\frac{z}{z-1} \\] <p>when \\(|z|&gt;1\\), this sequency is called as the unit step function denoted by \\(u(k)\\).</p> <p></p>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#23-table-of-common-z-transform","title":"2.3: Table of Common Z Transform","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#3-properties-of-the-z-transform","title":"3: Properties of the Z transform","text":""},{"location":"NOTES/Stage_2/signalsAndCommunication/#31-linearity_1","title":"3.1: Linearity","text":"\\[ \\mathcal{Z}\\{f[k] + g[k]\\}= \\mathcal{Z}\\{f[k]\\} + \\mathcal{Z}\\{g[k]\\} \\] <p>and </p> \\[ \\mathcal{Z}\\{\\alpha f[k]\\} = \\alpha \\mathcal{Z}\\{f[k]\\} \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#32-first-shift-theorem_1","title":"3.2: First Shift Theorem","text":"\\[ \\mathcal{Z}\\{f[k+i]\\} = z^iF(z) - (z^if[0] + z^{i-1}f[1] + ... + zf[i-1]) \\] <p>While in this module, we will use the first shift theorem for \\(i=1\\) and \\(i=2\\):</p> \\[ \\mathcal{Z}\\{f[k+1]\\} = zF(z) - zf[0] \\] <p>and </p> \\[ \\mathcal{Z}\\{f[k+2]\\} = z^2F(z) - z^2f[0]-zf[1] \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#33-second-shift-theorem_1","title":"3.3: Second Shift Theorem","text":"\\[ \\mathcal{Z}\\{f[k-1]u[k-1]\\} = z^{-1}F(z) \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#4-inverse-z-transforms","title":"4: Inverse Z Transforms","text":"<ul> <li> <p>We need to manipulate \\(F(s)\\) so that it looked like the functions in the table of common z transform.</p> </li> <li> <p>We will also use partial fractions to find the inverse z transform.</p> </li> </ul>"},{"location":"NOTES/Stage_2/signalsAndCommunication/#5-solving-difference-equations-using-z-transform","title":"5: Solving Difference Equations using Z transform","text":"<ul> <li>Z Transform can be used to solve difference equations.</li> </ul> <p>For example, to solve \\(x[k+1]-3x[k]=0\\) with the initial condition \\(x[0] = 1\\):</p> <p>Take the z transform in both side:</p> \\[ \\mathcal{Z}\\{x[k+1]\\} - \\mathcal{Z}\\{3x[k]\\} = \\mathcal{Z}\\{0\\} \\] <p>Using the first shift theorem:</p> \\[ zX(z) -zx[0] - 3X(z) = 0 \\] <p>We find the \\(X(z)\\):</p> \\[ X(z) = \\frac{z}{z-3} \\] <p>Using the inverse z transform:</p> \\[ x[k] = 3^k \\]"},{"location":"NOTES/Stage_2/signalsAndCommunication/#6-stability-of-a-lti-system","title":"6: Stability of a LTI System","text":"<ul> <li> <p>A linear time-invariant system is only stable if its system function \\(H(z)\\) includes the unit circle.</p> </li> <li> <p>This means that all poles of \\(H(z)\\) lies inside the unit circle.</p> </li> <li> <p>For example, for a LTI system with \\(H(z)\\) given by:</p> </li> </ul> \\[ H(z) = \\displaystyle\\frac{1}{(1+a)z-5} \\] <p>then determine the \\(a\\) so that the system is stable.</p> <ul> <li>The pole must be within the unit cycle to be stable:</li> </ul> \\[ \\begin{aligned}     (1+a)z-5 &amp;= 0 \\\\     z &amp;= \\frac{5}{1+a} \\end{aligned} \\] <ul> <li>To make:</li> </ul> \\[ -1 &lt; \\frac{5}{1+a} &lt;1 \\] <p>So a &lt; -6 or a &gt; 4 to make the system stable.</p>"},{"location":"NOTES/Stage_2/statisticalMethod/","title":"Statistical Method","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#i-introduction","title":"I: Introduction","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#1-definition","title":"1: Definition","text":"<ul> <li> <p>A random variable is a quantity we want to measure (usually repeatedly) </p> </li> <li> <p>An observation is a particular value of a random variable.</p> </li> <li> <p>We only observe a sample of population.</p> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#2-data","title":"2: Data","text":"<ul> <li> <p>Qualitative data is descriptive.</p> </li> <li> <p>Quantitative data can be counted, measured and expressed using numbers.</p> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#3-random-variables","title":"3: Random variables","text":"<ul> <li> <p>A random variable is a quantity we want to measure (usually repeatedly)</p> </li> <li> <p>Some random variables can be qualitative</p> </li> <li> <p>Mostly, the random variables are the things we can measure and therefore take numerical values.</p> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#4-uncertainties-in-measurement","title":"4: Uncertainties in measurement","text":"<ul> <li> <p>Systems error (bias) - affects accuracy </p> <ul> <li>Could be reduced or eliminated by careful calibration and experiment.</li> </ul> </li> <li> <p>Random error (random variation) - affects precision </p> <ul> <li>Due to factors cannot be controlled.</li> <li>Could be reduced by repeated measurements at the same condition.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#5-presentation-of-data","title":"5: Presentation of data","text":"<ul> <li> <p>Bar chart</p> </li> <li> <p>Pie chart </p> </li> <li> <p>Histogram </p> </li> <li> <p>Scatter plot </p> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#6-summary-statistics","title":"6: Summary Statistics","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#61-measure-of-location","title":"6.1: Measure of location","text":"<ul> <li> <p>The arithmetic mean.</p> </li> <li> <p>\\(\\bar{x} = \\frac{x_1+x_2+...+x_n}{n}\\).</p> </li> <li> <p>Another method is using occurrence frequency:</p> </li> </ul> \\[ \\bar{x} = \\frac{\\Sigma f_ix_i}{\\Sigma f_i} \\] <ul> <li>The weighted mean can be defined as:</li> </ul> \\[ \\bar{x} = \\displaystyle\\frac{\\Sigma x_iw_i}{\\Sigma w_i} \\] <ul> <li> <p>\\(w\\) is the weighting factor.</p> </li> <li> <p>The trimmed mean is the mean after the remove of max and min.</p> </li> <li> <p>The median is the value in the middle of the array.</p> </li> <li> <p>The mode is the value that appears most often.</p> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#62-measure-of-variability","title":"6.2: Measure of variability","text":"<ul> <li> <p>The range is \\(x_{max}-x_{min}\\).</p> </li> <li> <p>The quartiles are the three points (\\(Q_1,Q_2,Q_3\\)) that divide data set into four groups equally.</p> </li> <li> <p>\\(Q_1\\) is the lower quartile and \\(Q_3\\) is the higher quartile.</p> </li> <li> <p>The interquartile range (IQR) = \\(Q_3-Q_1\\).</p> </li> </ul> <p></p> <p></p> <ul> <li>The variance (sample variance) is defined by:</li> </ul> \\[ s^2 = \\displaystyle\\frac{\\sum_{i=1}^n (x_i-\\bar{x})^2}{n-1} \\] <ul> <li> <p>The equivalent population parameter is the population variance \\(\\sigma ^2\\)</p> </li> <li> <p>The standard deviation:</p> <ul> <li>For population:<ul> <li>\\(\\sigma\\)</li> </ul> </li> <li>For sample:<ul> <li>\\(s\\)</li> </ul> </li> </ul> </li> <li> <p>The Coefficient of variation is unitless defined as \\(\\frac{s}{\\bar{x}}\\)</p> </li> <li> <p>The standard error of the mean describes the variation of the values in a sample of the population:</p> </li> </ul> \\[ S.E._{\\bar{x}} = \\frac{s}{\\sqrt{n}} \\]"},{"location":"NOTES/Stage_2/statisticalMethod/#ii-probability","title":"II: Probability","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#1-basics-concepts","title":"1: Basics Concepts","text":"<ul> <li> <p>Experiment / Trail: A process where the outcome is random.</p> </li> <li> <p>Outcome: The result of a particular experiment.</p> </li> <li> <p>Sample Space: The set of all possible outcomes of an experiment.</p> </li> <li> <p>Events: Specific collection of sample points.</p> </li> </ul> <p>eg:</p> <p></p>"},{"location":"NOTES/Stage_2/statisticalMethod/#2-probability-of-events","title":"2: Probability of events","text":"<ul> <li>If the sample space S of an experiment consists of finitely many outcomes that are equally likely then the probability \\(P(A)\\) of an event \\(A\\) is:</li> </ul> <ul> <li>If the same applies to the experiment which is not equally likely:</li> </ul> <ul> <li>The probability of A is the proportion of times A occurs as the number of trials increasing.</li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#3-events","title":"3: Events","text":"<ul> <li>For two events A and B we define:<ul> <li>The union of A,B: \\(A\\cup B\\)</li> <li>The intersection of A,B: \\(A\\cap B\\)</li> <li>The complement of an A: \\(A'\\) or \\(\\bar{A}\\)</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#31-mutually-exclusive-events","title":"3.1: Mutually exclusive events","text":"<ul> <li> <p>Mutually exclusive events cannot both happen at the same time.</p> </li> <li> <p>E.g. For dice point =1 and point =6.</p> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#32-conditional-probability","title":"3.2: Conditional Probability","text":"<ul> <li> <p>Note that \\(P(A|B)\\), which means probability of A given B.</p> </li> <li> <p>Using the Venn graph, it can be expressed as:</p> </li> </ul> <p></p> <p>i.e:</p> \\[ P(A|B) = \\frac{P(A\\cup B)}{P(B)} \\] <ul> <li>Using the formula in P(A) and P(B), we can get:</li> </ul> \\[ P(A|B) = \\displaystyle\\frac{P(B|A)P(A)}{P(B)} \\] <ul> <li>Definition of independent events:</li> </ul> <p>Two events are independent if the occurrence of one does not affect the outcomes of other.</p> <ul> <li>For independent two events:</li> </ul> \\[ P(A\\cup B) = P(A)P(B) \\]"},{"location":"NOTES/Stage_2/statisticalMethod/#33-bayestheorem","title":"3.3: Bayes'theorem","text":"<ul> <li>Bayes' theorem is a way to reversing the condition in a conditional probability:</li> </ul> \\[ P(A|B) = \\displaystyle\\frac{P(B|A)P(A)}{P(B)} \\]"},{"location":"NOTES/Stage_2/statisticalMethod/#4-combinatorics","title":"4: Combinatorics","text":"<p>For example, choose random from a unsorted card deck with 52 cards, the possible events can be noted as:</p> \\[ \\begin{pmatrix} 52 \\\\ 2     \\end{pmatrix}= \\displaystyle\\frac{52!}{(52-5)!5!} \\] <p>or generally:</p> \\[ C(n,k) =  \\begin{pmatrix}     n \\\\     k \\end{pmatrix} = \\displaystyle\\frac{n!}{(n-k)!k!} \\] <p>or </p> \\[ C(n,k) = \\displaystyle\\frac{A_k^n}{n!} \\] <ul> <li>This is called the permutation.</li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#5-distributions","title":"5: Distributions","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#51-random-variable","title":"5.1: Random variable","text":"<ul> <li> <p>Variables whose possible values outcomes of a random process.</p> </li> <li> <p>Discrete or Continuous.</p> </li> <li> <p>Consider a random variable that represents the outcome of a experiment.</p> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#52-probability-distributions-of-univariate-discrete-variable","title":"5.2: Probability Distributions of Univariate discrete variable","text":"<ul> <li> <p>For a discrete random \\(X\\):</p> <ul> <li>the distribution corresponds to a list of probability \\(P(X=x)\\) for all values of \\(x\\), formally known as the probability mass function:</li> </ul> </li> </ul> \\[ f(x) = P(X=x) \\] <ul> <li>Note that:</li> </ul> \\[ 0 \\le f(x) \\le 1  \\] \\[ \\Sigma P(X=x) =1  \\] <p>eg:</p> <p></p>"},{"location":"NOTES/Stage_2/statisticalMethod/#53-probability-distributions-of-univariate-continuous-variable","title":"5.3: Probability Distributions of Univariate continuous variable","text":"<ul> <li>For a continuous random variable \\(Y\\):<ul> <li>the set of possible outcomes is infinite</li> <li>we cannot specify the pmf for a continuous random variable, which use cumulative distribution function (cdf) is defined the same :\\(F(y) = P(Y\\le y)\\).</li> <li>the probability that the outcome has a value between a small interval \\(y\\) and \\(y+\\delta y\\). </li> <li>the gradient of \\(F\\) at \\(y\\) is:</li> </ul> </li> </ul> \\[ \\frac{F(y+\\delta y)-F(y)}{\\delta y} \\] <ul> <li>The gradient function \\(f(y)\\) is known as the probability function (pdf):</li> </ul> \\[ f(y) \\ge 0 \\quad \\forall y  \\] <p>which is related to the cdf:</p> \\[ f(y) = \\displaystyle\\frac{dF(y)}{dy} \\] <ul> <li> <p>Note that it is possible for the pdf to take values greater than 1, as the pdf itself is not probability, the cdf is the probability.</p> </li> <li> <p>For example:</p> </li> </ul> <p></p> <p></p>"},{"location":"NOTES/Stage_2/statisticalMethod/#54-the-expectation-of-a-random-variable","title":"5.4: The expectation of a random variable","text":"<ul> <li>The expectation or expected value is defined as:</li> </ul> \\[ E[X] = \\displaystyle\\Sigma x P(X=x) \\]"},{"location":"NOTES/Stage_2/statisticalMethod/#55-the-variance-of-a-random-variable","title":"5.5: The variance of a random variable","text":"\\[ Var[X] = \\displaystyle\\Sigma (x-E[x])^2P(X=x) = E[X^2]-E[X]^2 \\] <ul> <li>Other relationship:</li> </ul> \\[ Var[aX+b] = a^2 Var[X] \\] <ul> <li>For independent random variable:<ul> <li>Var[\\(X_1+X_2\\)] = Var[\\(X_1\\)] + Var[\\(X_2\\)]</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#56-the-binomial-distribution","title":"5.6: The binomial distribution","text":"<ul> <li> <p>Describe the number of successes in a sequence of n independent experiments.</p> </li> <li> <p>The distribution has two parameters: n for the number of trial and p for probability of success for each experiment.</p> </li> <li> <p>The pmf for binomial distribution is:</p> </li> </ul> \\[ P(X=x) = C_n^x p^x (1-p)^{n-x} \\] <ul> <li>The expectation of binomial distribution is expressed as:</li> </ul> \\[ E[X] = np \\] <ul> <li>The variance of binomial distribution is expressed as:</li> </ul> \\[ Var[X] = np(1-p) \\]"},{"location":"NOTES/Stage_2/statisticalMethod/#57-the-poisson-distribution","title":"5.7: The Poisson distribution","text":"<ul> <li> <p>Describe the probability of a given number of events occurring in a fixed interval of time (or space etc.) if:</p> <ul> <li>these events occur with a known constant rate (parameter \\(\\lambda\\))</li> <li>and are independent of the time since the last event.</li> </ul> </li> <li> <p>The probability mass function of a Poisson distribution with \\(\\lambda\\) is given by:</p> </li> </ul> \\[ P(X=x) = e^{-\\lambda} \\frac{\\lambda ^x}{x!} \\] <ul> <li> <p>It can be shown that \\(E[X] = \\lambda\\) and Var[X] = \\(\\lambda\\).</p> </li> <li> <p>Sum of the independent Poisson Distribution also follow the Poisson distribution.</p> </li> </ul> <p></p> <ul> <li>The Poisson distribution can be used to approximate the binomial distribution when the total number of trials is large and the probability of success is low.</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/statisticalMethod/#58-comparison-of-binomial-and-poisson","title":"5.8: Comparison of Binomial and Poisson","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#59-continuous-distributions","title":"5.9: Continuous distributions","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#591-continuous-uniform-distribution","title":"5.9.1: Continuous uniform distribution","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#592-the-exponential-distribution","title":"5.9.2: The exponential distribution","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#593-the-normal-distribution","title":"5.9.3: The normal distribution","text":"<ul> <li>A 'bell-shaped' curve, or a Gaussian curve mean \\(\\mu\\) and \\(\\sigma ^2\\), which is denoted as:</li> </ul> \\[ X ~ N(\\mu,\\sigma^2) \\] <ul> <li>The standard normal distribution has \\(\\mu = 0\\) and \\(\\sigma^2\\):</li> </ul> <ul> <li> <p>Using the standard normal function table and the symmetric property, the possibility P(Z &lt; m) can be find easily.</p> </li> <li> <p>Any normally distributed random variable, \\(X(\\mu, \\sigma ^2)\\) can be transformed (standardized) to the standard normal distribution:</p> </li> </ul> \\[ ![](image/2023-05-29-13-25-36.png) \\] <ul> <li>After the transform, the pmf about new variable z ica n be got as:</li> </ul> <p></p> <ul> <li>The add operation of two different normal distribution X1 and X2:</li> </ul> <p></p> <ul> <li>The central limit theorem:</li> </ul> <p></p> <ul> <li> <p>Approximation to binomial distribution:</p> <ul> <li>As n increasing, the binomial distribution tends towards a normal distribution with mean \\(np\\) and variance \\(np(1-p)\\).</li> <li>Normally requires \\(np &gt; 5\\) and \\(n(1-p) &gt;5\\) </li> </ul> </li> <li> <p>Continuity Correction:</p> </li> </ul> <p></p> <ul> <li>The normal distribution can be used to approximate a Poisson distribution with \\(\\lambda &gt; 10\\), for large \\(\\lambda\\), each individual outcome becomes small so the continuity can be omitted.</li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#594-other-continuous-distribution","title":"5.9.4: Other continuous distribution","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#6-joint-probability-distributions-inference","title":"6: Joint probability distributions inference","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#61-joint-probability-distribution","title":"6.1: Joint probability distribution","text":"<ul> <li>If we consider two random variables simultaneously, it will lead to a joint probability distribution.</li> </ul> <ul> <li>The joint probability is the probability of the intersection of events \\(X =x\\) and \\(Y = y\\):</li> </ul> <ul> <li> <p>Marginal probability: the probability that \\(X=x\\) regardless of value of \\(Y\\) and vice versa.</p> </li> <li> <p>Conditional probability:</p> </li> </ul> <p></p> <ul> <li>Expectations:</li> </ul> <p></p> <ul> <li>Covariance:</li> </ul> <p></p> <p></p>"},{"location":"NOTES/Stage_2/statisticalMethod/#62-inference-estimation","title":"6.2: Inference - estimation","text":""},{"location":"NOTES/Stage_2/statisticalMethod/#621-inference","title":"6.2.1: Inference","text":"<ul> <li>We can construct the models for the population and use the information from the sample to estimate the unknown parameters in the model.</li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#622-point-estimate-vs-interval-estimate","title":"6.2.2: Point estimate vs interval estimate","text":"<ul> <li> <p>Point estimate:</p> <ul> <li>gives a single-value estimation of some population parameters.</li> <li>eg. use sample mean to estimate population mean.</li> </ul> </li> <li> <p>Point estimation:</p> <ul> <li>gives a probability of population mean in [a,b].</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/statisticalMethod/#623-estimators","title":"6.2.3: Estimators","text":""},{"location":"NOTES/Stage_2/vhdl/","title":"VHDL Programming","text":""},{"location":"NOTES/Stage_2/vhdl/#i-introduction","title":"I: Introduction","text":"<ul> <li> <p>VHDL short for VLSI hardware description language.</p> </li> <li> <p>VHDL is not an executable language but represents the elements of a digital circuit.</p> </li> </ul>"},{"location":"NOTES/Stage_2/vhdl/#11-structural-level-or-gate-level","title":"1.1: Structural-level or gate-level","text":"<p>The example of gate-level be like:</p> <p></p> <p>At this level the VHDL describes elements and how they connected to each other:</p> <ul> <li> <p>1: names and types for inputs and outputs.</p> </li> <li> <p>2: logical elements types (AND, NOT, MUX)</p> </li> <li> <p>3: names for internal signals (T1)</p> </li> <li> <p>4: names for the instances of logical elements (U1)</p> </li> <li> <p>5: connection between signals and ports</p> </li> </ul> <p>This representation is called the netlist.</p>"},{"location":"NOTES/Stage_2/vhdl/#12-register-transfer-level-rtl-or-data-flow-level","title":"1.2: Register Transfer Level (RTL) or data-flow level","text":"<p>The RTL describes the transformation that data undergo while propagating through the circuit. The circuits can be seen as a set of two types of elements:</p> <ul> <li> <p>1: Combinatorial logic:</p> <ul> <li>explicitly expresses data transformation using algebra, arithmetic expression and condition statements.</li> </ul> </li> <li> <p>2: Registers </p> <ul> <li>Registers are responsible for storing the intermediate results.</li> <li>In structural terms, an RTL specification is a sequence of combinatorial logic elements interrupted by registers:</li> </ul> </li> </ul> <p></p> <p>I is the input , U is the output, and CLK is the clock. At RTL level, each operation is explicitly assigned to a particular process or a specific clock cycle.</p> <ul> <li>The operation assignment at the various CLK is called scheduling.</li> </ul>"},{"location":"NOTES/Stage_2/vhdl/#13-arithmetic-or-behavioral-level","title":"1.3: Arithmetic or behavioral level","text":"<p>It will be the synthesis tool that will schedule the operations on the  various  clock cycles based on  constraints imposed  by the designer, such as the minimum clock  frequency or the maximum area. (not considered in this module)</p>"},{"location":"NOTES/Stage_2/vhdl/#ii-design-entitles","title":"II: Design entitles","text":"<p>Each system can be simplified to modules or blocks.</p> <p>For example of roots calculation of second-degree equation:</p> <p></p> <ul> <li>To reuse some of the modules, the difference between module and instance should be introduced.</li> </ul>"},{"location":"NOTES/Stage_2/vhdl/#1-modules-and-instances","title":"1: Modules and instances","text":"<ul> <li> <p>Module is single entity composed of an interface and defined behavior.</p> </li> <li> <p>Instance represents an object of this module used in this circuit.</p> </li> </ul> <p>For example:</p> <p></p> <p>this diagram consists of 3 modules and 5 instances.</p>"},{"location":"NOTES/Stage_2/vhdl/#2-entity","title":"2: Entity","text":"<ul> <li> <p>The module interface is called entity and determined by the entity construct.</p> </li> <li> <p>The behavior is called architecture and is represented by architecture construct.</p> </li> </ul> <p>The entity construct specifies the module name, the ports and a set of generic parameters if needed:</p> <pre><code>entity entity_name is \n    [generic(generic_list);]\n    [port(port_list);]\nend entity_name;\n</code></pre> <ul> <li> <p>The entity_name must be unique for each design, the prot_list describes the input and output signals of the design entity.</p> </li> <li> <p>The port_list describes the input and output as:</p> </li> </ul> <pre><code>prot_name[,port_name,...]:{in|out|inout} port_type\n</code></pre> <p>For example of full adder:</p> <p></p> <ul> <li>Note that a delay parameter is also specified for simulation purpose only. A value will be assigned to this parameter when the component is instantialised.</li> </ul> <p>The code would be like (-- for comments):</p> <pre><code>entity full_adder is\n    generic (delay: time);\n    port(\n        -- inputs\n        a:  in bit; \n        b:  in bit;\n        cin: in bit;\n\n        -- output \n\n        s: out bit; \n        cout: out bit;\n    );\n\nend full_adder;\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#3-architecture","title":"3: Architecture","text":"<p>An entity declaration defines the module interface, but it does not specify the functionality, which is described by architecture declaration:</p> <pre><code>architecture architecture_name  of entity name is \n    [declaration]\nbegin \n    [implementation]\nend architecture_name;\n</code></pre> <p>It is possible to specify different architecture for same entity and select one before proceeding. The association between a particular architecture and an  entity is called configuration declaration.</p> <p>For the implementation of full-adder:</p> <pre><code>architecture first of full_adder is \nbegin \n    s &lt;= a xor b xor cin after delay;\n    cout &lt;= (a and b) or (b and cin) or (a and cin) after delay;\nend first\n</code></pre> <ul> <li>Note that the synchronous problem should be mentioned, for example of the circuit below:</li> </ul> <p></p> <p>the code would be:</p> <pre><code>begin \n    t &lt;= a and b;\n    x &lt;= t and c;\n    y &lt;= d or e;\nend par_two\n</code></pre> <p>Note that the first AND gate and second AND gate are not executed synchronous, while the sentences under \"begin\" would execute at same time, which would lead to conflict.</p> <p>So if we choose another architecture:</p> <pre><code>architecture par_three of circuit is \n    signal t: bit;\nbegin \n    y &lt;= d or e;\n    x &lt;= t and c;\n    t &lt;= a and b;\nend par_three;\n</code></pre> <p>The conflict would be solved.</p>"},{"location":"NOTES/Stage_2/vhdl/#iii-data-types","title":"III: Data Types","text":""},{"location":"NOTES/Stage_2/vhdl/#1-data-types","title":"1: Data types","text":"<ul> <li> <p>Only few of the types can be used fro synthesis purpose as they are recognized by automatic synthesis tools.</p> </li> <li> <p>The basic data types and user-defined types will be introduced.</p> </li> </ul>"},{"location":"NOTES/Stage_2/vhdl/#2-bit-types","title":"2: Bit types","text":"<ul> <li> <p>The bit type is the simplest, which represent a binary value and can only be '0' or '1' enclosed in single quotes.</p> </li> <li> <p>The operators are assignment, comparison and logical operators.</p> </li> </ul> <pre><code>x &lt;= a and b;\ny &lt;= '1';\n</code></pre> <ul> <li>Constant need quotes and '+' no defined.</li> </ul>"},{"location":"NOTES/Stage_2/vhdl/#21-bit-vector-type","title":"2.1: Bit-vector type","text":"<ul> <li> <p>Used for vectors.</p> </li> <li> <p>A set of signals by a common name and an index.</p> </li> <li> <p>Possible to read and write elements through index:</p> </li> <li> <p>The vector has an order determined by keywords to or downto:</p> </li> </ul> <pre><code>bit_vector( 0 to 3 ); -- 4 Elements \nbit_vector( 16 downto 1); -- 16 Elements\n</code></pre> <ul> <li> <p>The specific elements is referred using (), such as a(5).</p> </li> <li> <p>Bit and bit-vector have no other states rather than logic '0' or '1', to use std_logic and std_logic_vector to extend the range of values and solve these limitation.</p> </li> </ul>"},{"location":"NOTES/Stage_2/vhdl/#3-integer-type","title":"3: Integer type","text":"<ul> <li> <p>The integer type represents 32-bit integer values and can be used for synthesis.</p> </li> <li> <p>The values are unsigned integers by default.</p> </li> </ul>"},{"location":"NOTES/Stage_2/vhdl/#4-ieee-types","title":"4: IEEE types","text":"<ul> <li> <p>It is used for synthesis purposes to specify values other than '0' and '1'.</p> </li> <li> <p>A standard IEEE library defines the addition types: std_logic* that include a nine logic values rather than 2:</p> </li> </ul> <p></p> <ul> <li>The IEEE library has three packages:<ul> <li>std_logic_unsigned</li> <li>std_logic_signed </li> <li>std_logic_arith</li> </ul> </li> <li>These define some arithmetic and comparison operators for std_logic and std_logic_vector types, such as :</li> </ul> <pre><code>c &lt;= a +b;\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#5-user-defined-types-subtyping-and-enumeration","title":"5: User-defined types: subtyping and enumeration","text":"<ul> <li> <p>A user-defined type is a new data type specified by the user that can redefined some operators used in new type.</p> </li> <li> <p>Subtyping defines a new type equivalent ro an existing one with limited range of values.</p> </li> </ul> <p>eg.</p> <pre><code>subtype new_type_name is type_name range val1 to val2 ;\n</code></pre> <ul> <li>To define a 5-bit integer as a subtype of standard integer with a range:</li> </ul> <pre><code>subtype small_integer is integer range 0 to 31; \n</code></pre> <ul> <li>Enumeration defines a new type by enumerating all the values:</li> </ul> <pre><code>type new_type_name is ( val0, val1, ..., valN ); \n</code></pre> <ul> <li>A typical case of using an enumerated type is in finite state machine:</li> </ul> <pre><code>type status is ( RES, INIT, COMP, ERR, OK ); \n</code></pre> <ul> <li>For a signal pres of this type:</li> </ul> <pre><code>pres &lt;= INIT;\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#iv-combinatorial-logic","title":"IV: Combinatorial Logic","text":""},{"location":"NOTES/Stage_2/vhdl/#1-slice-and-concatenation","title":"1: Slice and Concatenation","text":"<ul> <li>Slice is a subset of a vector:</li> </ul> <pre><code>signal_name (index1 to index2);\n</code></pre> <ul> <li>Index1 and index2 must be valid value followed the order imposed by to or downto.</li> </ul> <p>For example:</p> <p><pre><code>architecture rtl of test is \n    signal BUS: std_logic_vector(0 to 31);\n    signal B0, B1, B2, B3: std_logic_vector(0 to 7);\nbegin \n    B0 &lt;= BUS(0 to 7);\n    B1 &lt;= BUS(8 to 15);\n    B2 &lt;= BUS(16 to 23);\n    B3 &lt;= BUS(31 downto 24);\nend rtl;\n</code></pre> </p> <ul> <li>The concatenation allows signals under the same name with the operator '&amp;':</li> </ul> <pre><code>BUS2 &lt;= B3(7 downto 0) &amp; B2 &amp; B1 &amp; B0 \n</code></pre> <p>For example:</p> <pre><code>if ( a='1' and b='0' and c='1') then ...\n</code></pre> <p>can be rewrite as:</p> <pre><code>signal temp: std_logic_vector(0 to 2);\ntemp &lt;= a &amp; b &amp; c;\nif (temp = \"101\") then ...\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#2-logic-expression","title":"2: Logic expression","text":""},{"location":"NOTES/Stage_2/vhdl/#3-truth-tables","title":"3: Truth tables","text":"<ul> <li>For example:</li> </ul> <p>which using conditional assignment construct.</p> <p>or more simplified version:</p> <p></p> <p>or the output may not limits to '0' and '1':</p> <p></p> <ul> <li>The concatenation can be used in truth tables:</li> </ul> <p><pre><code>architecture rtl of test is \n    signal temp: std_logic_vector (0 to 1);\nbegin \n    temp &lt;= a &amp; b;\nend rtl;\n</code></pre> and </p> <pre><code>with temp select\n    f &lt;=  '1' when \"00\",\n    '0' when \"01\",\n    '-' when \"10\",\n    '1' when \"11\",\n    '-' when others;\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#4-implication-tables-6-to-3-priority-encoder","title":"4: Implication Tables: 6 to 3 priority encoder","text":"<ul> <li>An encoder accepts an active level on one of its inputs representing one digit and converts it to a coded output (binary).</li> </ul> <p>For example:</p> <pre><code>-- 6 to 3-bit priority encoder \nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n-- The encoder \nentity pro_enc is \n    port(a: in std_logic;\n         b: in std_logic;\n         c: in std_logic;\n         d: in std_logic;\n         e: in std_logic;\n         f: in std_logic;\n         f0: out std_logic;\n         f1: out std_logic;\n         f2: out std_logic;\n    );\nend pri_enc;\n</code></pre> <p>and the architecture:</p> <pre><code>architecture rtl of pri_enc is \n    signal enc_in: std_logic_vector(0 to 5);\n    signal enc_out: std_logic_vector (0 to 2);\nbegin \n    -- concatenation inputs into enc_in \n    enc_in &lt;= a &amp; b &amp; c &amp; d &amp; e &amp; f;\n\nWITH enc_in SELECT\n        enc_out &lt;= \"000\" WHEN \"000000\",\n        \"001\" WHEN \"000001\",\n        \"010\" WHEN \"00001-\",\n        \"011\" WHEN \"0001--\",\n        \"100\" WHEN \"001---\",\n        \"101\" WHEN \"01----\",\n        \"110\" WHEN \"1-----\",\n        \"---\" when others;\n\n    f0 &lt;= enc_out(0);\n    f1 &lt;= enc_out(1);\n    f2 &lt;= enc_out(2);\nEND rtl;\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#5-commonly-used-modules-multiplexer","title":"5: Commonly used modules: Multiplexer","text":"<ul> <li> <p>A multiplexer allows one of the input signals to be brought to the output.</p> </li> <li> <p>'s' for the select signal which is also a input.</p> </li> </ul> <p></p> <p><pre><code>entity mux is \n    port(\n        s:      in std_logic;\n        a,b:    in std_logic;\n        y:      out_std_logic;\n    );\nend mux;\n\narchitecture rtl of myx is \nbegin\n    y &lt;= a when s= '0' else \n        b when s='1' else\n        '-';\nend rtl;\n</code></pre> or </p> <pre><code>begin \n    with s select\n    y &lt;= a when s= '0'  \n    b      when s='1' \nend rtl;\n</code></pre> <ul> <li>For a more complicated multiplexer:</li> </ul> <p></p> <p>using \" with...select\" in the architecture:</p> <pre><code>begin \n    sel &lt;= s0 &amp; s1;\n\n    with sel select\n    y &lt;= a when \"00\",\n-- ...\n\nend rtl;\n</code></pre> <ul> <li>If the signal are 8-bit signals, the new entity for the multiplexer becomes:</li> </ul> <pre><code>entity mux_8bit is \n\nport(s0,s1:     in std_logic;\n        a, b, c, d: in std_logic_vector(0 to 7);\n        y:      out_std_logic_vector(0 to 7)\n\n    );\n\nend mux_8bit;\n</code></pre> <ul> <li>To specify a generic 4 to 1 multiplexer for signals of variable size, we can use the generic construct:</li> </ul> <pre><code>entity mux_Nbit is \n    generic (N: integer);\n    prot( sel:  in std_logic_vector (0 to 1);\n    a,b,c,d: in std_logic_vector (0 to N-1);\n    y:  out std_logic_vector(0 to N-1);\n    );\nend mux_Nbit;\n</code></pre> <ul> <li>The demultiplexer is the module that performs the duel function of the multiplexer.</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/vhdl/#6-commonly-used-modules-shifters","title":"6: Commonly used modules: Shifters","text":"<ul> <li>A shifter is an element that presents at the output the value of the input shifted by a certain number of bits:</li> </ul> <pre><code>entity shift_right is \n    port(\n        x: in std_logic_vector(0 to 3);\n        y: out std_logic_vector(0 to 3)\n    );\nend shift_right;\n\narchitecture rtl of shift_right is \n\nbegin \n    y &lt;= '0' &amp; x(0 to 2);\n\nend rtl;\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#v-structural-level-example-xor-gate","title":"V: Structural level Example: XOR gate","text":"<ul> <li>The structural level description focus on the connection of components.</li> </ul> <pre><code>library ieee;\nuse ieee.std_logic_1164.all;\n\nentity xor_gate is \n\nport( \n    A: in std_logic;\n    B: in std_logic;\n    C: out std_logic\n);\n\nend xor_gate;\n\narchitecture structural of xor_gate is \n\n    component and_gate \n        port (\n            A: in std_logic;\n            B: in std_logic;\n            C: out std_logic\n        );\n    end component;\n\n    component or_gate is \n        port (\n             A: in std_logic;\n            B: in std_logic;\n            C: out std_logic\n        );\n    end component;\n\n    component not_gate is \n        port(\n            A: in std_logic;\n            B: out std_logic\n        );\n    end component;\n\nsignal a1,a4,O1,O2: std_logic;\n\nbegin \n    not_1: not_gate\n        port map (A,a1);\n\n    not_2: not_gate \n        port map (B,a4);\n\n    and1: and_gate\n        port map (a1,B,O1);\n\n    and2: and_gate\n        port map (A,a4,O2);\n\n    or: or_gate\n        port map (O1,O2,C)\n\nend structural;\n</code></pre>"},{"location":"NOTES/Stage_2/vhdl/#vi-concept-of-process","title":"VI: Concept of Process","text":"<ul> <li> <p>The design of combinatorial and especially sequential logic can be based on the concept of process, which based on events.</p> </li> <li> <p>The process can be expressed as below:</p> </li> </ul> <p></p> <ul> <li>For example of a shift-register:</li> </ul> <p></p>"},{"location":"NOTES/Stage_2/vhdl/#1-sr-latch","title":"1: SR-Latch","text":""},{"location":"NOTES/Stage_2/vhdl/#2-d-flip-flops","title":"2: D-Flip-flops","text":""},{"location":"NOTES/Stage_2/vhdl/#3-shift-register","title":"3: shift-register","text":""},{"location":"NOTES/Stage_2/vhdl/#4-counter","title":"4: Counter","text":""},{"location":"NOTES/Stage_2/Reports/FM_Report/","title":"FM Report","text":"Frequency  Modulation and Frequency Shift Keying Lab Report"},{"location":"NOTES/Stage_2/Reports/FM_Report/#abstract","title":"Abstract","text":"<p>This experiment calculated the frequency conversion factor \\(\\alpha\\), generated and validated the frequency spectrum of narrow-band FM (NBFM) and wide-band frequency modulation (WBFM) with FM theory, verified the relationship of band-limit FM power and total power in final result. Carried out the frequency shift keying (FSK) and frequency demodulation with the plotted measurement graph of demodulated frequency response using both slope detector and ratio detector, which satisfied the theoretical properties.</p>"},{"location":"NOTES/Stage_2/Reports/FM_Report/#introduction","title":"Introduction","text":"<p>Frequency Modulation (FM) is one form of angle modulation, in which the frequency (angle) of the carrier wave is varied according to the base-band signal while the amplitude of carrier wave maintain constant[1].The main principle of this FM experiment is using the formula of linear voltage-frequency convertor to calculated frequency conversion factor \\(\\alpha\\): $$ \\alpha = \\frac{\\Delta f_{OUT}}{\\Delta V_{IN}}\\tag{1} $$ with the modulation index \\(\\beta\\) [2] calculated by: $$ \\beta = \\frac{\\Delta f}{f_m}\\tag{2} $$ then measuring the narrow-band FM, wide-band FM properties to validate the result.</p> <p>Frequency Shift Keying (FSK) is a special case of the construction of orthogonal signals, in which the messages are transmitted by signals that differ in frequency[3].</p> <p>One method to demodulate the FM signal is using slope-detector and ratio-detector, the properties can be verified by observing frequency response graphs. </p> <p>With these theories, this experiment mainly aimed at determining frequency conversion factor \\(\\alpha\\), using this value to verify the frequency spectrum of suppressed carrier FM, NBFM and WBFM, calculating and comparing the total power and band-limit power of FM, finally discovering the difference type of slope detector and ratio detector. To achieve the aims above, the tasks have been done as below:</p> <ul> <li> <p>Determine the \\(\\alpha\\) using equation (1).</p> </li> <li> <p>Calculate the \\(\\beta\\) using equation (1) and equation (2) when no carrier-component in frequency spectrum, then comparing the result with Bessel Function Table (Fig.1).</p> </li> <li> <p>Determine the max voltage of NBFM and the max voltage of WBFM (\\(\\beta = 10\\)), then find the bandwidth of both spectrum.</p> </li> <li> <p>Calculate the total power and band-limit power when \\(\\beta = 1\\).</p> </li> <li> <p>Plot and compare the frequency response of slope-detector and ratio-detector.</p> </li> </ul> <p> [4]Fig.1.Bessel Function Table</p>"},{"location":"NOTES/Stage_2/Reports/FM_Report/#procedure","title":"Procedure","text":"<ul> <li> <p>To calculate the \\(\\alpha\\), we set \\(V_1 = 0\\) for the initial condition and \\(V_2 = 1 V\\). According to the measurement on oscilloscope, record the \\(f_1\\) and \\(f_2\\) for two conditions respectively.</p> </li> <li> <p>Connect the AC signal output of 1 kHz, varying the \\(V_m\\) values, so that the number of the sidebands may change until the carrier component being suppressed, then record and compare the spectrum of signal.</p> </li> <li> <p>Narrow-band means there is only one pairs of sideband in spectrum[5]. Change the \\(V_m\\) until only have one pair of sideband, record the spectrum and modulation index \\(\\beta\\).</p> </li> <li> <p>Determine the value of \\(V_m\\) of WBFM with \\(\\beta =10\\) using equation (1) and equation (2), record the spectrum and bandwidth.</p> </li> <li> <p>Determine the total power using the formula:</p> </li> </ul> \\[ P_T = \\frac{V_{RMS}}{R_L}\\tag{3.1} $$ and determine the sideband voltage using: $$ P_{BL} = \\displaystyle\\frac{1}{R_L}\\sum_{n=-\\infty}^{\\infty}[V_{RMS}J_n(\\beta)]^2\\tag{3.2} \\] <ul> <li> <p>Add square wave to oscilloscope, using FFT generate and record the spectrum of FSK signal, then calculate the \\(\\Delta f\\) between two peaks.</p> </li> <li> <p>Connect the wave generator as input, vary the frequencies between 4.0 MHz to 6.0 MHz, record the response value of slope detector and ratio detector.</p> </li> </ul>"},{"location":"NOTES/Stage_2/Reports/FM_Report/#result-and-discussion","title":"Result and Discussion","text":"<p>In terms of the measurement, we record the values of \\(f_1\\) adn \\(f_2\\) using x-cursor, for the \\(V_1=0\\) and \\(V_2 = 1V\\) respectively in Fig.2. As the formula: $$ \\Delta f_{OUT} = f_2 -f_1\\tag{4.1}  $$ $$ \\Delta V_{IN} = V_2 - V_1\\tag{4.2} $$</p> <p> Fig.2. \\(f_1\\) and \\(f_2\\)</p> <p>In consequence, the \\(\\displaystyle\\alpha = \\frac{f_1-f_2}{V_2 -V_1}=7.3\\) kHz/V.</p> <p>When there is no sine wave connect, according to equation(1) and equation(2): $$ \\beta = \\frac{\\alpha V_m}{f_m}\\tag{5} $$ as \\(V_m = 0\\) of sine wave disconnected, \\(\\beta = 0\\), there is only one carrier component in spectrum as shown in Fig.3.</p> <p> Fig.3. Spectrum when \\(\\beta =0\\)</p> <p>Varying the max voltage (shown as \\(V_{pp}\\)) in oscilloscope, it is found that the carrier component suppressed when \\(V_{pp}=600\\) mV, i.e. \\(V_m = 300\\) mV shown in Fig.4. Using equation (5):  $$ \\beta = \\displaystyle\\frac{7.3 \\times 0.3}{1} = 2.19 \\quad V/kHz $$  Compared with Bessel Function Tables in Fig.1, the \\(\\beta\\) is close to \\(\\beta = 2\\), which have four pairs of sidebands, just as Fig.4 shown.</p> <p> Fig.4. Suppressed Carrier Spectrum </p> <p>Continue varying the max voltage until the signal is NBFM, it is noted the \\(V_{pp} = 60\\) mV (i.e. \\(V_m = 30\\) mV) in Fig.5. According to equation (5): $$ \\beta = \\displaystyle\\frac{7.3 \\times 0.03}{1} \\quad V/kHz $$  Compared to the Bessel Function Tables in Fig.1, \\(\\beta = 0.219\\) closes to \\(\\beta = 0.2\\), which has 1 pair of sideband, verify the experimental result of NBFM. </p> <p> Fig.5. NBFM Spectrum  Following the lab sheet, using the equation (5) to determine the \\(V_m\\) when \\(\\beta = 10\\): $$ V_m = \\frac{\\beta f_m}{\\alpha} = 1.37\\quad V $$ so \\(V_{pp} = 2.74\\) V. Change the voltage to 2.74 V, the spectrum of WBFM can be found using cursors in Fig.6, the bandwidth is 31.9 kHz. Check the Bessel Function Tables (Fig.1), when \\(\\beta =10\\), the signal have 14 pairs of sideband, which is the same as result in Fig.6.</p> <p> Fig.6. WBFM Spectrum </p> <p>The \\(P_T\\) is calculated by equation (3.1). Using the given value of \\(R_L =180 \\Omega\\) and \\(V_{RMS} = 1.05\\) V as measured: $$ P_T = \\frac{V_{RMS}^2}{R_L} = 6.125 \\quad mW $$</p> <p>Then change to the condition of \\(\\beta = 1\\), according to the equation (5), \\(V_m = 0.137\\) V (i.e.\\(V_{pp} = 0.274\\) V), we got the spectrum as Fig.7. Using formula (3.2), the \\(P_{BL}\\) can be expressed: $$ P_{BL} = \\displaystyle\\frac{1}{R_L}(V_1^2 + 2V_2 ^2 + 2V_3 ^2 + 2V_4 ^2) = 6.094 \\quad mW $$</p> <p>The \\(\\frac{P_{BL}}{P_T}\\times 100 = 99.49\\) %.</p> <p> Fig.7. \\(\\beta =1\\) Spectrum </p> <p>Setting the signal to square wave and then using FFT processing, the FSK spectrum and measurement of frequency between two peaks generated shown in Fig.8.</p> <p> Fig.8. FSK Spectrum </p> <p>Carrying out the frequency modulation experiment, the voltage-frequency relationship of slope-detector and ratio-detector being plotted in Fig 9.1 and Fig.9.2.</p> <p> Fig.9.1. Voltage-Frequency of Slope detector  Fig.9.2. Voltage-Frequency of ratio detector </p>"},{"location":"NOTES/Stage_2/Reports/FM_Report/#conclusion","title":"Conclusion","text":"<p>Using the oscilloscope to measure the spectrum of FSK, the frequencies between two peak can be read form Fig.8. The \\(\\Delta f_{pp}\\) is 40 kHz as the cursors shown.</p> <p>Varying the frequency between 4 MHz to 6 MHz, measuring the voltage in different frequency, we plot the voltage-frequency results of both slop detector (Fig.9.1) and ratio detector (Fig.9.2). The result validate that the slope detector only have limited linear range (4.5-4.6 MHz in Fig.9.1) to demodulate the FM signal, while ratio detector have a wide-range demodulation area.</p> <p>Following the results above, we verified the FM modulation theory, compared the real signal spectrum of suppressed FM, NBFM and WBFM with theoretical results in Bessel Function Tables (Fig.1). According to the values and graphs above, the sideband pairs explicitly followed the theory values, which validate the accuracy of FM theory. </p> <p>During the FM power calculation, the result of \\(P_T\\) and \\(P_{BL}\\) show the difference of band limited power and total power significantly, only a few of insignificant component being omitted in real condition, which follow the FM theory.</p> <p>In FSK experiment, the graph (Fig.8) shows the result of spectrum and the measurement of bandwidth.</p> <p>According to the frequency demodulation tests, the frequency response curves (Fig.9.1 and Fig.9.2) verify the properties of slope detector and ratio detector apparently: the slope detector have small range of demodulation, which suited to be used in NBFM; while ratio detector have a wide-range which can be used in WBFM.</p> <p>In conclusion, this experiment validate the theory above successfully.</p>"},{"location":"NOTES/Stage_2/Reports/FM_Report/#references","title":"References","text":"<p>[1]:S.S.Haykin, Communication Systems, New York: Wiley, 2010, pp. 102. </p> <p>[2]: S.S.Haykin, Communication Systems, New York: Wiley, 2010, pp. 110. </p> <p>[3]: Proakis, J.G. and Salehi, Digital Communications, Boston, MA: McGraw-Hill, 2007, pp. 110\u2013111. </p> <p>[4]: L.E.Frenzel, Principles of Electronic Communication Systems, New York, NY: McGraw-Hill, a business unit of The McGraw-Hill Companies, Inc, 2014, pp. 159. </p> <p>[5]:L.E.Frenzel, Principles of Electronic Communication Systems, New York, NY: McGraw-Hill, a business unit of The McGraw-Hill Companies, Inc., 2014, pp. 160.</p>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/","title":"cropsProduction","text":"Crops Production Optimization Analysis Ziyu Tian"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#introduction","title":"Introduction","text":"<p>To investigate the optimum time point to harvest the crops (or replanted the machine), which could make the average yield maximum during the crops production or machine working lifetime, we set the initial model to describe the Output - Age relationship shown in Fig.1.1.</p> <p></p> <p>Fig.1.1 Initial Modelling of Output - Age Relationship</p> <p>For this model, an initial period of zero output is to be followed by a gradually increase to max output, which is maintained for some time, before a period of decline. The target is to find the expression of the optimum value of age (time length 'L') to maximum the average output.</p>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#assumptions-and-simplifications","title":"Assumptions and Simplifications","text":"<p>To simplify the conditions, we assume that the crops or machines working normally without any interruption and the internal properties keep unchanged during the producing lifetime.</p> <p>As the graph shown in Fig.1.2, we use the maximum value of '1' refer to 100% output efficiency. From 0 to a is the zero region, a to b, c to d is treated as linear relationship for the purpose of simplification, and b to c is the flat region of the curve.</p> <p>We fix the value of d is 25 in this condition.</p> <p></p> <p>Fig.1.2 Simplified Model of Output - Age Relationship</p>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#first-stage-solutions","title":"First-stage Solutions","text":""},{"location":"NOTES/Stage_2/Reports/cropsProduction/#model-construction","title":"Model Construction","text":"<p>If we note the output in the Y-axis is y ($ y\\le 1$) and \\(L\\) stand for the length of the continuous production ages. The average yield \\(\\bar{Y}\\) can be expressed by the integration of output divided by the stopped age \\(L'\\):</p> \\[ \\bar{Y} = \\displaystyle\\frac{\\int _0 ^{L'}y{\\rm d}L}{L'}\\tag{1.1} \\] <p>After the simplification of the formula, we can get the expression below:</p> \\[ \\bar{Y} = - \\displaystyle\\frac{1}{2(d-c)}L + \\frac{d}{d-c} + \\frac{1}{L}[\\frac{1}{d-c}(\\frac{1}{2}c^2-dc)+ c - \\frac{a+b}{2}]\\tag{1.2} \\] <p>Using the formula 1.2 above, the optimum length \\(L'\\) can be found:</p> \\[ L' = \\sqrt{(d-c)(a+b-2c)+2cd-c^2}\\tag{2} \\]"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#testing-and-feedback","title":"Testing and Feedback","text":"<p>Now that we got the expression of the optimum length, we have done several simple test of this model with different values of a, b and c shown in Table.1:</p> <p> Table.1 Optimum Length, Output and Average_Y with different a,b,and c</p> <p>The values of the optimum length with the output and average_Y at the optimum points are about 0.6 to 0.7, which below the max output 100% we assumed previously.</p>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#parameters-analysis","title":"Parameters Analysis","text":"<p>As we assumed before, the parameter d is fixed to 25, so we researched the influence to the optimum length of a, b and c independently by fixing two parameters and changing the other one:</p> Table.2 Spreadsheet when changing a, b or c and fixing the other two parameters <p>To show the different increasing ot decreasing influence trend of different parameters, the scatter-point graph of the Table.2 can be plotted:</p> <p> Figure.2 Scatter-point graph for different a, b, c</p> <p>According to the results shown in Figure.2, when we changing one of the parameters and fixing the others, parameter a and b have a linear-like relation with the optimum length with a small positive gradient, while the increasing of parameter c have a larger positive gradient than a and b.</p> <p>In conclusion, the parameter c have a larger effect on the value of optimum length, which is more critical than others.</p>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#model-application","title":"Model Application","text":""},{"location":"NOTES/Stage_2/Reports/cropsProduction/#practical-conclusions","title":"Practical Conclusions","text":"<p>For the application of the model we proposed above, there are several key-points need to be considered before the real-world deployment.</p> <ul> <li> <p>The first perquisite of applying this model is collecting related data of the crops/machine production output in previous years. It is essential to find the value of parameter a, b, and c.</p> </li> <li> <p>According to the result shown in Figure.2, the parameter c have more influence on the optimum length L', so the estimation of c, which is the beginning of the output declining, is extremely important in the application.</p> </li> <li> <p>The second step of the application is choosing the calculated value of optimum stopped using the Formula.2. Due to the calculated result, the client or manager is suggested to harvest or replant the crops (machines) at the optimum length to have the most efficient average yield.</p> </li> </ul>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#assumptions-and-simplifications-reconsideration","title":"Assumptions and Simplifications Reconsideration","text":"<ul> <li> <p>During the assumption and simplification stage, we assumed that the internal properties and continuous condition remain constant during the whole production process.</p> </li> <li> <p>If the real process situation does not fit the assumption and simplification, the conclusion of optimum length may be effected. For example, if there is any interruption during the production process, the output-age curve would not be the shape assumed in Figure 1.1 and Figure 1.2, so that the result may not correct.</p> </li> <li> <p>In another aspect, the quantity of the researching target also have an effect on the final conclusion:</p> <ul> <li>For a single unit or a small number of units, the output can be correctly described using the formula above.</li> <li>For a large area or large numbers of unit, the accuracy of this model might be affected as the different machine may have different parameter a, b and c so that different optimum length.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#second-modelling-using-different-curves","title":"Second modelling using different curves","text":"<p>To try different fitting the final stage of the curve, we changed the curve between c and d as a quadratic function:</p> \\[ y(L) = \\displaystyle - \\frac{1}{(d-c)^2}(L^2 - 2cL + 2cd -d^2)\\tag{3} \\] <p>The whole model will be like Figure.3:</p> <p></p> <p>Figure.3 Another fitting model with quadratic function</p> <p>As the analytic solution of optimum length is too complicated to solve, we got the numerical solution using MATLAB:</p> <p> Figure.4.1 Numerical Solution in MATLAB</p> <p>Using the subs() function in MATLAB, the zero points of \\(\\bar{Y'}\\) can be expressed as:</p> <p> Figure.4.2 Zero points of \\(\\bar{Y'}\\)in MATLAB</p> <p>However, due to the properties of \\(\\bar{Y}\\) and the various position of \\(a, b, c\\), the optimum choice of \\(L\\) to maximize \\(\\bar{Y}\\) is too complicated to find using the given information.</p> <p>In conclusion, the client or manager is suggested to collect data of \\(a,b,c\\) carefully, so that this model can lead to a more accurate solution of \\(L\\).</p>"},{"location":"NOTES/Stage_2/Reports/cropsProduction/#final-conclusion-and-application-advice","title":"Final Conclusion and Application advice","text":"<ul> <li>According to the solutions above, we can find that different model would lead to different choice of the optimum length:<ul> <li>For the first model using linear shown in formula.2, the key-point of the application is to define the parameter a, b especially c, which affects the \\(L'\\) most. The client is suggested to choose the stopped ages as \\(L'\\) calculated above.</li> <li>For the second model, the formula above shown the optimum length is too complicated to solve using limited data of \\(a,b,c\\). So that it is suggested to collect more data.</li> </ul> </li> <li> <p>The holistic conclusion above is based on the limited condition shown in the content under title 'Assumptions and Simplifications'. To make the model work more accurately, the following advice could be applied in real conditions</p> <ul> <li>For large quantity of targets (crops area or machine quantity), some type of the crops or machines may not suitable to this single formula. For further work, it is suggested to classify the type of different targets, and construct different model for each types.</li> <li>For the continuity of the production, it is advised that another model with interruption is needed in further research to improve the efficiency of the model.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_2/Reports/multiplierReport/","title":"multiplierReport","text":"4-bits Multiplier Design based on VHDL  Ziyu Tian"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#1-parallel-multiplier","title":"1: Parallel Multiplier","text":"<p>The full codes of parallel multiplier could be viewed on https://edaplayground.com/x/KWM6.</p>"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#11-design-process","title":"1.1: Design process","text":"<p>At the RTL level design, I designed the components AND gate and XOR gate, and constructed AND and XOR component to a half-adder in structural level. Using the half-adder, the full_adder can be built shown as Fig.1.</p> <p> Fig.1 HA and FA design</p> <p>If we assumed the multiplier and multiplicand expressed as Fig.2, the carry-save parallel multiplier structure is designed as Fig.3:</p> <p> Fig.2 Assumed Expression of multiplier and multiplicand</p> <p> Fig.3 Parallel Multiplier Structure</p>"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#12-testbench-design-process","title":"1.2: Testbench design process","text":"<ul> <li> <p>In the parallelM_tb.vhd file, I tested the product of 0110 x 1100, 0010 x 0001, 0111 x 0101, 0100 x 1101, 1010 x 1110 and 1011 x 1011 with the delay of 100 ns.</p> </li> <li> <p>The result proved that the parallel multiplier worked properly.</p> </li> </ul>"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#2-serial-multiplier","title":"2: Serial Multiplier","text":""},{"location":"NOTES/Stage_2/Reports/multiplierReport/#21-design-process","title":"2.1: Design process","text":"<p>The full codes of parallel multiplier could be viewed on https://edaplayground.com/x/JawR</p> <p> Fig.4.1. Serial Multiplier Structure</p> <p>To design a 4-bits serial multiplier shown as Fig.4.1, the full-structure should be:</p> <ul> <li>Reg_1: the entity of the multiplier R register (Fig.4.2). CLK can be used to generate the clock signal and LOAD is used to loading (initialize) the multiplier value. r_1 is the 4-bits input with one output to pass the value that been shifted.</li> </ul> <p> Fig.4.2. Reg_1</p> <ul> <li>singleMultiplier: the entity doing 1 bit x 4 bits multiplication. m1X receive one bit input of r and the multiplicand D is received by m1Y. The output is the result of the multiplication.</li> </ul> <p> Fig.4.3. singleMultiplier</p> <ul> <li>Adder4 : the 4-bits adder composed of 4 full_adders, accept two 4-bits number and output the sum.</li> </ul> <p> Fig.4.4. 4-bits adder</p> <ul> <li>Reg_2: receive a CLK signal to control the sequence, a CLR signal to clear the initial signal to '0000'. The output is a 8-bits number, which is the final result.</li> </ul> <p> Fig.4.5. Reg_2</p> <p>Using the components above, the full structure is shown below:</p> <p> Fig.4.6. Full structure of Serial Multiplier</p>"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#22-testbench-design-process","title":"2.2: Testbench design process","text":"<ul> <li> <p>In the file serialM_tb.vhd file, I tested the input of 1111 x 1111, 1001 x 1101, 1100 x 1110 in 5 x 3 clk_cycles. </p> </li> <li> <p>In the first cycle, the START signal would be '1' to load and reset the register, in the next 4 cycles, START signal falls to '0' and the calculation happens at the rise-edge of CLK.</p> </li> </ul>"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#3-delay-comparison-of-parallel-and-serial-multiplier","title":"3: Delay Comparison of parallel and serial multiplier","text":""},{"location":"NOTES/Stage_2/Reports/multiplierReport/#30-delay-of-the-ha-and-fa","title":"3.0: Delay of the HA and FA","text":"<ul> <li>In HA, delay from A/B to C is 1 \\(\\tau\\).</li> <li>In FA, delay from A/B to C is 3 \\(\\tau\\).</li> </ul>"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#31-parallel-multiplier-delay","title":"3.1: Parallel Multiplier Delay","text":"<p>For parallel multiplier, the value of \\(d_nr_n\\) need one \\(\\tau\\) AND gate to get result at the same time.</p> <p>The first line in Fig.3 using HA and cables, so the maximum delay from A/B to P1 is 1 \\(\\tau\\). To form P2 and P3, several parallel FAs are applied, so the delay is 3 \\(\\tau\\) for each level.</p> <p>The final level of parallel multiplier is a ripple-carry adder with one HA, 2 FA and one cable, so the delay is 2 x 3 \\(\\tau\\) for each FA and 1 \\(\\tau\\) for one HA. There is no delay for cables.</p> <p>Finally, the delay from D/R to the result would be:</p> \\[ \\tau_{total} = (1+1+3+3+1+3+3)\\tau = 15\\tau \\]"},{"location":"NOTES/Stage_2/Reports/multiplierReport/#32-serial-multiplier","title":"3.2: Serial Multiplier","text":"<p>For serial multiplier, the full calculation need 1 clk_cycle to initialize value (without delay) and 4 clk_cycle to do the 4 partial_product calculation.</p> <p>For each calculation clk_cycle, a 1x4 bits multiplier need one AND gate to form the answer in Fig.4.3, with the delay of 1 \\(\\tau\\). To do the 4 bits adding calculation using entity Adder4 shown in Fig.4.4, which is composed of 4 full_adders using ripple carry adder. Its delay from input to output is 4 x 3\\(\\tau\\). So the total delay of one calculation cycle is 13 \\(\\tau\\).</p> <p>The 4x4 bits multiplier have 4 calculation cycle, so the total delay to form the output is:</p> \\[ \\tau_{total} = 13 \\times 4 \\tau = 52 \\tau \\]"},{"location":"NOTES/Stage_3/DSP_Report/","title":"DSP Report","text":"EEE3030 Digital Signal Processing Report  Ziyu Tian"},{"location":"NOTES/Stage_3/DSP_Report/#i-introduction","title":"I: Introduction","text":"<p> <p>This assignment aims at building a AM demodulator system shown in Fig.1, which should be implemented based on appropriate digital filter codes in MATLAB. The designed AM demodulator would be implemented on the given .wav soundtrack to extract the contained message finally. In the following report, I would demonstrate the detailed solution for the five given tasks separately combined with necessary MATLAB codes. </p> <p> Fig.1. AM Demodulator System Block Diagram </p>"},{"location":"NOTES/Stage_3/DSP_Report/#ii-task-1-original-am-analysis","title":"II: Task-1: Original AM Analysis","text":"<p>  Using the audioread() function in MATLAB, the .wav file could be read into the demodulation system with the sampling rate 'F_s' and amplitude array 'y'. Combined with the time-axis array and the length() function, the AM signal in time domain could be plotted in Fig.2 by following MATLAB codes: <pre><code>% Read wav file\nfilename = 'Ziyu Tian.wav';\n[y, Fs] = audioread(filename);\n\n% Calculate soundtrack duation time\nduration = length(y) / Fs;\n\n% Time Domain\ntime = linspace(0, duration, length(y));\nfigure;\nplot(time, y);\ntitle('Time Domain');\nxlabel('Time (s)');\nylabel('Amplitude');\n</code></pre> <p> Fig.2. AM signal in time domain </p> <p>According to the soundtrack in Fig.2, the total length of the .wav file is 2.27 seconds with obvious noises . </p> <p>To show the original AM signal in frequency domain, a Fast Fourier Transform operation is needed to complete the conversion. As the sampling frequency is 96 kHz and the sound length is 2.27 s, the total samples should be calculated as:</p> \\[ n = F_s . t = 2.27\\times96000 = 217920 \\] <p>The number 217900 is close to the result calculated by MATLAB length(), which is 217992. The sampling number n could be used as the Number of FFT directly, however, for the purpose of improving FFT efficiency, we normally choose the closet power of 2 to the total samples number. Applied with the nextpow2() function, the appropriate Number of FFT N could be found as 262144 by the codes below:</p> <pre><code>% Frequency Domain\nn = length(y); % Use length of sound as FFT points, which meet the requirement of frequency resolution\nN = pow2(nextpow2(n));\n</code></pre> <p>In this condition, the Frequency of Resolution could be calculated as:</p> \\[ FR = \\displaystyle\\frac{F_s}{N} = \\displaystyle\\frac{96000}{262144} = 0.367 \\] <p>The size of window in this case would be calculated as 6.20 s, which would result in FFT spectral leakage. To reduce this problem, a Hamming Window is chosen to applied before the FFT operation. In addition, due to the extra sampling points in FFT compared to original AM signal, the zero-padding operation is necessary. The following codes shown the window-adding and FFT process:</p> <pre><code>frequencies = linspace(0, Fs, N);\nfrequencies = frequencies / 1000; % Change unit to kHz\ny_padded = [y; zeros(N - n, 1)];  % Zero-padding to match N\nY = fft(y_padded); % FFT\n% Hamming Windows applied \nwindow = hamming(N);\nY_windowed = fft(y_padded .* window);\n</code></pre> <p>For the purpose of normalization and scaling, I normalized the signal amplitude with the chosen Number of FFT and converted it into decibel expression before plotting:</p> <pre><code>% Amplitude Normalization \namplitude = abs(Y)/N; \n\n% Amplotude Scaling to dB\namplitude_dB = 20 * log10(amplitude); \n\n% According to Nyquist Limit, a half frequencies are enough\nplot(frequencies(1:N/2), amplitude_dB(1:N/2),'b'); \nhold on;\namplitude_windowed = abs(Y_windowed) / N;\namplitude_windowed_dB = 20 * log10(amplitude_windowed);\nplot(frequencies(1:N/2), amplitude_windowed_dB(1:N/2),'r');\ntitle('Frequency Domain');\nxlabel('Frequency(kHz)');\nylabel('Amplitude (dB)');\nlegend('Original Signal', 'Hamming Processed Signal');\n</code></pre> <p>To compare the difference between original signal and Hamming Windowed signal, I plotted the both signal together as shown in Fig.3:</p> <p> Fig.3. Comparison between Original Signal and Windowed Signal in frequency domain </p> <p>From the spectrum shown in Fig.3, the Hamming Window reduced the spectral leakage effectively. From the windowed graph, it is also clear to find the Carrier Signal in the middle with the highest amplitude, which is 20 kHz. The upper and lower sideband could be found at both sides of the Carrier Signal, with the frequency of 20.42 kHz and 19.57 kHz respectively.</p> <p></p>"},{"location":"NOTES/Stage_3/DSP_Report/#iii-task-2-band-passs-iir-design","title":"III: Task-2: Band-passs IIR Design","text":"<p> <p>In this task, a IIR band-pass would be designed to remove the noises out of \\(f_c + B\\) to \\(f_c -B\\). In this case with \\(fc = 20\\) kHz and \\(B = 4\\) kHz, the range of the band-pass filter should be 16 kHz to 24 kHz. With the normalized cut-off frequencies, the coefficients of a Butterworth band-pass filter could be generated with the following instructions:</p> <pre><code>fs = 96000; % sampling frequency \nfp1 = 16000; % lower cutting frequency \nfp2 = 24000; % upper cutting frequency \n[b,a] = butter(2,[fp1,fp2]/(fs/2),'bandpass');  % Butterworth IIR Bandpass \n</code></pre> <p>According to the principle of IIR filter, a second order transfer function in z-domain could be expressed as:</p> \\[ H(z) = \\displaystyle\\frac{\\Sigma^N_{k=0}b_k.z^{-k}}{1+\\Sigma^M_{k=1}a_k.z^{-k}} = \\frac{b_0 + b_1z^{-1} + b_2z^{-2} + b_3z^{-3} + b_4z^{-4}}{a_0+a_1z^{-1}+a_2z^{-2}+a_3z^{-3}+a_4z^{-4}} \\] <p>The MATLAB codes above could generate the coefficient \\(b_0\\) to \\(b_4\\) and \\(a_0\\) to \\(a_4\\), which are stored in the array b and a.</p> <p>To implement the filter in more generalized method, we should convert the z-domain expression of the Filter Transfer Function \\(H(z)\\) into difference equation form with the same coefficients:</p> \\[ y[n] = \\displaystyle\\Sigma^N_{k=0}{b_k.x[n-k]}-\\displaystyle\\Sigma^M_{k=1}{a_k.y[n-k]} \\] <p>The low-level codes of the IIR design with difference equation could be expressed as below:</p> <p><pre><code>x = randn(1, 262144) * sqrt(512); % Generate a Random Noises with same sampling points of AM signal (N = 262144)\nx = x .* window';\n\nOrder = 4; % The highest order of the z-domain Transfer Function\ndelay_x = zeros(Order+1,1);      % Create Delay Array for x and intialize with zeros (input)\ndelay_y = zeros(Order,1);        % Create Delay Array for x and intialize with zeros (output)\n\nfor i=1:length(x)\n    for n=Order+1:-1:2          \n        delay_x(n) = delay_x(n-1);      % Right-shift the delay_x Array \n    end\n    delay_x(1) = x(i);              % Input each sample from signal x to the beginning of delay_x\n\n    Accumulator = 0;                    % Clear the Accumulator until the end of x-signal\n    for n=1:Order+1                     % Calculate the result from input x                     \n        Accumulator = Accumulator + b(n)*delay_x(n);    % + b(n)*x(i-n)\n    end\n\n    for n=2:Order+1                       % Calculate the result from output y                    \n        Accumulator = Accumulator - a(n)*delay_y(n-1);    % -a(n)*y(i-n-1)\n    end\n    BP_IIR(i) = Accumulator;        % Store the output data of this sample x(i)\n    for n=Order:-1:2          \n        delay_y(n) = delay_y(n-1);      % Right-shift the delay_y Array \n    end\n    delay_y(1) = Accumulator;           % Input each sample from signal x to the begining of delay_x\nend\n\nfigure(1);\npspectrum(BP_IIR,fs) % Plotting filtered signal\nhold on;\npspectrum(x,fs)  % Plotting Original Signal\nlegend('After IIR Bandpass','Orignial');\ntitle('IIR BP Frequency response');\n</code></pre> Based on the IIR codes above, I implemented the IIR difference equation with nested for-loop. To test the frequency response of the design, a random noise x with same sampling numbers (N = 262144) of the AM signal was generated as the input of IIR filter. The result is shown in Fig.4. </p> <p> Fig.4. Testing Frequency Response of IIR BP Filter</p> <p>In Fig.4, the IIR filter removes most of the out-of-band signal while keeps the signal between 16 kHz to 24 kHz. The testing frequency response is aligned with the designing expectation successfully.</p> <p>Followed by the frequency response testing with random signal, I implemented the same IIR filter on the target AM signal, which is shown in Fig.5 below:</p> <p> Fig.5. AM signal Frequency Response After IIR BP Filter</p> <p>Fig.6 shown the comparison between original signal (after windowed) and BP filtered signal. The self-designed IIR BP significantly removed much of the noises in original signal.</p> <p> Fig.6. AM signal After IIR BP Filter in Time Domain</p> <p></p>"},{"location":"NOTES/Stage_3/DSP_Report/#iv-task-3-siginal-mixing","title":"IV: Task-3: Siginal Mixing","text":"<p> <p>After the IIR band-pass filtering, the AM signal needs to be mixed with a local oscillator signal. As the Carrier Frequency is 20 kHz, the local oscillator frequency should be same. The mixing and plotting could be implemented with the codes below:</p> <pre><code>lo_frequency = 20000;  % Local oscillitor Frequency (same as Carrier Frequency, 20 kHz from previous analysis)\nlo_signal1 = cos(2 * pi * lo_frequency * t)'; % Real Part of the AM signal\nlo_signal2 = sin(2 * pi * lo_frequency * t)'; % Imaginary Part of the AM signal\nmixed_signal = BP_IIR .* lo_signal1'; % Signal Mixing \nmixed_signal2 = BP_IIR.* lo_signal2';\n\nfigure(1);\nsubplot(2,1,1);\npspectrum(mixed_signal,fs);\ntitle('Real-Part After Mixing in Frequency Domain');\nxlabel('Time (s)');\nylabel('Amplitude');\nsubplot(2,1,2);\npspectrum(mixed_signal2,fs);\ntitle('Imaginary-Part After Mixing in Frequency Domain');\nxlabel('Time (s)');\nylabel('Amplitude');\n\nfigure(2);\nsubplot(2,1,1);\nplot(t,mixed_signal);\ntitle('Real-Part After Mixing in Time Domain');\nxlabel('Time (s)');\nylabel('Amplitude');\nsubplot(2,1,2);\nplot(t,mixed_signal2);\ntitle('Imaginary-Part After Mixing in Time Domain');\nxlabel('Time (s)');\nylabel('Amplitude');\n</code></pre> <p>Fig.7.1 and Fig.7.2 shown the result of mixed signals in time domain and frequency domain. In time domain, the features of both signal of Real Part and Imaginary Part are not obvious. In frequency domain, the original AM signals are separated into two significant frequency lobes: one higher lobe with the frequency of almost \\(2f_c\\), another lower lobe with the frequency less than 4 kHz. According to the principle of AM demodulation, the lower frequency lobe should be the target signal, which could be extracted with a Low-pass filter in next step.</p> <p> Fig.7.1. Mixed Signal in Time Domain</p> <p> Fig.7.2. Mixed Signal in Frequency Domain</p> <p></p>"},{"location":"NOTES/Stage_3/DSP_Report/#v-task-4-low-pass-fir-design","title":"V: Task-4: Low-pass FIR Design","text":"<p> <p>According to the task requirements, a single stage FIR would be designed with the Pass-band Ripple less than 0.1 dB and Stop-band Attenuation larger than 60 dB. Following the Window Function Properties Table in Fig.8, only Blackman Function is appropriate to be applied in this design.</p> <p> Fig.8. Window Function Properties Table</p> <p>To design the single-stage FIR Low-pass filter, the FIR taps N should be defined at first. Applied with the requirements of 1 kHz transition width and Blackman Window, the normalized transition width and FIR taps could be calculate as:</p> \\[ \\Delta F = \\displaystyle\\frac{1000}{96000} \\approx 0.010417 \\] \\[ N_{Blackman}  = \\displaystyle\\frac{5.5}{\\Delta F} = \\frac{5.5}{0.010417} \\approx 529 \\] <p>With the FIR parameters above, the following codes could be implemented to testing the frequency response:</p> <p><pre><code>Fc = 4000/(Fs); % Normalized cutting frequency \nm = 264; % (N1-1)/2\nN1 = 2*m+1; % N1 = 5.5 / (1000/96000) = 528 (529)\n\ntic;\nh_single_stage = zeros(1, 2*m + 1); % Intialize the FIR array with zeros\nfor n = 1:m\n    h_single_stage(n) = 2 * Fc * sin(n * 2 * pi * Fc ) / (n * 2 * pi * Fc); \n    % Truncate the Low-pass Impluse Response Fucntion with m coefficients (first half of the FIR array)\nend\n\nh_single_stage = [fliplr(h_single_stage(1:m)) 2*Fc h_single_stage(1:m)];\n% Construct the fliped another half, the 2Fc component in the middle and the original half of FIR Coefficients Array\ntoc;\n\nw = blackman(N1)'; % Applying the suitable window function \nh_single_stage = h_single_stage.*w;\n\n% Single stage convolution \n%x =mixed_signal;\nx = randn(1, 262144) * sqrt(512); % Generate a Random Noises with same sampling points of AM signal (N = 262144)\n\ny_single_stage = zeros(size(x));\nfor i = 1:length(x)\n    for j = 1:length(h_single_stage)\n        if i - j + 1 &gt; 0\n            y_single_stage(i) = y_single_stage(i) + x(i - j + 1) * h_single_stage(j); % Convolution of h_FIR() and x()\n        end\n    end\nend\n\nfigure(1); \npspectrum(x,Fs);\nhold on;\npspectrum(y_single_stage,Fs);\ntitle('Testing Frequency Response of FIR LP');\nlegend('Before Filtered','After Filtered');\n</code></pre> The result of the single-stage FIR frequency response with a random noises shown in Fig.9. The FIR LP successfully removed most of the signal larger than 4 kHz.</p> <p> Fig.9.Testing Frequency Response of Single stage FIR LP</p> <p>After the testing in random noises, I applied the same FIR on the mixed signal from previous step. Fig.10 shown the filtered result of FIR LP in frequency domain. The FIR low-pass filter removed the signal larger than 4 kHz as we expected, which have a stop band at around 5 kHz.</p> <p> Fig.10.Frequency Response of Single stage FIR LP applied on Mixed Signal</p> <p>The time-domain analysis shown in Fig.11 also presents the obviously removing effect of the FIR Low-pass filter compared to the original mixed signals in both Real part and Imaginary part.</p> <p> Fig.11.Time Domain of Single stage FIR LP applied on Mixed Signal</p> <p>During the designing process of the single-stage FIR Low-pass filter, without any decimation of sampling frequency, the computational load could be calculated as:</p> \\[ Load = N\\times F_s = 264 \\times 96000 = 25.3 M\\quad Mac/s \\] <p>Using the timing function, the total execution time of the FIR truncation Loop and FIR Convolution Loop is 0.839893 s. For the purpose of saving computational load and execution time, a multi-stage FIR low-pass filter would be designed with the decimation factors. In the following codes, it demonstrates a FIR filter with two stages. The first stage low-pass filter designed with \\(f_c = 4\\) kHz and transition width \\(w = 5\\) kHz. To reduce the computation load, a decimation factor of 2 is chosen, so that the sampling frequency of first stage FIR would be \\(F_s/2 = 48\\) kHz. The FIR taps \\(N_1\\) could be calculated as:</p> \\[ N_1 = \\displaystyle\\frac{5.5}{5/48} \\approx 53 \\] <p>In the second-stage FIR, the cutting frequency is same as the first stage (i.e.4 kHz), and the transition width \\(w\\) is set to 1 kHz due to the task requirements. In this step, I applied the decimation factor 2 again at the result signal from the first-stage, so the total decimation factor would be 4. Thus the second-stage FIR sampling frequency would be \\(F_s/4 = 24\\) kHz. With the calculation above, the FIR taps \\(N_2\\) could be generated as:</p> \\[ N_2 = \\displaystyle\\frac{5.5}{1/24} \\approx 133 \\] <p>Applying the calculation results above, the codes of the two-stage IIR could be implemented as below:</p> <p><pre><code>% Single Stage FIR\nFc = 4000/(Fs/2); % transition width = 4 to 9 (5kHz), decimation factor = 2\nm = 26; \nN1 = 2*m+1;\ntic; %Execution Timing Start\nh_single_stage = zeros(1, 2*m + 1);\nfor n = 1:m\n    h_single_stage(n) = 2 * Fc * sin(n * 2 * pi * Fc ) / (n * 2 * pi * Fc);\n    % Impulse Response Function for LP Filter\nend\n\nh_single_stage = [fliplr(h_single_stage(1:m)) 2 * Fc h_single_stage(1:m)];\n% Construct the fliped another half, the 2Fc component in the middle and the original half of FIR Coefficients Array\n\nw = blackman(N1)';% Applying the suitable window function \nh_single_stage = h_single_stage.*w;\n\n% Single stage convolution \nx =mixed_signal;\n\ny_single_stage = zeros(size(x));\nfor i = 1:length(x)\n    for j = 1:length(h_single_stage)\n        if i - j + 1 &gt; 0\n            y_single_stage(i) = y_single_stage(i) + x(i - j + 1) * h_single_stage(j);\n            % Convolution of h_FIR() and x()\n        end\n        end\n    end\nend\n\n% Second Stage FIR\nm2 = 66; % transition width = 4 to 5 (1kHz), decimation factor = 4\nN2 = 2*m2+1;\nFc = 4000/(Fs/4);\n\nh_two_stage = zeros(1, 2*m2 + 1);\nfor n = 1:m2\n    h_two_stage(n) = 2 * Fc * sin(n * 2 * pi * Fc ) / (n * 2 * pi * Fc);\nend\n\nh_two_stage = [fliplr(h_two_stage(1:m2)) 2 * Fc h_two_stage(1:m2)];\n\nw = blackman(N2)';\nh_two_stage = h_two_stage.*w;\n\n% Second Stage Convolution \nx = y_single_stage;\n% Convolution of single_stage and second_stage\ny_two_stage = zeros(size(x));\nfor i = 1:length(x)\n    for j = 1:length(h_two_stage)\n        if i - j + 1 &gt; 0\n            y_two_stage(i) = y_two_stage(i) + x(i - j + 1) * h_two_stage(j);\n        end\n    end\nend\ntoc; %Execution Timing Ending\n</code></pre> With the application of the two-stage FIR, the result of the processed mixed signals are plotted in Fig.12 and Fig.13. The noises signals out of 4 kHz are removed as expectations, which have the stop-band of  at 5 kHz approximately. </p> <p> Fig.12.Frequency Domain of Two-stage FIR LP applied on Mixed Signal</p> <p> Fig.13.Time Domain of Two-stage FIR LP applied on Mixed Signal</p> <p>During the designing process of the Two-stage FIR Low-pass filter, considering the decimation during the sampling steps, the total computation load could be calculated as:</p> \\[ \\begin{aligned}    Load_2 &amp;= N_1\\times F_{s1} +  N_2\\times F_{s2} \\\\    &amp;= 53 \\times 48000 + 133 \\times 24000 \\\\     &amp;= 5.736M \\quad Mac/s \\end{aligned} \\] <p>The measured execution time of FIR sampling and convolution for the Two-stage FIR is 0.274657s. Compared with the Single-stage FIR with 0.839893 s execution time and computation load of 25.3M Mac/s, the speed of the Two-stage IIR is almost 3 times faster. And the computation load would have 4 times saving. In conclusion, the two-stage IIR would have better efficiency and performance.</p>"},{"location":"NOTES/Stage_3/DSP_Report/#vi-task-5-dc-removing","title":"VI: Task-5: DC Removing","text":"<p> <p>After the low-pass filtering for the AM signals, a total magnitude of the AM signal should be calculated as a combination of Real Part and Imaginary Part:</p> \\[ Magnitude = \\displaystyle\\sqrt{Re^2 + Im^2} \\] <p>The calculation could be executed by the following codes:</p> <pre><code>magnitude_demodulated_signal = sqrt(y_two_stage.^2 + y_two_stage2.^2); \n%y_two_stage is the Re part signal while y_two_stage2 is the Im Part signal\n</code></pre> <p>Due to the principle of AM modulation, the extra DC components should be filtered as the last step of demodulation. In this case, a IIR High-pass filter would be designed to remove the DC component. As the DC components would be close to y-axis in frequency domain, a small cutting frequency should be enough to remove most of the DC signal. In this IIR design, I choose \\(f_c = 20\\) Hz. Applied with the same methods as the previous IIR band-pass filter, the high-pass IIR codes could be constructed as below:</p> <pre><code>fc1 = 20;\n[b1,a1] = butter(2,fc/(fs/2),'high');   % Butterworth IIR High-pass \n\nx = magnitude_demodulated_signal; \n\nOrder = 4;\ndelay_x = zeros(Order+1,1);      % Create Delay Array for x and intialize with zeros (input)\ndelay_y = zeros(Order,1);        % Create Delay Array for x and intialize with zeros (output)\n\nfor i=1:length(x)\n    for n=Order+1:-1:2          \n        delay_x(n) = delay_x(n-1);      % Right-shift the delay_x Array \n    end\n    delay_x(1) = x(i);              % Input each sample from signal x to the begining of delay_x\n\n    Accumulator = 0;                    % Clear the Accumulator until the end of x-signal\n    for n=1:Order+1                     % Calculate the result from input x                     \n        Accumulator = Accumulator + b(n)*delay_x(n);    % + b(n)*x(i-n)\n    end\n\n    for n=2:Order+1                       % Calculate the result from output y                    \n        Accumulator = Accumulator - a(n)*delay_y(n-1);    % -a(n)*y(i-n-1)\n    end\n    HP_IIR(i) = Accumulator;        % Store the output data of this sample x(i)\n    for n=Order:-1:2          \n        delay_y(n) = delay_y(n-1);      % Right-shift the delay_y Array \n    end\n    delay_y(1) = Accumulator;\nend\n</code></pre> <p>Applied with the IIR high-pass filter, the AM signal should be totally demodulated. Fig.14 shown the final demodulated signal in time and frequency domain. There is no DC component left at 0 Hz in the final result.</p> <p> Fig.14.Final Demodulated Signal in Time and Frequency Domain</p> <p>Using the sound() function, the three letter message could be demodulated as 'Y','J' and 'V'.</p> <p></p>"},{"location":"NOTES/Stage_3/Digital_Signal_Process/","title":"Digital Signal Processing","text":""},{"location":"NOTES/Stage_3/Digital_Signal_Process/#1-fourier-transform-revision","title":"1: Fourier Transform Revision","text":""},{"location":"NOTES/Stage_3/Digital_Signal_Process/#2-common-fourier-transform","title":"2: Common Fourier Transform","text":""},{"location":"NOTES/Stage_3/Digital_Signal_Process/#3-convolution","title":"3: Convolution","text":"<ul> <li>Multiplication in time domain = Convolution in freq. domain and vice versa.</li> </ul> <p>Details of Convolution</p>"},{"location":"NOTES/Stage_3/Digital_Signal_Process/#4-sampling-periodic-signals","title":"4: Sampling periodic signals","text":""},{"location":"NOTES/Stage_3/EEE3026/","title":"EEE3026","text":"Electronic Devices for Smartphones Report  Ziyu Tian"},{"location":"NOTES/Stage_3/EEE3026/#i-abstract","title":"I: Abstract","text":"<p> <p>This report presents a comprehensive analysis of electronic devices crucial to the functionality of smartphones, including MOSFET, CMOS, LED/OLED display, and RAM/FLASH memory. Each section explores the basic principles, equation derivations, and the influence of various semiconductor parameters and technologies. Based on the principle,the report highlights the interplay of these devices and their impact on smartphone performance. Notable contents include the application of MOSFET equivalent scaling methods, demonstrating the evolving landscape of modern transistors. The report concludes with insights into the future outlook for electronic devices in the context of smartphone technology.</p> <p></p>"},{"location":"NOTES/Stage_3/EEE3026/#ii-introduction","title":"II: Introduction","text":"<p> <p>The rise of smartphones should be recalling to the end of 20th century, when the IBM Simon (shown in Fig.1) is invented by IBM and BellSouth in 1933. Powered by the inventing of MOSFET, IBM Simon with a touchscreen was referred as the first smartphone in the world. Based on the achievement of IBM Simon, the burgeoning smartphone industry developing rapidly. In 2008, Apple Company pushed out iPhone 3G, which is another milestone in the history of smartphone. As shown in Fig.2, iPhone 3G has already presented a complete exemplar electronic system, which is generally similar to the latest smartphone such as iPhone 15. Since than, the smartphone become a typical system with multiple functional electronic devices, including MOSFET / CMOS inside the main processor and memory chip and p-n junction in LED screen,. In the following report, I would focus on the the principles of these devices with related technology, demonstrate how these could be applied on modern smartphones.</p>       ![](image/2024-01-01-21-07-34.png){:height=\"150px\" width=\"150px\"} *Fig.1* IBM Simon   |![](image/2024-01-01-21-17-15.png){:height=\"150px\" width=\"150px\"}|![](image/2024-01-01-21-18-42.png){:height=\"140px\" width=\"140px\"}| |---|---|  *Fig.2* iPhone 3g (left) and iPhone 15 (right) <p></p>"},{"location":"NOTES/Stage_3/EEE3026/#iii-electronic-device-technology","title":"III: Electronic Device Technology","text":"<p>"},{"location":"NOTES/Stage_3/EEE3026/#1-mosfet-key-component-of-cpu-and-memory","title":"1: MOSFET: Key Component of CPU and Memory","text":"<p>"},{"location":"NOTES/Stage_3/EEE3026/#11-principle-of-mos-capacitors","title":"1.1: Principle of MOS Capacitors","text":"<p> <p>Inside the modern smartphone system, the Central Processor Units (CPU) plays a essential role to conducting calculation tasks, and MOSFET is the key components to form a CPU. To construct a CPU such as Apple A17 (SoC actually) shown in Fig.3, billions of MOSFET should be deployed precisely. In the following part of this chapter, I would demonstrate the functionality principles of MOSFET from the MOS capacitors.   </p>      ![](image/2024-01-01-21-27-06.png){:height=\"150px\" width=\"150px\"} *Fig.3* Apple A17 SoC <p>The name 'MOS' refers to Metal Oxide Semiconductor, which means it is composed of a piece of metal, a layer of oxide insulator and another substrate of semiconductor, as shown in Fig.4. In the domain of smartphone electronic system design, the expectation of a MOS is to perform as a switch to control the carrier polarity at 'surface layer' in the substrate. This process is called 'inversion', which could generate a hole-doped layer inside the the electron-doped substrate (n-type) semiconductor, and vice versa for the p-type semiconductor.</p>     ![](image/2024-01-01-21-31-05.png){:height=\"160px\" width=\"250px\"} *Fig.4* MOS Structure <p>For example of a p-type semiconductor, the principle of inversion layer generation could be descried as the following steps. Before adding external voltage across the metal, the energy-band graph could be shown as Fig.5. According to the Fermi-Dirac distribution function, which provides the possibility of a electron occupying energy-band \\(E\\):</p> \\[ F(E) = \\displaystyle\\frac{1}{1+e^{\\frac{E-E_F}{kT}}} \\] <p>Applying the integration on \\(F(E)\\) from \\(E_c\\) to the top of conduction-band, the electron concentration of could be deduced as below:</p> \\[ \\begin{aligned}     n &amp;= \\sum_{E_C}^{E_{top}}N(E)F(E){\\rm d}E \\\\     &amp;= N_C\\exp(-\\displaystyle\\frac{E_C-E_F}{kT}) \\\\     &amp;= n_i\\exp(\\displaystyle\\frac{E_F-E_i}{kT}) \\\\ \\end{aligned} \\] <p>And the expression of hole concentration could be deduced in the same structure:</p> \\[ p = n_i\\exp(\\displaystyle\\frac{E_i-E_F}{kT}) \\]     ![](image/2024-01-01-21-37-31.png){:height=\"150px\" width=\"150px\"} *Fig.5* P-type Original Energy-band Graph <p>In this condition, if we add the external positive voltage on the metal side, the previous conduction-band would bend down due to the depletion of holes in p-substrate, as shown in Fig.6. The conduction-band would keep bending with the increasing of metal-voltage. During this process, the value of \\(E_F-E_i\\) become positive, which means the electron-concentration \\(n_p\\) is larger than \\(n_i\\) according to the formula above. If we define that \\(\\phi _F = E_i -E_F\\), with the continuous bending of \\(E_C\\), the inversion concentration \\(n\\) would be equal to the original \\(p\\) when \\(E_i\\) moving to the symmetric position of original \\(E_i\\), as shown in Fig.7. This state is called strong inversion, indicating that a strong inversion layer doped with electrons is completely generated in the original p-type substrate.</p>     ![](image/2024-01-01-21-40-53.png){:height=\"180px\" width=\"220px\"} *Fig.6* Bending of Energy band     ![](image/![](image/2024-01-01-21-40-53.png).png){:height=\"180px\" width=\"220px\"} *Fig.7* Bending in Strong Inversion <p>To apply this method of generating inversion layers, the precise value of the external voltage should be determined in order to generate the inversion layer. Based on the band-bending result, the voltage-drop through the oxide and semiconductor surface would generate a build-in voltage \\(\\phi_{bi} = \\phi_s + \\phi_{ox}\\), as shown in Fig.8. If we apply the external voltage \\(V_G\\) in addition to the build-in potential difference, the new relation could be expressed as: </p> \\[ \\phi_{bi} + V_G = \\phi_s +\\phi_{ox} \\] <p>The semiconductor surface potential could be derived from the integration of \\(E\\) through the depletion direction:</p> \\[ \\begin{aligned} \\displaystyle\\phi_s &amp;= \\int_{0}^{x_d}\\frac{qN_Ax}{\\varepsilon _0 \\varepsilon_s}{\\rm d}x   \\\\ &amp;= \\frac{qN_Ax_d^2}{2\\varepsilon_0 \\varepsilon_s} \\end{aligned} \\] <p>According to the calculation above, the conduction-band should be decreased until the bending potential reaches \\(2\\phi_s\\) to form the strong inversion threshold, i.e. \\(\\phi_{st} = 2\\phi_{s}\\). </p> <p>The next step to calculate \\(V_G\\) is to find the \\(\\phi_{ox}\\) when the semiconductor reaches the strong inversion:</p> \\[ \\begin{aligned} \\displaystyle\\phi_{ox} &amp;=  \\frac{-Q_{s}}{C_{ox}} \\\\ &amp;= \\frac{-qN_Ax_{dmax}}{C_{ox}} \\end{aligned} \\] <p>Based on the formulas above, the necessary metal-side voltage could be expressed as:</p> \\[ V_G = -\\phi_{bi} + \\phi_{st} -\\frac{Q_{dmax}}{C_{ox}} \\] <p>At this stage, a switch-like MOS capacitor could be built to control the inversion in semiconductor substrate with a calculated voltage \\(V_G\\). Applying the switching function of MOS, another useful electronic devices called MOSFET were invented in 1960.</p>     ![](image/2024-01-01-21-46-22.png){:height=\"180px\" width=\"350px\"} *Fig.8* Metal-Oxide-Semiconductor Potential Difference"},{"location":"NOTES/Stage_3/EEE3026/#12-principle-of-mosfet","title":"1.2: Principle of MOSFET","text":"<p> <p>The typical MOSFET (eg. n-channel) is composed of four electrode terminals, including a p-type substrate, two electron doped regions (Drain and Source) and a metal-electrode called gate, as shown in Fig.9 below. With the increasing of the voltage across the drain and source electrodes \\(V_{DS}\\), a inversion layer would be generated along the channel, as shown in Fig.10. Keep increasing \\(V_{DS}\\), the potential difference between gate and drain would decrease, so that decrease the concentration of electron in channel, finally the n-channel would disappear, which is called pinch off, as shown in Fig.11. According to the operation principle of MOSFET above, the \\(I_D\\)_\\(V_{DS}\\) graph could be drawn as Fig.12, presenting the drain-source current \\(I_D\\) would increase with the increasing of \\(V_{DS}\\), until the saturation happens. </p>     ![](image/2024-01-01-21-50-35.png){:height=\"120px\" width=\"300px\"} *Fig.9* MOSFET Structure     ![](image/![](image/2024-01-01-21-50-35.png).png){:height=\"120px\" width=\"300px\"} *Fig.10* Inversion Layer Generation (the green channel)     ![](image/![](image/![](image/2024-01-01-21-50-35.png).png).png){:height=\"120px\" width=\"300px\"} *Fig.11* Inversion Layer Pinch-Off     ![](image/2024-01-01-21-57-31.png){:height=\"120px\" width=\"300px\"} *Fig.12* I-V Graph <p>To implement the MOSFET in a micro-electronic system such as smartphone, another analysis should be conducted on the value of \\(I_D\\), which is relative to the power and performance issues. </p> <p>The equation of train current \\(I_D\\) could be derived from the drift-current formula:</p> \\[ \\begin{aligned}     I_D &amp;= J_eWd \\\\     &amp;= q\\mu_e n(y)E_y(y)Wd \\\\     &amp;= Q(y)\\frac{\\mu_e}{d}\\frac{dV(y)}{dy}Wd \\\\     &amp;= -W\\mu_eC_{ox}[V_{GS}-V(y)-V_t]\\frac{dV(y)}{dy} \\\\     &amp;= -\\frac{W}{L}\\mu_eC_{ox}[V_G-\\frac{1}{2}V_{DS}-V_t]V_{DS} \\end{aligned} \\] <p>In the scenario of power of MOSFET, the \\(I_D\\) we considered is the off-state current, which means the static current without any \\(V_{GS}\\). If we increase the value of \\(I_D\\), the MOSFET would response in a higher frequency, which means the overall performance would be improved. However, this would also lead to a higher off-state power. The trade-off between power consumption and performance should be considered during the design process. </p> <p>With the help of MOSFET theory, the CPU and Memory module could be constructed from basic logic gates.</p>"},{"location":"NOTES/Stage_3/EEE3026/#13-application-of-mosfet-processors","title":"1.3: Application of MOSFET: Processors","text":"<p> <p>The basic logic gates in the smartphone processors use a special MOSFET structure, which called the Complementary MOSFET (CMOS). CMOS is composed of a pair of complementary MOSFET, i.e. a n-channel and a p-channel MOSFET. A typical CMOS element could be used as a logic inverter as shown in Fig.13. When a logic '1' voltage be applied as the input, the p-channel MOS would be off without generation of inversion layer while the n-channel MOS would be on to enable the output as a logic '0' voltage. In addition, other basic logic gates could be designed with CMOS as well. Fig.14 shows a example of CMOS NAND gate. If we construct the logic gates with the calculation purpose such as adders or multipliers, it could execute the tasks of computation, which is the core-principle of the processors. In modern CPU design, billions of CMOS would be constructed to perform the processing tasks. </p>     ![](image/2024-01-01-21-59-49.png){:height=\"100px\" width=\"200px\"} *Fig.13* CMOS Inverter     ![](image/2024-01-01-22-02-00.png){:height=\"100px\" width=\"200px\"} *Fig.14* CMOS NAND Gate"},{"location":"NOTES/Stage_3/EEE3026/#14-application-of-mosfet-memory","title":"1.4: Application of MOSFET: Memory","text":"<p> <p>Apart from the processors, various memory chips play an important role in smartphones as well. In the following paragraph, I would demonstrate the basic principle of three most common types of memory: DRAM, SRAM and FLASH Memory.</p> <p>DRAM (Dynamic Random Access Memory) has a simple structure as shown in Fig.15, which is composed of a MOS switch and a common capacitor. The capacitor cell would be charged with the control of MOS-switch. During that process, a one-bit data could be stored into the capacitor. </p>     ![](image/2024-01-01-22-04-03.png){:height=\"150px\" width=\"250px\"} *Fig.15* DRAM Structure <p>Compared to DRAM, SRAM (Static Random Access Memory) has a faster response speed. As shown in Fig.16, two face-to-face invertors generate a latch structure. The input data would be transmitted between two invertors until being read from the output. </p>     ![](image/2024-01-01-22-05-10.png){:height=\"150px\" width=\"250px\"} *Fig.16* SRAM Structure <p>FLASH Memory has a special MOS structure which combines the advantages of DRAM and SRAM. Additional floating cell is added between the control gate and semiconductor, as shown in Fig.17. For a typical NOR Flash, hot electron injection is used to charge and discharge the floating gate. If the floating gate has electrons, the value stored would be '0' while empty cell means '1'.The data could be read and write with the control of gate-voltage.</p>     ![](image/2024-01-01-22-06-32.png){:height=\"150px\" width=\"250px\"} *Fig.17* FLASH Structure <p>In summary, the memory modules are composed of different constructions of MOSFET / CMOS.</p>"},{"location":"NOTES/Stage_3/EEE3026/#2-led-development-of-display-devices","title":"2: LED: Development of Display Devices","text":"<p>"},{"location":"NOTES/Stage_3/EEE3026/#21-p-n-junction-and-led-principles","title":"2.1: P-N Junction and LED Principles","text":"<p> <p>The operation principle of LED is based on a P-N Junction, which is a two-terminal devices with a p-doped substrate and a n-doped substrate, as shown in Fig.18. At the interface of n-type and p-type, the electrons / holes concentration gradient would lead to a diffusion effect. The moving of electrons in n-type would leave the holes which are trapped in the crystal cells, and the holes in p-type would leave the electrons. The potential difference of these trapped carriers would generate an internal electric-field, which is called the build-in voltage \\(V_{bi}\\). If we applied a positive voltage on the p-type (forward bias), the drift current would go through from p-type to n-type. During this process, the redundant electrons and holes would re-combine at the middle interface. In some carefully designed p-n junction with special semiconductor materials, the energy generated from p-n re-combination would be radiated in the form of photom. This process could be described by formula below:</p> \\[ \\begin{aligned}     \\lambda &amp;= \\displaystyle\\frac{hc}{E} \\\\     &amp;= \\frac{1.24}{E_g (eV)} \\end{aligned} \\] <p>The wave-length \\(\\lambda\\) represents different type of light as shown in Fig.19, so that the color of light could be controlled by \\(E_g\\), which is subject to the LED materials. If we construct hundreds of LEDs to form a matrix with a controller-circuit (as shown in Fig.20), a character could be displayed on this screen. The technology of LED pushed the barrier of screen development significantly.</p>     ![](image/2024-01-02-07-31-41.png){:height=\"150px\" width=\"250px\"} *Fig.18* P-N Junction     ![](image/2024-01-02-07-34-44.png){:height=\"200px\" width=\"300px\"} *Fig.19* Electromagnetic Spectrum     ![](image/2024-01-02-07-37-57.png){:height=\"200px\" width=\"300px\"} *Fig.20* Example of LED Matrix Control Circuit"},{"location":"NOTES/Stage_3/EEE3026/#22-oleds-and-amoleds","title":"2.2: OLEDs and AMOLEDs","text":"<p> <p>Developed from basic LED principles, a more energy efficient and high-resolution Organic LED (OLED) is invented. Sharing the same principle, OLED has the similar structure with LED, as shown in Fig.21. Under the forward bias voltage, the electrons and holes would be combined at the interface between two transport layers. In OLED, several types of organic films are placed in thew middle of junction, which could control the light color. Compared to traditional LEDs, OLED have thinner structure with more flexibility, which makes the curved screen on smartphone possible. As a self-lightning device, OLED could be used on high-resolution screen without any light-source. </p>     ![](image/2024-01-02-07-41-15.png){:height=\"150px\" width=\"250px\"} *Fig.21* OLED Structure <p>Nowadays, OLED has already being widely used in the applications of smartphone screens. One of the most popular OLED technology is the Active Matrix Organic Light Emitting Diode (AMOLED). In AMOLED designs, each pixel could be controlled by an individual thin film transistor  (TFT), as shown in Fig.22. This method consume less power with higher resolution due to the precise-control of current via TFT matrix, so that been generally used in smartphone industries.</p>     ![](image/2024-01-02-07-48-40.png){:height=\"150px\" width=\"300px\"} *Fig.22* Thin Film Transistor (TFT)"},{"location":"NOTES/Stage_3/EEE3026/#3-mosfet-scaling-further-evolution","title":"3: MOSFET Scaling: Further Evolution","text":"<p> <p>To optimize the performance of semiconductors, the key target of MOSFET research is to reduce the size of MOSFET. The following methods are used to scale transistors equivalently. Strained Silicon shown in Fig.23 could improve the carrier mobility by changing silicon structure and the FinFET structure shown in Fig.24 reduce the drain current via its special 3D structure. Based on these scaling methods, the 3 nm generation design from TSMC could be produced, which is the latest technology till now.</p>     ![](image/2024-01-02-07-51-00.png){:height=\"150px\" width=\"300px\"} *Fig.23* Strained Silicon Crystal     ![](image/![](image/2024-01-02-07-51-00.png).png){:height=\"150px\" width=\"250px\"} *Fig.24* FinFET Structure"},{"location":"NOTES/Stage_3/EEE3026/#iv-discussion","title":"IV: Discussion","text":"<p> <p>Mainly focus on the applications of MOSFET/CMOS and LED, the analysis above elucidating the principles of smartphone CPU and Memory, indicating the importance of optimizing MOSFET performance-power relation and improving LED display resolution. </p> <p>From 22 nm (2011) to 3 nm (2023), from LED to AMOLED, the semiconductor manufacturing industries developed rapidly in the past 10 years. Anticipating future advancements, I expect continuous progress in MOSFET optimization to play a pivotal role in enhancing semiconductor performance, and the new materials might improve the OLED flexibility further. </p>"},{"location":"NOTES/Stage_3/EEE3026/#v-summary-and-conclusion","title":"V: Summary and Conclusion","text":"<p> <p>From the first smartphone was invented in 1933, to the iPhone 15 Pro being pushed put in 2023, the rapid iteration of semiconductor industry leads to the blooming of smartphone. Focus on the optimization of MOSFET, CMOS and LED, the key issues of the performance-power trade-off has been proposed. Base on the further research products, the more advanced MOS scaling technology, new LED materials and even holography, would definitely lead to a bright outlook of the smartphone systems.The discovery of semiconductor devices would an endless journey.</p>"},{"location":"NOTES/Stage_3/Gantt_Proposal/","title":"Gantt Proposal","text":"<pre><code>gantt\n    dateFormat  YYYY-MM-DD\n    title       FPGA Accelerator Project Schedule \n    excludes    \n\n    section Technical Design\n    Vivado Familiarize                     : a1, 2023-10-20,2023-10-26\n\n    Multiplier Performance Analysis        :milestone, 2023-10-27, 0d\n\n    Tsetlin Machine Module Design                            :         a2, 2023-10-28,2023-11-12\n\n    TM IP Verification:    milestone, 2023-11-15\n\n    Interconnection Building:                     :         a3, 2023-11-12, 2023-12-01\n\n    Interconnection Simulation and  Verification                     : milestone, 2023-12-03, 0d\n\n    Global construction and board level verification: a4, 2023-12-04, 2024-01-04\n\n    Simple datasets testing: milestone, after a4, 1d\n\n    Performance Analysis: pa1, 2024-01-05,2024-02-05\n\n    Conclusive results: milestone, after pa1, 1d \n\n    Further researches: further1, 2024-02-05, 2024-04-20\n\n\n    section Formal Documentation \n\n    Initiate Proposal    :  proposal1,2023-10-20,2023-10-27\n\n    Proposal Submission :  milestone, after proposal1, 0d\n\n    Preparing Demo-1: demo1,2023-10-28,2023-12-05\n\n    Demo-1 Submission: milestone, after demo1, 3d\n\n    Preparing Poster Presentation: post1,2023-12-06,2024-02-13\n\n    Poster Presentation: milestone, after post1,2d \n\n    Preparing Technical Report: report, 2024-02-15, 2024-04-20\n\n    Technical Report: milestone, after report, 5d \n\n    Preparing second presentation: demo2,2024-02-22, 2024-04-20\n\n    Second Presentation: milestone, after demo2, 0d \n</code></pre>"},{"location":"NOTES/Stage_3/IC_Design_Report/","title":"IC Design Report","text":"EEE 3027 IC Design Report   Ziyu Tian"},{"location":"NOTES/Stage_3/IC_Design_Report/#task-1-modelling-logic-gates-and-blocks","title":"Task 1: Modelling logic gates and blocks","text":"<p>In the following designs, I constructed the half-adder and full-adder in both truth-table form and logic-gate form.</p> <p>Logic-gate Half-adder (./HA_via_Gates.work):</p> <p></p> <p>Truth Table Half-adder (./HA_via_Truthtable.work):</p> <p></p> <p>logic-gate Full-adder (./FA_via_Gates.work)</p> <p></p> <p>Truth Table Full-adder (./FA_via_Truthtable.work)</p> <p></p> <p>Comparing the designs generated from Truth Table and Logic-gate, the advantages and disadvantages could be observed obviously. The truth-table models are simpler in architectures, which have less places / transitions, so that would provide a higher efficiency. In the logic-gate based designs, the architectures are more complicated, which have more places and transitions. However, the gate-based designs have better performance in modular developing process. Compared to the truth-table based modelling, which structure should be redesigned according to different truth table, logic-gates based models could be simply constructed using the default logic-gates according to different purposes. </p> <p>In conclusion, the true-table based models could have better efficiency and brief structure, but the cost of design may increase significantly. The logic-gates based models would have more modular choices, which allows you to construct the circuit from previous gate-level models. The modular design method could reduce the cost of designing, however have lower efficiency with larger scale of architectures. The trade-off between efficiency and cost should be considered in real-world condition.</p> <p>To implement the adder designs above, I also constructed an environment to receive the input and generate the output in a deadlock-free circle. An example of HA environment is shown as below (./Environment_with_HA.work)</p> <p></p> <p>The input for the half adder could be got from transition a0, a1, b0 and b1. After the calculation, the output in transition t4, t3, t2 and t1 could be extracted to another storing blocks, than the firing of t6 would lead the token back to the input. The system was tested as deadlock-free.</p>"},{"location":"NOTES/Stage_3/IC_Design_Report/#task-2-modelling-buffers-and-frequency-dividers","title":"Task 2: Modelling buffers and frequency dividers","text":"<p>In this task, I built the constant-latency multi-place buffer shown as below (./Parallel_Buffer.work):</p> <p></p> <p>In my multi-place buffer design, I choose the parallel method to avoid the increasing latency in linear-buffer design, which have 3 places. </p> <p>With the help of Workcraft software, I also constructed the reachability state graph for it as following (./Parallel_FSM.work):</p> <p></p> <p>Based on the Multi-place buffer design above, the 3-frequency-divider petri-net circuit could be constructed as (./3_Frequency_Divider.work):</p> <p></p> <p>In each stage, the system could divide the frequency by three.</p>"},{"location":"NOTES/Stage_3/IC_Design_Report/#task-3-modelling-systems-with-arbitration","title":"Task 3: Modelling systems with arbitration","text":"<p>In the following design, I developed a Petri-net model of a 3-philosophers-problem, which is shown in below (./philosophers_3_asym.work):</p> <p></p> <p>In my solution for the 3-philosopher problem, I used three hand-shake on the places of three folks among three philosophers. When a philosopher has picked up one folk, the adjacent philosophers in his both sides would be forbidden to pick up the nearby folks, which avoid the conflicts. This method could solve this problem with deadlock-free result.</p>"},{"location":"NOTES/Stage_3/IC_Design_Report/#task-4-modelling-simple-cpus","title":"Task 4: Modelling simple CPUs","text":"<p>According to the basic principle, a simple CPU without pipeline could be derived as following (./No_pipeline_CPU.work):</p> <p></p> <p>This CPU Petri-net design could model the process of increasing Program Counter, visiting Memory Read Register and reading in instructions from IR to execute a single instruction. To improve the efficiency, the low-level pipeline could be added.</p> <p>A low-level pipeline CPU could be designed as below (./Original_CPU.work):</p> <p></p> <p>In the first version of the pipeline design, the deadlock would occur in a certain condition. When the store-instruction has been decoded into MAR_read, another word could be fetched from PC as a pipeline. In this condition, the Instructor Register should wait for the store to complete, and the newly fetched word is also waiting for the response of IR, which would lead to a deadlock.</p> <p>To solve this deadlock, an extra register is necessary to store the newly fetched word and allow MAR to accept the request from storing (./One_latch_CPU.work):</p> <p></p> <p>A new latch could send back the request to MAR_read, which could allow the store to continue. As a result, another place from IR to MAR_read would allow the access to MAR_read. In addition, when a two-word instruction executes, the second word is fetched in parallel with the instruction decoding. After decoding completes, the appropriate register can start to latch the data earlier, which allows more concurrency.</p> <p>According to the practical testing, the addition of another latch could lead to more pipeline possibility. The design with two-latches could be shown as below (./Two_latches_CPU.work):</p> <p></p> <p>The two latches decouple the instruction and memory registers. Data latching into the instruction register can also occur concurrently with the fetching of new words from memory, which is even more concurrent compared to the one-latch version CPU.</p>"},{"location":"NOTES/Stage_3/IC_Design_Report/#extra-task-1-serial-multiplier","title":"Extra Task 1: Serial Multiplier","text":"<p>Due to the time limit, I only designed the first full-adder and the first part of shift-register, which is shown as below (./multiplier.work):</p> <p></p> <p>The design could calculate the first two bits of the multiplication result, i.e. \\(x_0.y_0\\) and \\(x_1y_0 + x_0y_1\\). The shifting effect is implemented using handshake between each instruction.</p>"},{"location":"NOTES/Stage_3/IC_Design_Report/#task-5-design-of-a-multi-place-buffer","title":"Task 5: Design of a multi-place buffer","text":"<p>With the request and acknowledge signals, the one-place buffer could be implemented. The simple buffer in STG could be design as below (./buffer_simple_stg.work):</p> <p></p> <p>Based on the principle of buffer and frequency_divider, I applied the tree-structure on a frequency divider by 2, which could lead to a frequency divider by 4 shown as below (./Freq-div-by-4_stg.work):</p> <p></p> <p>The system is being tested as deadlock-free. The synthesis circuit was also generated as below (./Freq-div-by-4_stg_circuit.work):</p> <p></p> <p>Based on the frequency divider by 4, the structure of a 4-place Buffer could be suggested as below:</p> <p></p> <p>Applied the multi-place buffer structure above, I constructed the 4-frequency-divider and the one-place buffer as the following STG design (./4_place_buffer_stg.work)</p> <p></p> <p>After the check of consistency, output-persistency, deadlock-freeness, and Complete State Coding, the 4-place buffer could also be synthesized as the following complex-gate circuit. (./Four_Place_Buffer_Circuit.work)</p>"},{"location":"NOTES/Stage_3/IC_Design_Report/#task-6-design-of-if-and-do-controllers","title":"Task 6: Design of \u2018if\u2019 and \u2018do\u2019 controllers","text":"<p>The STG model of if-block could be designed as below (./if_stg.work):</p> <p></p> <p>When the option of 'b_true' is activated, the transition of 'c' would be processed. In other conditions with 'b_false', it would return back to 'a' without execution of 'c'.</p> <p>The technical mapping solution of the if-block could be generated as below (./if_stg_tech.work):</p> <p></p> <p>Following the same principle, the while-block could be designed as below (./While_stg.work):</p> <p></p> <p>In the while-block, the signal request of 'a' could only be responded when 'b_false' is chosen, and it would repeat the loop when 'b_true' is chosen.</p> <p>The technical mapping solution could be generated as below (./While_stg_tech.work):</p> <p></p>"},{"location":"NOTES/Stage_3/Industrial_Control/","title":"Industrial Automation and PLCs","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#i-on-off-relay-control","title":"I: ON-OFF (relay) Control","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#1-background","title":"1: Background","text":"<ul> <li> <p>Often described as ON-OFF control or BANG-BANG Control.</p> </li> <li> <p>Could be implemented using simple RELAYS or by software implementation using PLC.</p> </li> </ul>"},{"location":"NOTES/Stage_3/Industrial_Control/#2-washing-machine-example","title":"2: Washing Machine Example","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#3-type-1-relay","title":"3: Type-1 RELAY","text":"<ul> <li>Using coils to control a different switch.</li> </ul>"},{"location":"NOTES/Stage_3/Industrial_Control/#4-type-2-relay-latching-and-reset-circuit","title":"4: TYPE-2 Relay Latching and Reset Circuit","text":"<ul> <li>We need a mechanism which will latch the relay when the button is pressed and released. We also need a mechanism to reset the latch.</li> </ul> <ul> <li> <p>We could implement Logical Expression using Relays. </p> </li> <li> <p>Buffer should be like: </p> </li> <li> <p>NOT Gate should be like: </p> </li> <li> <p>AND Gate:</p> </li> </ul> <p></p> <ul> <li>OR Gate:</li> </ul> <p></p> <ul> <li>XOR Gate:</li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Industrial_Control/#5-example-of-a-water-level-control-system","title":"5: Example of a water-level control system","text":"<ul> <li>If the level reaches the setting level or the emergency switch being pushed, the water-flow would be stopped.</li> </ul>"},{"location":"NOTES/Stage_3/Industrial_Control/#6-type-3-timers","title":"6: Type-3 Timers","text":"<ul> <li> <p>There is often a need in control applications where we want a relay to energise after some fixed time delay has passed following a button being presse</p> </li> <li> <p>A timer unit integrated into the relay system can achieve this.</p> </li> <li> <p>There are two topology variations of the timer (simple and latching) which can operate in two \u2018DELAY\u2019 modes, either ON or OFF. </p> </li> </ul> <p></p> <ul> <li>A latch could also be added:</li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Industrial_Control/#7-type-4-counters","title":"7: Type-4 Counters","text":"<ul> <li> <p>Counters are used for the counting of a specific number of operations (switchings) of the system contacts.</p> </li> <li> <p>A simple counter will have two inputs: a Reset (R) that resets the counter and an input (In) which provides the pulses that are counted.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Industrial_Control/#8-reality-and-switching-relay-characteristic","title":"8: Reality and Switching Relay Characteristic","text":"<ul> <li>Our discussion so far has assumed that the relay is an ideal switch: as the input signal goes from negative to positive the switch immediately changes state from OFF to ON and if the input signal goes from positive to negative the switch state changes from ON to OFF.</li> </ul> <ul> <li>In practice relays exhibit hysteresis: as the input signal goes from negative to positive it actually needs to reach a threshold value (+t) before the switch state changes. Likewise as the input signal goes from positive to negative it must reach a threshold value (-t) before the switch state changes from ON to OFF.</li> </ul> <ul> <li>So the relay in Simulink is:</li> </ul>"},{"location":"NOTES/Stage_3/Industrial_Control/#9-example-of-a-bank-control-system","title":"9: Example of a bank-control system","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#ii-plc-applications","title":"II: PLC Applications","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#1-introduction-to-plcs","title":"1: Introduction to PLCs","text":"<ul> <li> <p>Generally PLCs (as the name suggests) implement logic, determining outputs based on some logical combination of inputs.</p> </li> <li> <p>PLCs are programmable devices that are capable of taking inputs from sensors and activating actuators in order to control industrial equipment.</p> </li> <li> <p>LEDs on PLC indicate the Power On, Program Running, Software Fault, Module Fault and Link Status.</p> </li> </ul>"},{"location":"NOTES/Stage_3/Industrial_Control/#2-plc-architecture","title":"2: PLC Architecture","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#3-plc-operating-sequence","title":"3: PLC Operating Sequence","text":"<ul> <li>PLCs are cyclical machines that repeat the same sequence of functions until the program terminates or the machine is switched off.</li> </ul>"},{"location":"NOTES/Stage_3/Industrial_Control/#4-plc-ladder-logic-programming","title":"4: PLC Ladder Logic Programming","text":"<ul> <li>Internal Variable instead of physical switch (relay) could be applied on the same Ladder Logic notation, such as the A-LATCH below:</li> </ul> <ul> <li>Normally Closed and Normally Open Switches &amp; Contactors:</li> </ul>"},{"location":"NOTES/Stage_3/Industrial_Control/#5-example-of-a-system-with-start-and-stop","title":"5: Example of a system with START and STOP","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#6-ladder-logic-errors","title":"6: Ladder Logic Errors","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#7-plc-timers","title":"7: PLC Timers","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#8-counters","title":"8: Counters","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#9-master-control-relay-goto","title":"9: Master Control Relay (GOTO)","text":""},{"location":"NOTES/Stage_3/Industrial_Control/#10-sequential-function-charts","title":"10: Sequential Function Charts","text":""},{"location":"NOTES/Stage_3/Introduction_to_Law/","title":"Introduction to Business Laws","text":""},{"location":"NOTES/Stage_3/Introduction_to_Law/#i-introduction-to-english-laws","title":"I: Introduction to English Laws","text":""},{"location":"NOTES/Stage_3/Introduction_to_Law/#1-public-and-private-laws","title":"1: Public and Private Laws","text":""},{"location":"NOTES/Stage_3/Introduction_to_Law/#2-criminal-law-and-civil-law","title":"2: Criminal Law and Civil Law","text":""},{"location":"NOTES/Stage_3/Introduction_to_Law/#ii-sources-of-english-laws","title":"II: Sources of English Laws","text":"<ul> <li> <p>There are 2 main sources of English Law:</p> <ul> <li>Parliament (statutes)</li> <li>The Courts (case law and common law)</li> <li>Some EU laws after Brexit </li> </ul> </li> <li> <p>UK has 3 distinct legal systems and sets of laws:</p> <ul> <li>England and Wales </li> <li>Scotland</li> <li>Northern Ireland </li> </ul> </li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Introduction_to_Law/#1-parliament","title":"1: Parliament","text":"<ul> <li> <p>Makes most English Law, laws could be divided into two types:</p> <ul> <li>Direct Legislation: Acts of Parliament </li> <li>Indirect Legislation (delegated legislation): created by a government department or local authority with delegated power to legislate.</li> </ul> </li> <li> <p>Consists of House of Commons, House of Lords and The Monarch.</p> </li> <li> <p>Process of create / repeal / change Acts of Parliament:</p> </li> </ul> <p></p> <p></p> <ul> <li>Forms of delegated legislation:</li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Introduction_to_Law/#2-courts","title":"2: Courts","text":"<ul> <li> <p>Decide cases and create law often referred to as common law.</p> </li> <li> <p>The English court structure is divided into two branches: criminal and civil.</p> </li> <li> <p>The Court Structure can be explained as:</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Introduction_to_Law/#21-criminal-courts","title":"2.1: Criminal Courts","text":"<ul> <li> <p>First instance courts:</p> <ul> <li>Magistrates'courts</li> <li>Crown courts</li> </ul> </li> <li> <p>Appellate courts:</p> <ul> <li>High Court</li> <li>Court of Appellate</li> <li>Supreme Court</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_3/Introduction_to_Law/#22-civil-courts","title":"2.2: Civil Courts","text":"<ul> <li> <p>First instance courts:</p> <ul> <li>County Courts</li> <li>Magistrates'courts </li> <li>High courts </li> </ul> </li> <li> <p>Appellate courts:</p> <ul> <li>Court of Appeal </li> <li>Supreme Court </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_3/Introduction_to_Law/#3-law-of-binding-precedent","title":"3: Law of binding precedent","text":"<ul> <li> <p>The common law relies on the doctrine of precedent.</p> </li> <li> <p>The decisions of higher courts bind lower courts.</p> </li> <li> <p>Supreme Court binds all others, except its previous decisions.</p> </li> <li> <p>Court of Appeal only binds all other lower courts, mostly bound by itself (previous decisions).</p> </li> <li> <p>High Court is bound by SC and CA, except by its own previous decisions.</p> </li> <li> <p>Civil and Criminal of CA do not bind each other.</p> </li> </ul>"},{"location":"NOTES/Stage_3/Introduction_to_Law/#4-statutory-interpretation","title":"4: Statutory Interpretation","text":"<ul> <li> <p>In order to apply the law Judges often have to interpret the statute that has been made by Parliament.</p> </li> <li> <p>There may be ambiguity or dual meaning or an interpretation that wasn't what was envisaged when the Statute was created.</p> </li> <li> <p>Could be Intrinsic aids and External aids.</p> </li> <li> <p>Interpretation follows the rules below:</p> <ul> <li>THE CONTEXTUAL APPROACH: Interpretation needs to consider the context of the statute and the surrounding and connected text and words.</li> <li>THE \u2018LITERAL\u2019 RULE: Where the courts take the words at their face value where there is no ambiguity and their meaning is clear even if this produces an absurd result.</li> <li>THE \u2018GOLDEN\u2019 RULE: If there is ambiguity the court will apply the least ridiculous meaning to avoid an absurd result.</li> <li>THE \u2018MISCHIEF\u2019 RULE: Allows court to fulfil the statute's intended.</li> </ul> </li> </ul>"},{"location":"NOTES/Stage_3/Introduction_to_Law/#5-laws-from-european-union-impact-from-brexit","title":"5: Laws from European Union: Impact from Brexit","text":"<ul> <li> <p>UK left EU on 31 Jan 2020, the transition period ended 31 Dec 2020.</p> </li> <li> <p>Some of EU laws still exist:</p> <ul> <li> <p>Domestic Law which implemented or related to former EU obligations. e.g. the UK\u2019s Working Time Regulations which implemented the EU Working Time Directive.</p> </li> <li> <p>EU legislation which was directly applicable in the UK without implementing legislation. e.g. EU General Data Protection Regulation.</p> </li> <li> <p>Other rights and principles in the EU that had direct effect in the UK. e.g. the right not to be discriminated against on grounds of nationality.</p> </li> </ul> </li> </ul>"},{"location":"NOTES/Stage_3/Projects_Proposal/","title":"Projects Proposal","text":"Proposal of the FPGA Accelerator Individual Project  Ziyu Tian"},{"location":"NOTES/Stage_3/Projects_Proposal/#i-introduction","title":"I: Introduction","text":"<p> <p>With the increasing demand of machine learning (ML) based Artificial Intelligence (AI), the acceleration for the training and classification tasks become a valuable subject in modern computer science researches. Compared to the software implementation, hardware acceleration based on Field Programmable Gate Arrays (FPGAs) is significantly faster and less energy demanding. In this project, a low-power ML algorithm base on propositional logic, namely Tsetlin Machine, which originates from Tsetlin Automata, would be implemented on PYNQ-Z1 FPGA board as an accelerator. </p> <p></p>"},{"location":"NOTES/Stage_3/Projects_Proposal/#ii-aims-and-objectives","title":"II: Aims and Objectives","text":"<p> <p>The global aim of this project is to complete a functional Tsetlin Machine accelerator design implemented on PYNQ-Z1 FPGA board. For a typical classification task, the binary testing data should be transmitted into the ZYNQ-Z1, and the result of the class should be outputted back to user with the performance data (throughput, latency and power, etc) measured.</p> <p>To finish the total aim, the target could be divided into three staged objectives: RTL design of Tsetlin Machine, Interconnection design and Circuits Simulation, Board level verification and Performance Analysis:</p> <ul> <li> <p>RTL design of Tsetlin Machine: Initiate the Verilog design of Tsetlin Machine algorithm, construct and package the functional module into a IP core. Finish the regional test with simple datasets (such as XOR).</p> </li> <li> <p>Interconnection design and Circuits Simulation: Apply interconnection wiring between the PYNQ-Z1 Processor Module, Tsetlin Machine IP and peripheral IO modules. Finish the first stage simulation and generate the sequential waves.</p> </li> <li> <p>Board level verification and Performance Analysis: Base on the Tsetlin Machine Module design and interconnection modules, set the constraint file (.xdc) as well as the Verilog source file. Generate bitstream file and program the PYNQ-Z1 board. Measure and analyze the performance using monitoring software (eg.Xilinx Vivado).</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Projects_Proposal/#iii-achievable-milestone-statements","title":"III: Achievable-Milestone Statements","text":"<p> <p>In order to complete the global target on time, the following milestones should be achieved:</p> <ul> <li> <p>Milestone-1: Familiarize with the process of designing and measuring RTL modules with PYNQ-Z1 in Xilinx Vivado environment. Complete a 16 bits multiplier with PYNQ-Z1 and do the performance analysis.</p> </li> <li> <p>Milestone-2: Design the Tsetlin Machine module including Tsetlin Automata Module, Summing Module, Comparing and multiplexer Module. Simulate and verify the Tsetlin IP with testbench such as XOR.</p> </li> <li> <p>Milestone-3: Build the interconnection module (UART/AXI) to test the communication between Processor System (PS) and Programmable Logic (PL). Complete a simple test program which read in the data from UART port in PS and return the output form PL.</p> </li> <li> <p>Milestone-4: Construct the PS block, interconnection block and Tsetlin IP block. Test the demo-design on board with simple datasets.</p> </li> <li> <p>Milestone-5: Collect and compare the performance data (throughput, latency and power) with software implementation. Draw the conclusive report with comparison data.</p> </li> </ul> <p></p>"},{"location":"NOTES/Stage_3/Projects_Proposal/#iv-risks-judgement-and-mitigation","title":"IV: Risks Judgement and Mitigation","text":"<p> <p>To complete the settled objectives above, it is essential to do the advanced risks judgement and the research of mitigation methods. The risks may occur in the designing process are shown as below:</p> <ul> <li> <p>Risk-1: The core objective of this project is the translation of Tsetlin Machine Algorithm from C / Python to Verilog, and it may cause problems due to different structures between software and hardware. To avoid the risk of generate unaware errors, a series of regional tests could be applied as the verification. Verify the partial block with simple tests such as doing XOR test of TM IP core could ensure the accuracy of translating  HDL codes, so that avoiding the large error of the total design.</p> </li> <li> <p>Risk-2: Compared with the software implementation, another risk of hardware design is doing sequential constraint between each blocks in the circuit. To reduce or avoid the risks of sequential error, the advanced simulation between implementation could be carried. A detailed sequential wave form of each elements should be monitored to keep all the signals on track, which could reduce the sequential risks mostly. </p> </li> </ul>"},{"location":"NOTES/Stage_3/Projects_Proposal/#v-scheduled-gantt-chart","title":"V: Scheduled Gantt Chart","text":"<p> <p>Following the objectives and risks analysis above, the planned schedule of this project is drawn as the Gantt Chart below.</p> <p></p>"},{"location":"NOTES/Stage_3/worlds_counter/","title":"Worlds counter","text":"<p>This report presents a comprehensive analysis of electronic devices crucial to the functionality of smartphones, including MOSFET, CMOS, MEMS sensors, LED/OLED display, and RAM/FLASH memory. Each section explores the basic principles, equation derivations, and the influence of various semiconductor parameters and technologies. Based on the principle,the report highlights the interplay of these devices and their impact on smartphone performance. Notable contents include the application of MOSFET equivalent scaling method, demonstrating the evolving landscape of modern transistor. The report concludes with insights into the future outlook for electronic devices in the context of smartphone technology.</p> <p>The rise of smartphones should be recalling to the end of 20th century, when the IBM Simon (shown in Fig.1) is invented by IBM and BellSouth in 1933. Powered by the inventing of MOSFET, IBM Simon with a touchscreen was referred as the first smartphone in the world. Based on the achievement of IBM Simon, the burgeoning smartphone industry developing rapidly. In 2008, Apple Company pushed out iPhone 3G, which is another milestone in the history of smartphone. As shown in Fig.2.1, iPhone 3G has already presented a complete exemplar electronic system, which is generally similar to the latest smartphone such as iPhone 15 shown in Fig.2.2. Since than, the smartphone become a typical system with multiple functional electronic devices, including MOSFETs inside the main processor and memory chip, CMOS image sensors in camera, p-n junction in MEMS sensors, Heterojunction Bipolar Transistorin (HBT) in radio frequency (RF) modules and LED in touchscreens. In the following report, I would focus on the the principles of these devices with related technology, demonstrate how these could be applied on modern smartphones.</p> <p>Inside the modern smartphone system, the Central Processor Units (CPU) play a essential role to conducting calculation tasks, and MOSFETs are the key components to form a CPU. To construct a CPU such as Apple A17 shown in Fig.3.1[1], billions of MOSFET should be deployed precisely. In the following part of this chapter, I would demonstrate the functionality principles of MOSFET from the MOS capacitors.   </p> <p>The name 'MOS' refers to Metal Oxide Semiconductor, which means it is composed of a piece of metal, a layer of oxide insulator and another substrate of semiconductor, as shown in Fig.3.2. In the domain of smartphone electronic system design, the expectation of a MOS is to perform as a switch to control the carrier polarity at 'surface layer' in the substrate. This process is called 'inversion', which could generate a hole-doped layer inside the the electron-doped substrate (n-type) semiconductor, and vice versa for the p-type semiconductor.</p> <p>For example of a p-type semiconductor, the principle of inversion layer generation could be descried as the following steps. Before adding external voltage across the metal, the energy-band graph could be shown as Fig.3.3. According to the Fermi-Dirac distribution function, which provides the possibility of a electron occupying energy-band \\(E\\):</p> <p>Applying the integration on \\(F(E)\\) from \\(E_c\\) to the top of conduction-band, the electron concentration of could be deduced as below:</p> <p>And the expression of hole concentration could be deduced in the same structure:</p> <p>In this condition, if we add the external positive voltage on the metal side, the previous conduction-band would bend down due to the depletion of holes in p-substrate, as shown in Fig.3.4. The conduction-band would keep bending with the increasing of metal-voltage. During this process, the value of \\(E_F-E_i\\) become positive, which means the electron-concentration \\(n_p\\) is larger than \\(n_i\\) according to the formula above. If we define that \\(\\phi _F = E_i -E_F\\), with the continuous bending of \\(E_C\\), the inversion concentration \\(n\\) would be equal to the original \\(p\\) when \\(E_i\\) moving to the symmetric position of original \\(E_i\\), as shown in Fig.3.5. This state is called strong inversion, indicating that a strong inversion layer doped with electrons is completely generated in the original p-type substrate.</p> <p>To apply this method of generating inversion layers, the precise value of the external voltage should be determined in order to generate the inversion layer. Based on the band-bending result, the voltage-drop through the oxide and semiconductor surface would generate a build-in voltage \\(\\phi_{bi} = \\phi_s + \\phi_{ox}\\), as shown in Fig.3.6. If we apply the external voltage \\(V_G\\) in addition to the build-in potential difference, the new relation could be expressed as: </p> \\[ \\phi_{bi} + V_G = \\phi_s +\\phi_{ox} \\] <p>The semiconductor surface potential could be derived from the integration of \\(E\\) through the depletion direction</p> <p>According to the calculation above, the conduction-band should be decreased until the bending potential reaches \\(2\\phi_s\\) to form the strong inversion threshold, i.e. \\(\\phi_{st} = 2\\phi_{s}\\). </p> <p>The next step to calculate \\(V_G\\) is to find the \\(\\phi_{ox}\\) when the semiconductor reaches the strong inversion:</p> \\[ \\begin{aligned} \\displaystyle\\phi_{ox} &amp;=  \\frac{-Q_{s}}{C_{ox}} \\\\ &amp;= \\frac{-qN_Ax_{dmax}}{C_{ox}} \\end{aligned} \\] <p>Based on the formulas above, the necessary metal-side voltage could be expressed as:</p> \\[ V_G = -\\phi_{bi} + \\phi_{st} -\\frac{Q_{dmax}}{C_{ox}} \\] <p>At this stage, a switch-like MOS capacitor could be built to control the inversion in semiconductor substrate with a calculated voltage \\(V_G\\). Applying the switching function of MOS, another useful electronic devices called MOSFETS were invented in 1960.</p> <p>The typical MOSFET (eg. n-channel) is composed of four electrode terminals, including a p-type substrate, two electron doped regions (Drain and Source) and a metal-electrode called gate, as shown in Fig.3.7 below. With the increasing of the voltage across the drain and source electrodes \\(V_{DS}\\), a inversion layer would be generated along the channel, as shown in Fig.3.7. Keep increasing \\(V_{DS}\\), the potential difference between gate and drain would decrease, so that decrease the concentration of electron in channel, finally the n-channel would disappear, which is called pinch off, as shown in Fig.3.8. According to the operation principle of MOSFET above, the \\(I_D-V_{DS}\\) graph could be drawn as Fig.3.9, presenting the drain-source current \\(I_D\\) would increase with the increasing of \\(V_{DS}\\), until the saturation happens. </p> <p>To implement the MOSFET in a micro-electronic system such as smartphone, another analysis should be conducted on the value of \\(I_D\\), which is relative to the power and performance issues. </p> <p>The equation of train current \\(I_D\\) could be derived from the drift-current formula:</p> \\[ \\begin{aligned}     I_D &amp;= J_eWd \\\\     &amp;= q\\mu_e n(y)E_y(y)Wd \\\\     &amp;= Q(y)\\frac{\\mu_e}{d}\\frac{dV(y)}{dy}Wd \\\\     &amp;= -W\\mu_eC_{ox}[V_{GS}-V(y)-V_t]\\frac{dV(y)}{dy} \\\\     &amp;= -\\frac{W}{L}\\mu_eC_{ox}[V_G-\\frac{1}{2}V_{DS}-V_t]V_{DS} \\end{aligned} \\] <p>In the scenario of power of MOSFET, the \\(I_D\\) we considered is the off-state current, which means the static current without any \\(V_{GS}\\). If we increase the value of \\(I_D\\), the MOSFET would response in a higher frequency, which means the overall performance would be improved. However, this would also lead to a higher off-state power. The trade-off between power consumption and performance should be considered during the design process. </p> <p>With the help of MOSFET theory, the CPU and Memory module could be constructed from basic logic gates.</p> <p>The basic logic gates in the smartphone processors use a special MOSFET structure, which called the Complementary MOSFET (CMOS). CMOS is composed of a pair of complementary MOSFET, i.e. a n-channel and a p-channel MOSFET. A typical CMOS element could be used as a logic inverter as shown in Fig.3.10. When a logic '1' voltage be applied as the input, the p-channel MOS would be off without generation of inversion layer while the n-channel MOS would be on to enable the output as a logic '0' voltage. In addition, other basic logic gates could be designed with CMOS as well. Fig.3.11 shows a example of CMOS NAND gate and NOR gate. If we construct the logic gates with the calculation purpose such as adders or multipliers, it could execute the tasks of computation, which is the core-principle of the processors. In modern CPU design, billions of CMOS would be constructed to perform the processing tasks. </p> <p>Apart from the processors, various memory chips play an important role in smartphones as well. In the following paragraph, I would demonstrate the basic principle of three most common types of memory: DRAM, SRAM and FLASH Memory.</p> <p>DRAM (Dynamic Random Access Memory) has a simple structure as shown in Fig.3.12, which is composed of a MOS switch and a common capacitor. The capacitor cell would be charged with the control of MOS-switch. During that process, a one-bit data could be stored into the capacitor. </p> <p>Compared to DRAM, SRAM (Static Random Access Memory) has a faster response speed. As shown in Fig.3.13, two face-to-face invertors generate a latch structure. The input data would be transmitted between two invertors until being read from the output. </p> <p>FLASH Memory has a special MOS structure which combines the advantages of DRAM and SRAM. Additional floating cell is added between the control gate and semiconductor, as shown in Fig.3.14. For a typical NOR Flash, hot electron injection is used to charge and discharge the floating gate. If the floating gate has electrons, the value stored would be '0' while empty cell means '1'.The data could be read and write with the control of gate-voltage.</p> <p>In summary, the memory modules are composed of different constructions of MOSFET / CMOS.</p>"},{"location":"NOTES/Stage_3/worlds_counter/#2-led-development-of-display-devices","title":"2: LED: Development of Display Devices","text":"<p>"},{"location":"NOTES/Stage_3/worlds_counter/#11-p-n-junction-and-led-principles","title":"1.1: P-N Junction and LED Principles","text":"<p> <p>The operation principle of LED is based on a P-N Junction, which is a two-terminal devices with a p-doped substrate and a n-doped substrate, as shown in Fig.3.15. At the interface of n-type and p-type, the electrons / holes concentration gradient would lead to a diffusion effect. The moving of electrons in n-type would leave the holes which are trapped in the crystal cells, and the holes in p-type would leave the electrons. The potential difference of these trapped carriers would generate an internal electric-field, which is called the build-in voltage \\(V_{bi}\\). If we applied a positive voltage on the p-type (forward bias), the drift current would go through from p-type to n-type. During this process, the redundant electrons and holes would re-combine at the middle interface. In some carefully designed p-n junction with special semiconductor materials, the energy generated from p-n re-combination would be radiated in the form of photom. This process could be described by formula below:</p> \\[ \\begin{aligned}     \\lambda &amp;= \\displaystyle\\frac{hc}{E} \\\\     &amp;= \\frac{1.24}{E_g (eV)} \\end{aligned} \\] <p>The wave-length \\(\\lambda\\) represents different type of light as shown in Fig.3.16, so that the color of light could be controlled by \\(E_g\\), which is subject to the LED materials. If we construct hundreds of LEDs to form a matrix with a controller-circuit (as shown in Fig.3.17), a character could be displayed on this screen. The technology of LED pushed the barrier of screen development significantly.</p>"},{"location":"NOTES/Stage_3/worlds_counter/#12-oleds-and-amoleds","title":"1.2: OLEDs and AMOLEDs","text":"<p> <p>Developed from basic LED principles, a more energy efficient and high-resolution Organic LED (OLED) is invented. Sharing the same principle, OLED has the similar structure with LED, as shown in Fig.3.18. Under the forward bias voltage, the electrons and holes would be combined at the interface between two transport layers. In OLED, several types of organic films are placed in thew middle of junction, which could control the light color. Compared to traditional LEDs, OLED have thinner structure with more flexibility, which makes the curved screen on smartphone possible. As a self-lightning device, OLED could be used on high-resolution screen without any light-source. </p> <p>Nowadays, OLED has already being widely used in the applications of smartphone screens. One of the most popular OLED technology is the Active Matrix Organic Light Emitting Diode (AMOLED). In AMOLED designs, each pixel could be controlled by an individual thin film transistor  (TFT), as shown in Fig. This method consume less power with higher resolution due to the precise-control of current via TFT matrix, so that been generally used in smartphone industries.</p>"},{"location":"live2d-widget/","title":"Live2D Widget","text":"<p>English</p>"},{"location":"live2d-widget/#_1","title":"\u7279\u6027","text":"<p>\u5728\u7f51\u9875\u4e2d\u6dfb\u52a0 Live2D \u770b\u677f\u5a18\u3002\u517c\u5bb9 PJAX\uff0c\u652f\u6301\u65e0\u5237\u65b0\u52a0\u8f7d\u3002</p> <p></p> <p>\uff08\u6ce8\uff1a\u4ee5\u4e0a\u4eba\u7269\u6a21\u578b\u4ec5\u4f9b\u5c55\u793a\u4e4b\u7528\uff0c\u672c\u4ed3\u5e93\u5e76\u4e0d\u5305\u542b\u4efb\u4f55\u6a21\u578b\u3002\uff09</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u67e5\u770b\u793a\u4f8b\u7f51\u9875\uff1a</p> <ul> <li>\u5728 \u7c73\u7c73\u7684\u535a\u5ba2 \u7684\u5de6\u4e0b\u89d2\u53ef\u67e5\u770b\u6548\u679c</li> <li>demo/demo.html\uff0c\u5c55\u73b0\u57fa\u7840\u529f\u80fd</li> <li>demo/login.html\uff0c\u4eff NPM \u7684\u767b\u9646\u754c\u9762</li> </ul>"},{"location":"live2d-widget/#_2","title":"\u4f7f\u7528","text":"<p>\u5982\u679c\u4f60\u662f\u5c0f\u767d\uff0c\u6216\u8005\u53ea\u9700\u8981\u6700\u57fa\u7840\u7684\u529f\u80fd\uff0c\u90a3\u4e48\u53ea\u7528\u5c06\u8fd9\u4e00\u884c\u4ee3\u7801\u52a0\u5165 html \u9875\u9762\u7684 <code>head</code> \u6216 <code>body</code> \u4e2d\uff0c\u5373\u53ef\u52a0\u8f7d\u770b\u677f\u5a18\uff1a <pre><code>&lt;script src=\"https://fastly.jsdelivr.net/npm/live2d-widgets@0/autoload.js\"&gt;&lt;/script&gt;\n</code></pre> \u6dfb\u52a0\u4ee3\u7801\u7684\u4f4d\u7f6e\u53d6\u51b3\u4e8e\u4f60\u7684\u7f51\u7ad9\u7684\u6784\u5efa\u65b9\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Hexo\uff0c\u90a3\u4e48\u9700\u8981\u5728\u4e3b\u9898\u7684\u6a21\u7248\u6587\u4ef6\u4e2d\u6dfb\u52a0\u4ee5\u4e0a\u4ee3\u7801\u3002\u5bf9\u4e8e\u7528\u5404\u79cd\u6a21\u7248\u5f15\u64ce\u751f\u6210\u7684\u9875\u9762\uff0c\u4fee\u6539\u65b9\u6cd5\u7c7b\u4f3c\u3002 \u5982\u679c\u7f51\u7ad9\u542f\u7528\u4e86 PJAX\uff0c\u7531\u4e8e\u770b\u677f\u5a18\u4e0d\u5fc5\u6bcf\u9875\u5237\u65b0\uff0c\u9700\u8981\u6ce8\u610f\u5c06\u8be5\u811a\u672c\u653e\u5230 PJAX \u5237\u65b0\u533a\u57df\u4e4b\u5916\u3002</p> <p>\u4f46\u662f\uff01\u6211\u4eec\u5f3a\u70c8\u63a8\u8350\u81ea\u5df1\u8fdb\u884c\u914d\u7f6e\uff0c\u8ba9\u770b\u677f\u5a18\u66f4\u52a0\u9002\u5408\u4f60\u7684\u7f51\u7ad9\uff01 \u5982\u679c\u4f60\u6709\u5174\u8da3\u81ea\u5df1\u6298\u817e\u7684\u8bdd\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u8be6\u7ec6\u8bf4\u660e\u3002</p>"},{"location":"live2d-widget/#_3","title":"\u914d\u7f6e","text":"<p>\u4f60\u53ef\u4ee5\u5bf9\u7167 <code>dist/autoload.js</code> \u7684\u6e90\u7801\u67e5\u770b\u53ef\u9009\u7684\u914d\u7f6e\u9879\u76ee\u3002<code>autoload.js</code> \u4f1a\u81ea\u52a8\u52a0\u8f7d\u4e09\u4e2a\u6587\u4ef6\uff1a<code>waifu.css</code>\uff0c<code>live2d.min.js</code> \u548c <code>waifu-tips.js</code>\u3002<code>waifu-tips.js</code> \u4f1a\u521b\u5efa <code>initWidget</code> \u51fd\u6570\uff0c\u8fd9\u5c31\u662f\u52a0\u8f7d\u770b\u677f\u5a18\u7684\u4e3b\u51fd\u6570\u3002<code>initWidget</code> \u51fd\u6570\u63a5\u6536\u4e00\u4e2a Object \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4f5c\u4e3a\u770b\u677f\u5a18\u7684\u914d\u7f6e\u3002\u4ee5\u4e0b\u662f\u914d\u7f6e\u9009\u9879\uff1a</p> \u9009\u9879 \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e <code>waifuPath</code> <code>string</code> <code>https://fastly.jsdelivr.net/npm/live2d-widgets@0/waifu-tips.json</code> \u770b\u677f\u5a18\u8d44\u6e90\u8def\u5f84\uff0c\u53ef\u81ea\u884c\u4fee\u6539 <code>apiPath</code> <code>string</code> <code>https://live2d.fghrsh.net/api/</code> API \u8def\u5f84\uff0c\u53ef\u9009\u53c2\u6570 <code>cdnPath</code> <code>string</code> <code>https://fastly.jsdelivr.net/gh/fghrsh/live2d_api/</code> CDN \u8def\u5f84\uff0c\u53ef\u9009\u53c2\u6570 <code>tools</code> <code>string[]</code> \u89c1 <code>autoload.js</code> \u52a0\u8f7d\u7684\u5c0f\u5de5\u5177\u6309\u94ae\uff0c\u53ef\u9009\u53c2\u6570 <p>\u5176\u4e2d\uff0c<code>apiPath</code> \u548c <code>cdnPath</code> \u4e24\u4e2a\u53c2\u6570\u8bbe\u7f6e\u5176\u4e2d\u4e00\u9879\u5373\u53ef\u3002<code>apiPath</code> \u662f\u540e\u7aef API \u7684 URL\uff0c\u53ef\u4ee5\u81ea\u884c\u642d\u5efa\uff0c\u5e76\u589e\u52a0\u6a21\u578b\uff08\u9700\u8981\u4fee\u6539\u7684\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\uff09\uff0c\u53ef\u4ee5\u53c2\u8003 live2d_api\u3002\u800c <code>cdnPath</code> \u5219\u662f\u901a\u8fc7 jsDelivr \u8fd9\u6837\u7684 CDN \u670d\u52a1\u52a0\u8f7d\u8d44\u6e90\uff0c\u66f4\u52a0\u7a33\u5b9a\u3002</p>"},{"location":"live2d-widget/#_4","title":"\u81ea\u5b9a\u4e49","text":"<p>\u5982\u679c\u4ee5\u4e0a\u300c\u914d\u7f6e\u300d\u90e8\u5206\u63d0\u4f9b\u7684\u9009\u9879\u8fd8\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u81ea\u5df1\u8fdb\u884c\u4fee\u6539\u3002\u672c\u4ed3\u5e93\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a</p> <ul> <li><code>src/</code> \u76ee\u5f55\u4e0b\u5305\u542b\u4e86\u5404\u4e2a\u7ec4\u4ef6\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u6309\u94ae\u548c\u5bf9\u8bdd\u6846\u7b49\uff1b</li> <li><code>build/</code> \u76ee\u5f55\u4e0b\u5305\u542b\u4e86 TypeScript \u6784\u5efa\u540e\u7684\u6587\u4ef6\uff1b</li> <li><code>dist/</code> \u76ee\u5f55\u4e0b\u5305\u542b\u4e86\u8fdb\u4e00\u6b65\u6253\u5305\u540e\u7f51\u9875\u76f4\u63a5\u53ef\u7528\u7684\u6587\u4ef6\uff0c\u5176\u4e2d\uff1a</li> <li><code>autoload.js</code> \u662f\u7528\u4e8e\u81ea\u52a8\u52a0\u8f7d\u5176\u5b83\u8d44\u6e90\uff0c\u4f8b\u5982\u6837\u5f0f\u8868\u7b49\uff1b</li> <li><code>waifu-tips.js</code> \u662f\u7531 <code>build/waifu-tips.js</code> \u81ea\u52a8\u6253\u5305\u751f\u6210\u7684\uff0c\u4e0d\u5efa\u8bae\u76f4\u63a5\u4fee\u6539\uff1b</li> <li><code>waifu-tips.json</code> \u4e2d\u5b9a\u4e49\u4e86\u89e6\u53d1\u6761\u4ef6\uff08<code>selector</code>\uff0cCSS \u9009\u62e9\u5668\uff09\u548c\u89e6\u53d1\u65f6\u663e\u793a\u7684\u6587\u5b57\uff08<code>text</code>\uff09\uff1b</li> <li><code>waifu.css</code> \u662f\u770b\u677f\u5a18\u7684\u6837\u5f0f\u8868\u3002</li> </ul> <p><code>waifu-tips.json</code> \u4e2d\u9ed8\u8ba4\u7684 CSS \u9009\u62e9\u5668\u89c4\u5219\u662f\u5bf9 Hexo \u7684 NexT \u4e3b\u9898 \u6709\u6548\u7684\uff0c\u4e3a\u4e86\u9002\u7528\u4e8e\u4f60\u81ea\u5df1\u7684\u7f51\u9875\uff0c\u53ef\u80fd\u9700\u8981\u81ea\u884c\u4fee\u6539\uff0c\u6216\u589e\u52a0\u65b0\u5185\u5bb9\u3002 \u8b66\u544a\uff1a<code>waifu-tips.json</code> \u4e2d\u7684\u5185\u5bb9\u53ef\u80fd\u4e0d\u9002\u5408\u6240\u6709\u5e74\u9f84\u6bb5\uff0c\u6216\u4e0d\u5b9c\u5728\u5de5\u4f5c\u671f\u95f4\u8bbf\u95ee\u3002\u5728\u4f7f\u7528\u65f6\uff0c\u8bf7\u81ea\u884c\u786e\u4fdd\u5b83\u4eec\u662f\u5408\u9002\u7684\u3002</p> <p>\u8981\u5728\u672c\u5730\u90e8\u7f72\u672c\u9879\u76ee\u7684\u5f00\u53d1\u6d4b\u8bd5\u73af\u5883\uff0c\u4f60\u9700\u8981\u5b89\u88c5 Node.js \u548c npm\uff0c\u7136\u540e\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>git clone https://github.com/stevenjoezhang/live2d-widget.git\nnpm install\nnpm run build\n</code></pre> <p>\u5982\u679c\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u6b22\u8fce\u63d0 Issue\u3002\u5982\u679c\u6709\u4efb\u4f55\u4fee\u6539\u5efa\u8bae\uff0c\u6b22\u8fce\u63d0 Pull Request\u3002</p>"},{"location":"live2d-widget/#_5","title":"\u90e8\u7f72","text":"<p>\u5728\u672c\u5730\u5b8c\u6210\u4e86\u4fee\u6539\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06\u4fee\u6539\u540e\u7684\u9879\u76ee\u90e8\u7f72\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u6216\u8005\u901a\u8fc7 CDN \u52a0\u8f7d\uff0c\u4ee5\u4fbf\u5728\u7f51\u9875\u4e2d\u4f7f\u7528\u3002</p>"},{"location":"live2d-widget/#cdn","title":"\u4f7f\u7528 CDN","text":"<p>\u8981\u81ea\u5b9a\u4e49\u6709\u5173\u5185\u5bb9\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u4ed3\u5e93 Fork \u4e00\u4efd\uff0c\u7136\u540e\u628a\u4fee\u6539\u540e\u7684\u5185\u5bb9\u901a\u8fc7 git push \u5230\u4f60\u7684\u4ed3\u5e93\u4e2d\u3002\u8fd9\u65f6\uff0c\u4f7f\u7528\u65b9\u6cd5\u5bf9\u5e94\u5730\u53d8\u4e3a <pre><code>&lt;script src=\"https://fastly.jsdelivr.net/gh/username/live2d-widget@latest/autoload.js\"&gt;&lt;/script&gt;\n</code></pre> \u5c06\u6b64\u5904\u7684 <code>username</code> \u66ff\u6362\u4e3a\u4f60\u7684 GitHub \u7528\u6237\u540d\u3002\u4e3a\u4e86\u4f7f CDN \u7684\u5185\u5bb9\u6b63\u5e38\u5237\u65b0\uff0c\u9700\u8981\u521b\u5efa\u65b0\u7684 git tag \u5e76\u63a8\u9001\u81f3 GitHub \u4ed3\u5e93\u4e2d\uff0c\u5426\u5219\u6b64\u5904\u7684 <code>@latest</code> \u4ecd\u7136\u6307\u5411\u66f4\u65b0\u524d\u7684\u6587\u4ef6\u3002\u6b64\u5916 CDN \u672c\u8eab\u5b58\u5728\u7f13\u5b58\uff0c\u56e0\u6b64\u6539\u52a8\u53ef\u80fd\u9700\u8981\u4e00\u5b9a\u7684\u65f6\u95f4\u751f\u6548\u3002\u76f8\u5173\u6587\u6863\uff1a - Git Basics - Tagging - Managing releases in a repository</p>"},{"location":"live2d-widget/#self-host","title":"Self-host","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u628a\u8fd9\u4e9b\u6587\u4ef6\u653e\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u800c\u4e0d\u662f\u901a\u8fc7 CDN \u52a0\u8f7d\u3002</p> <ul> <li>\u5982\u679c\u4f60\u80fd\u591f\u901a\u8fc7 <code>ssh</code> \u8fde\u63a5\u4f60\u7684\u4e3b\u673a\uff0c\u8bf7\u628a Fork \u5e76\u4fee\u6539\u540e\u7684\u4ee3\u7801\u4ed3\u5e93\u514b\u9686\u5230\u670d\u52a1\u5668\u4e0a\u3002</li> <li>\u5982\u679c\u4f60\u7684\u4e3b\u673a\u65e0\u6cd5\u7528 <code>ssh</code> \u8fde\u63a5\uff08\u4f8b\u5982\u4e00\u822c\u7684\u865a\u62df\u4e3b\u673a\uff09\uff0c\u8bf7\u5728\u672c\u5730\u4fee\u6539\u597d\u4ee3\u7801\u540e\uff0c\u901a\u8fc7 <code>ftp</code> \u7b49\u65b9\u5f0f\u5c06\u6587\u4ef6\u4e0a\u4f20\u5230\u4e3b\u673a\u7684\u7f51\u7ad9\u7684\u76ee\u5f55\u4e0b\u3002</li> <li>\u5982\u679c\u4f60\u662f\u901a\u8fc7 Hexo \u7b49\u5de5\u5177\u90e8\u7f72\u7684\u9759\u6001\u535a\u5ba2\uff0c\u8bf7\u628a\u672c\u9879\u76ee\u7684\u4ee3\u7801\u653e\u5728\u535a\u5ba2\u6e90\u6587\u4ef6\u76ee\u5f55\u4e0b\uff08\u4f8b\u5982 <code>source</code> \u76ee\u5f55\uff09\u3002\u91cd\u65b0\u90e8\u7f72\u535a\u5ba2\u65f6\uff0c\u76f8\u5173\u6587\u4ef6\u5c31\u4f1a\u81ea\u52a8\u4e0a\u4f20\u5230\u5bf9\u5e94\u7684\u8def\u5f84\u4e0b\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u4e9b\u6587\u4ef6\u88ab Hexo \u63d2\u4ef6\u9519\u8bef\u5730\u4fee\u6539\uff0c\u53ef\u80fd\u9700\u8981\u8bbe\u7f6e <code>skip_render</code>\u3002</li> </ul> <p>\u8fd9\u6837\uff0c\u6574\u4e2a\u9879\u76ee\u5c31\u53ef\u4ee5\u901a\u8fc7\u4f60\u7684\u57df\u540d\u8bbf\u95ee\u4e86\u3002\u4e0d\u59a8\u8bd5\u8bd5\u80fd\u5426\u6b63\u5e38\u5730\u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 <code>autoload.js</code> \u548c <code>live2d.min.js</code> \u7b49\u6587\u4ef6\uff0c\u5e76\u786e\u8ba4\u8fd9\u4e9b\u6587\u4ef6\u7684\u5185\u5bb9\u662f\u5b8c\u6574\u548c\u6b63\u786e\u7684\u3002 \u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u63a5\u4e0b\u6765\u4fee\u6539 <code>autoload.js</code> \u4e2d\u7684\u5e38\u91cf <code>live2d_path</code> \u4e3a <code>live2d-widget</code> \u8fd9\u4e00\u76ee\u5f55\u7684 URL \u5373\u53ef\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u4f60\u80fd\u591f\u901a\u8fc7 <pre><code>https://example.com/path/to/live2d-widget/live2d.min.js\n</code></pre> \u8bbf\u95ee\u5230 <code>live2d.min.js</code>\uff0c\u90a3\u4e48\u5c31\u628a <code>live2d_path</code> \u7684\u503c\u4fee\u6539\u4e3a <pre><code>https://example.com/path/to/live2d-widget/\n</code></pre> \u8def\u5f84\u672b\u5c3e\u7684 <code>/</code> \u4e00\u5b9a\u8981\u52a0\u4e0a\u3002 \u5b8c\u6210\u540e\uff0c\u5728\u4f60\u8981\u6dfb\u52a0\u770b\u677f\u5a18\u7684\u754c\u9762\u52a0\u5165 <pre><code>&lt;script src=\"https://example.com/path/to/live2d-widget/autoload.js\"&gt;&lt;/script&gt;\n</code></pre> \u5c31\u53ef\u4ee5\u52a0\u8f7d\u4e86\u3002</p>"},{"location":"live2d-widget/#_6","title":"\u9e23\u8c22","text":"<p>\u611f\u8c22 BrowserStack \u5bb9\u8bb8\u6211\u4eec\u5728\u771f\u5b9e\u7684\u6d4f\u89c8\u5668\u4e2d\u6d4b\u8bd5\u6b64\u9879\u76ee\u3002 Thanks to BrowserStack for providing the infrastructure that allows us to test in real browsers!</p> <p> </p> <p>\u611f\u8c22 jsDelivr \u63d0\u4f9b\u7684 CDN \u670d\u52a1\u3002 Thanks jsDelivr for providing public CDN service.</p> <p>\u4ee3\u7801\u81ea\u8fd9\u7bc7\u535a\u6587\u9b54\u6539\u800c\u6765\uff1a https://www.fghrsh.net/post/123.html</p> <p>\u611f\u8c22 \u4e00\u8a00 \u63d0\u4f9b\u7684\u8bed\u53e5\u63a5\u53e3\u3002</p> <p>\u70b9\u51fb\u770b\u677f\u5a18\u7684\u7eb8\u98de\u673a\u6309\u94ae\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5f69\u86cb\uff0c\u8fd9\u6765\u81ea\u4e8e WebsiteAsteroids\u3002</p>"},{"location":"live2d-widget/#_7","title":"\u66f4\u591a","text":"<p>\u66f4\u591a\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003\uff1a https://nocilol.me/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02 https://github.com/xiazeyu/live2d-widget.js https://github.com/summerscar/live2dDemo</p> <p>\u5173\u4e8e\u540e\u7aef API \u6a21\u578b\uff1a https://github.com/xiazeyu/live2d-widget-models https://github.com/xiaoski/live2d_models_collection</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u684c\u9762\u7248\u672c\uff1a https://github.com/amorist/platelet https://github.com/akiroz/Live2D-Widget https://github.com/zenghongtu/PPet https://github.com/LikeNeko/L2dPetForMac</p> <p>\u4ee5\u53ca Wallpaper Engine\uff1a https://github.com/guansss/nep-live2d</p>"},{"location":"live2d-widget/#_8","title":"\u8bb8\u53ef\u8bc1","text":"<p>Released under the GNU General Public License v3 http://www.gnu.org/licenses/gpl-3.0.html</p> <p>\u672c\u4ed3\u5e93\u5e76\u4e0d\u5305\u542b\u4efb\u4f55\u6a21\u578b\uff0c\u7528\u4f5c\u5c55\u793a\u7684\u6240\u6709 Live2D \u6a21\u578b\u3001\u56fe\u7247\u3001\u52a8\u4f5c\u6570\u636e\u7b49\u7248\u6743\u5747\u5c5e\u4e8e\u5176\u539f\u4f5c\u8005\uff0c\u4ec5\u4f9b\u7814\u7a76\u5b66\u4e60\uff0c\u4e0d\u5f97\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u3002</p> <p>Live2D \u5b98\u65b9\u7f51\u7ad9\uff1a https://www.live2d.com/en/ https://live2d.github.io</p> <p>Live2D Cubism Core \u306f Live2D Proprietary Software License \u3067\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 https://www.live2d.com/eula/live2d-proprietary-software-license-agreement_en.html Live2D Cubism Components \u306f Live2D Open Software License \u3067\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 http://www.live2d.com/eula/live2d-open-software-license-agreement_en.html</p> <p>The terms and conditions do prohibit modification, but obfuscating in <code>live2d.min.js</code> would not be considered illegal modification.</p> <p>https://community.live2d.com/discussion/140/webgl-developer-licence-and-javascript-question</p>"},{"location":"live2d-widget/#_9","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>2018\u5e7410\u670831\u65e5\uff0c\u7531 fghrsh \u63d0\u4f9b\u7684\u539f API \u505c\u7528\uff0c\u8bf7\u66f4\u65b0\u81f3\u65b0\u5730\u5740\u3002\u53c2\u8003\u6587\u7ae0\uff1a https://www.fghrsh.net/post/170.html</p> <p>2020\u5e741\u67081\u65e5\u8d77\uff0c\u672c\u9879\u76ee\u4e0d\u518d\u4f9d\u8d56\u4e8e jQuery\u3002</p> <p>2022\u5e7411\u67081\u65e5\u8d77\uff0c\u672c\u9879\u76ee\u4e0d\u518d\u9700\u8981\u7528\u6237\u5355\u72ec\u52a0\u8f7d Font Awesome\u3002</p>"},{"location":"live2d-widget/README.en/","title":"Live2D Widget","text":"<p>\u4e2d\u6587</p>"},{"location":"live2d-widget/README.en/#features","title":"Features","text":"<p>Add Live2D widget to web page. Compatible with PJAX.</p> <p></p> <p>(Note: The character models above are for demonstration purposes only and are not included in this repository.)</p> <p>You can also check out example web pages:</p> <ul> <li>Check the effect in the lower left corner of Mimi's Blog</li> <li>demo/demo.html to demonstrate basic functionality</li> <li>demo/login.html to imitate the login interface of NPM</li> </ul>"},{"location":"live2d-widget/README.en/#usage","title":"Usage","text":"<p>If you are a beginner or only need the basic functionality, you can simply add the following line of code to the <code>head</code> or <code>body</code> of your HTML page to load the widget: <pre><code>&lt;script src=\"https://fastly.jsdelivr.net/npm/live2d-widgets@0/autoload.js\"&gt;&lt;/script&gt;\n</code></pre> The placement of the code depends on how your website is built. For example, if you are using Hexo, you need to add the above code to the template file of your theme. The modification process is similar for pages generated using various template engines. If your website uses PJAX, since the widget does not need to be refreshed on every page, make sure to place the script outside the PJAX refresh area.</p> <p>However, we strongly recommend configuring the widget yourself to make it more suitable for your website! If you are interested in customizing the widget, please refer to the detailed instructions below.</p>"},{"location":"live2d-widget/README.en/#configuration","title":"Configuration","text":"<p>You can refer to the source code of <code>dist/autoload.js</code> to see the available configuration options. <code>autoload.js</code> will automatically load three files: <code>waifu.css</code>, <code>live2d.min.js</code>, and <code>waifu-tips.js</code>. <code>waifu-tips.js</code> creates the <code>initWidget</code> function, which is the main function for loading the widget. The <code>initWidget</code> function accepts an object-type parameter as the configuration for the widget. The following are the available options:</p> Option Type Default Value Description <code>waifuPath</code> <code>string</code> <code>https://fastly.jsdelivr.net/npm/live2d-widgets@0/waifu-tips.json</code> Path to the widget resources, can be modified <code>apiPath</code> <code>string</code> <code>https://live2d.fghrsh.net/api/</code> API path, optional <code>cdnPath</code> <code>string</code> <code>https://fastly.jsdelivr.net/gh/fghrsh/live2d_api/</code> CDN path, optional <code>tools</code> <code>string[]</code> see <code>autoload.js</code> Buttons of the loaded tools, optional <p>Among them, the parameters <code>apiPath</code> and <code>cdnPath</code> only need to set one of them. <code>apiPath</code> is the URL of the backend API, which can be set up and modified by yourself (there are many things to modify, not discussed here). You can refer to live2d_api for more information. On the other hand, <code>cdnPath</code> is used to load resources through CDN services like jsDelivr, which provides better stability.</p>"},{"location":"live2d-widget/README.en/#customization","title":"Customization","text":"<p>If the options provided in the \"Configuration\" section above are not enough to meet your needs, you can make modifications yourself. The directory structure of this repository is as follows:</p> <ul> <li><code>src/</code> directory contains the code for each component, e.g. the button and dialog box.</li> <li><code>build/</code> directory contains the files built by TypeScript.</li> <li><code>dist/</code> directory contains the files that can be directly used on web pages after packaging, including:</li> <li><code>autoload.js</code> is used to automatically load other resources such as style sheets.</li> <li><code>waifu-tips.js</code> is automatically generated by <code>build/waifu-tips.js</code> and it is not recommended to modify it directly.</li> <li><code>waifu-tips.json</code> defines the triggering conditions (<code>selector</code>, CSS selector) and the displayed text when triggered (<code>text</code>).</li> <li><code>waifu.css</code> is the style sheet for the virtual assistant.</li> </ul> <p>By default, the CSS selector rules in <code>waifu-tips.json</code> are effective for the Hexo NexT theme, but you may need to modify or add new content to make it suitable for your own website. Warning: The content in <code>waifu-tips.json</code> may not be suitable for all age groups or appropriate to access during work. Please ensure their suitability when using them.</p> <p>To deploy the development testing environment of this project locally, you need to install Node.js and npm, then execute the following commands:</p> <pre><code>git clone https://github.com/stevenjoezhang/live2d-widget.git\nnpm install\nnpm run build\n</code></pre> <p>If you have any questions, feel free to raise an issue. If you have any modification suggestions, welcome to submit a pull request.</p>"},{"location":"live2d-widget/README.en/#deploy","title":"Deploy","text":"<p>After making modifications locally, you can deploy the modified project on a server or load it via a CDN for use on a webpage.</p>"},{"location":"live2d-widget/README.en/#using-cdn","title":"Using CDN","text":"<p>To customize the content, you can fork this repository and push the modified content to your own repository using <code>git push</code>. In this case, the usage method becomes:</p> <pre><code>&lt;script src=\"https://fastly.jsdelivr.net/gh/username/live2d-widget@latest/autoload.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Replace <code>username</code> with your GitHub username. To ensure the content of the CDN is refreshed correctly, you need to create a new git tag and push it to the GitHub repository. Otherwise, <code>@latest</code> in the URL will still point to the previous version. Additionally, CDN itself has caching, so the changes may take some time to take effect. Relevant documentation: - Git Basics - Tagging - Managing releases in a repository</p>"},{"location":"live2d-widget/README.en/#self-host","title":"Self-host","text":"<p>Alternatively, you can directly host these files on your server instead of loading them via CDN.</p> <ul> <li>If you can connect to your host via <code>ssh</code>, clone the forked and modified code repository onto your server.</li> <li>If your host cannot be accessed via <code>ssh</code> (e.g., a regular virtual host), modify the code locally and upload the files to the website directory on the host using <code>ftp</code> or similar methods.</li> <li>If you are deploying a static blog using Hexo or similar tools, place the code of this project in the blog's source file directory (e.g., the <code>source</code> directory). When redeploying the blog, the relevant files will be automatically uploaded to the corresponding paths. To prevent these files from being incorrectly modified by Hexo plugins, you may need to set <code>skip_render</code>.</li> </ul> <p>Afterwards, the entire project can be accessed through your domain name. You can try opening the <code>autoload.js</code> and <code>live2d.min.js</code> files in your browser and confirm that their content is complete and correct. If everything is normal, you can proceed to modify the constant <code>live2d_path</code> in <code>autoload.js</code> to the URL of the <code>live2d-widget</code> directory. For example, if you can access <code>live2d.min.js</code> through the following URL: <pre><code>https://example.com/path/to/live2d-widget/live2d.min.js\n</code></pre> then modify the value of <code>live2d_path</code> to: <pre><code>https://example.com/path/to/live2d-widget/\n</code></pre> Make sure to include the trailing <code>/</code> in the path. Once done, add the following code to the interface where you want to add the live2d-widget: <pre><code>&lt;script src=\"https://example.com/path/to/live2d-widget/autoload.js\"&gt;&lt;/script&gt;\n</code></pre> This will load the widget.</p>"},{"location":"live2d-widget/README.en/#thanks","title":"Thanks","text":"<p>Thanks to BrowserStack for providing the infrastructure that allows us to test in real browsers!</p> <p> </p> <p>Thanks to jsDelivr for providing public CDN service.</p> <p>The code is modified based on this blog post: https://www.fghrsh.net/post/123.html</p> <p>Thanks to Hitokoto for providing the sentence API.</p> <p>When you click on the paper airplane button of the virtual assistant, a hidden surprise will appear. This feature is from WebsiteAsteroids.</p>"},{"location":"live2d-widget/README.en/#more","title":"More","text":"<p>For more information, you can refer to the following links: https://nocilol.me/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02 https://github.com/xiazeyu/live2d-widget.js https://github.com/summerscar/live2dDemo</p> <p>Regarding the backend API models: https://github.com/xiazeyu/live2d-widget-models https://github.com/xiaoski/live2d_models_collection</p> <p>In addition to that, there are desktop versions available: https://github.com/amorist/platelet https://github.com/akiroz/Live2D-Widget https://github.com/zenghongtu/PPet https://github.com/LikeNeko/L2dPetForMac</p> <p>And also Wallpaper Engine: https://github.com/guansss/nep-live2d</p>"},{"location":"live2d-widget/README.en/#license","title":"License","text":"<p>Released under the GNU General Public License v3 http://www.gnu.org/licenses/gpl-3.0.html</p> <p>This repository does not contain any models. The copyrights of all Live2D models, images, and motion data used for demonstration purposes belong to their respective original authors. They are provided for research and learning purposes only and should not be used for commercial purposes.</p> <p>Official Live2D websites: https://www.live2d.com/en/ https://live2d.github.io</p> <p>Live2D Cubism Core is provided under the Live2D Proprietary Software License. https://www.live2d.com/eula/live2d-proprietary-software-license-agreement_en.html Live2D Cubism Components are provided under the Live2D Open Software License. http://www.live2d.com/eula/live2d-open-software-license-agreement_en.html</p> <p>The terms and conditions do prohibit modification, but obfuscating in <code>live2d.min.js</code> would not be considered illegal modification.</p> <p>https://community.live2d.com/discussion/140/webgl-developer-licence-and-javascript-question</p>"},{"location":"live2d-widget/README.en/#update-log","title":"Update Log","text":"<p>On October 31, 2018, the original API provided by fghrsh was discontinued. Please update to the new address. Refer to the following article for more information: https://www.fghrsh.net/post/170.html</p> <p>Starting from January 1, 2020, this project no longer depends on jQuery.</p> <p>Starting from November 1, 2022, this project no longer requires users to separately load Font Awesome.</p>"}]}